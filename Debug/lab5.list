
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003264  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2cc  0800c2cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2cc  0800c2cc  0001c2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2d4  0800c2d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d4  0800c2d4  0001c2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d8  0800c2d8  0001c2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000003a8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002259e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a59  00000000  00000000  00042646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001598  00000000  00000000  000460a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  00047638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a83  00000000  00000000  00048a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3d1  00000000  00000000  0006d503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3956  00000000  00000000  000888d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015c22a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f3c  00000000  00000000  0015c280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009050 	.word	0x08009050

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009050 	.word	0x08009050

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <initBuffer>:

/**
 * @brief Initialize the ring buffer
 *
 */
void initBuffer() {
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
    buffer.read_idx = 0;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <initBuffer+0x38>)
 800056e:	2200      	movs	r2, #0
 8000570:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    buffer.write_idx = 0;
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <initBuffer+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    buffer.size = 0;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <initBuffer+0x38>)
 800057e:	2200      	movs	r2, #0
 8000580:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

    start_char = 0;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <initBuffer+0x3c>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
    stop_char = 0;
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <initBuffer+0x40>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
    flag_stop_msg = WAITING_STATE;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <initBuffer+0x44>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	200000c0 	.word	0x200000c0
 80005a4:	200000bc 	.word	0x200000bc
 80005a8:	2000018d 	.word	0x2000018d
 80005ac:	2000018c 	.word	0x2000018c

080005b0 <pushBuffer>:
 * @brief Push an item to ring buffer. If success, return 1. Otherwise return 0
 *
 * @param item
 * @return uint8_t
 */
uint8_t pushBuffer(uint8_t item) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    if (buffer.size >= BUFFER_LENGTH) {
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <pushBuffer+0x9c>)
 80005bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80005c0:	2b63      	cmp	r3, #99	; 0x63
 80005c2:	d901      	bls.n	80005c8 <pushBuffer+0x18>
        // Buffer is full
        return 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e03a      	b.n	800063e <pushBuffer+0x8e>
    }
    if (start_char != 0 && stop_char != 0) {
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <pushBuffer+0xa0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d014      	beq.n	80005fa <pushBuffer+0x4a>
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <pushBuffer+0xa4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d010      	beq.n	80005fa <pushBuffer+0x4a>
        if (item == start_char) {
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <pushBuffer+0xa0>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	79fa      	ldrb	r2, [r7, #7]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d103      	bne.n	80005ea <pushBuffer+0x3a>
            flag_stop_msg = READING_MESSGAGE_STATE;
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <pushBuffer+0xa8>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e007      	b.n	80005fa <pushBuffer+0x4a>
        } else if (item == stop_char) {
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <pushBuffer+0xa4>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	79fa      	ldrb	r2, [r7, #7]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d102      	bne.n	80005fa <pushBuffer+0x4a>
            flag_stop_msg = READING_COMPLETE_STATE;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <pushBuffer+0xa8>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
        }
    }
    buffer.data[buffer.write_idx] = item;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <pushBuffer+0x9c>)
 80005fc:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000600:	4619      	mov	r1, r3
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <pushBuffer+0x9c>)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	5453      	strb	r3, [r2, r1]
    buffer.size++;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <pushBuffer+0x9c>)
 800060a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800060e:	3301      	adds	r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <pushBuffer+0x9c>)
 8000614:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    buffer.write_idx = (buffer.write_idx + 1) % BUFFER_LENGTH;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <pushBuffer+0x9c>)
 800061a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800061e:	3301      	adds	r3, #1
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <pushBuffer+0xac>)
 8000622:	fb82 1203 	smull	r1, r2, r2, r3
 8000626:	1151      	asrs	r1, r2, #5
 8000628:	17da      	asrs	r2, r3, #31
 800062a:	1a8a      	subs	r2, r1, r2
 800062c:	2164      	movs	r1, #100	; 0x64
 800062e:	fb01 f202 	mul.w	r2, r1, r2
 8000632:	1a9a      	subs	r2, r3, r2
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <pushBuffer+0x9c>)
 8000638:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    return 1;
 800063c:	2301      	movs	r3, #1
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200000c0 	.word	0x200000c0
 8000650:	200000bc 	.word	0x200000bc
 8000654:	2000018d 	.word	0x2000018d
 8000658:	2000018c 	.word	0x2000018c
 800065c:	51eb851f 	.word	0x51eb851f

08000660 <popBuffer>:
/**
 * @brief Pop the first item in the buffer. If success, return 1. Otherwise return 0
 *
 * @return uint8_t
 */
uint8_t popBuffer() {
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
    if (buffer.size == 0) {
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <popBuffer+0x54>)
 8000666:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <popBuffer+0x12>
        // Buffer is empty
        return 0;
 800066e:	2300      	movs	r3, #0
 8000670:	e01a      	b.n	80006a8 <popBuffer+0x48>
    }
    buffer.read_idx = (buffer.read_idx + 1) % BUFFER_LENGTH;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <popBuffer+0x54>)
 8000674:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000678:	3301      	adds	r3, #1
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <popBuffer+0x58>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1151      	asrs	r1, r2, #5
 8000682:	17da      	asrs	r2, r3, #31
 8000684:	1a8a      	subs	r2, r1, r2
 8000686:	2164      	movs	r1, #100	; 0x64
 8000688:	fb01 f202 	mul.w	r2, r1, r2
 800068c:	1a9a      	subs	r2, r3, r2
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <popBuffer+0x54>)
 8000692:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    buffer.size--;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <popBuffer+0x54>)
 8000698:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800069c:	3b01      	subs	r3, #1
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <popBuffer+0x54>)
 80006a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    return 1;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	200000c0 	.word	0x200000c0
 80006b8:	51eb851f 	.word	0x51eb851f

080006bc <frontBuffer>:
/**
 * @brief Get the pointer to first item in buffer. If buffer is empty, return NULL
 *
 * @return uint8_t*
 */
uint8_t* frontBuffer() {
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
    if (buffer.size == 0) {
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <frontBuffer+0x28>)
 80006c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <frontBuffer+0x12>
        // Buffer is empty
        return NULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e005      	b.n	80006da <frontBuffer+0x1e>
    }
    return buffer.data + buffer.read_idx;
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <frontBuffer+0x28>)
 80006d0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <frontBuffer+0x28>)
 80006d8:	4413      	add	r3, r2
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	200000c0 	.word	0x200000c0

080006e8 <flushBuffer>:
/**
 * @brief Flush all item buffer contain. If buffer is empty, return NULL
 *
 * @return uint8_t*
 */
uint8_t* flushBuffer() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    if (buffer.size == 0) {
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <flushBuffer+0x64>)
 80006f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <flushBuffer+0x14>
        // Buffer is empty
        return NULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	e022      	b.n	8000742 <flushBuffer+0x5a>
    }
    uint16_t size = buffer.size;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <flushBuffer+0x64>)
 80006fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8000702:	80bb      	strh	r3, [r7, #4]
    for (uint16_t i = 0; i < size; ++i) {
 8000704:	2300      	movs	r3, #0
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	e00b      	b.n	8000722 <flushBuffer+0x3a>
        flush_data[i] = *frontBuffer();
 800070a:	f7ff ffd7 	bl	80006bc <frontBuffer>
 800070e:	4602      	mov	r2, r0
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	7811      	ldrb	r1, [r2, #0]
 8000714:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <flushBuffer+0x68>)
 8000716:	54d1      	strb	r1, [r2, r3]
        popBuffer();
 8000718:	f7ff ffa2 	bl	8000660 <popBuffer>
    for (uint16_t i = 0; i < size; ++i) {
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	3301      	adds	r3, #1
 8000720:	80fb      	strh	r3, [r7, #6]
 8000722:	88fa      	ldrh	r2, [r7, #6]
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d3ef      	bcc.n	800070a <flushBuffer+0x22>
    }
    if (start_char != 0 && stop_char != 0) {
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <flushBuffer+0x6c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d006      	beq.n	8000740 <flushBuffer+0x58>
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <flushBuffer+0x70>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <flushBuffer+0x58>
        flag_stop_msg = WAITING_STATE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <flushBuffer+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
    }
    return flush_data;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <flushBuffer+0x68>)
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000c0 	.word	0x200000c0
 8000750:	20000128 	.word	0x20000128
 8000754:	200000bc 	.word	0x200000bc
 8000758:	2000018d 	.word	0x2000018d
 800075c:	2000018c 	.word	0x2000018c

08000760 <getBufSize>:
/**
 * @brief Get the Buffer Size object
 *
 * @return uint16_t
 */
uint16_t getBufSize() {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    return buffer.size;
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <getBufSize+0x14>)
 8000766:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	200000c0 	.word	0x200000c0

08000778 <setStartChar>:
 * @brief Set the Start Char object
 * 
 * @param start Character represent for the begin of message
 */
void setStartChar(uint8_t start)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
    start_char = start;
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <setStartChar+0x1c>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	7013      	strb	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	200000bc 	.word	0x200000bc

08000798 <setStopChar>:
 * @brief Set the Stop Char object
 * 
 * @param stop Character represent for the end of message
 */
void setStopChar(uint8_t stop)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
    stop_char = stop;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <setStopChar+0x1c>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	7013      	strb	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	2000018d 	.word	0x2000018d

080007b8 <isMsgStop>:
 * @brief Check if the message in buffer is received completely
 * 
 * @return uint8_t 
 */
uint8_t isMsgStop()
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
    return flag_stop_msg;
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <isMsgStop+0x14>)
 80007be:	781b      	ldrb	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	2000018c 	.word	0x2000018c

080007d0 <getMsg>:
 * @param buffer 
 * @param size 
 * @param start 
 */
void getMsg(uint8_t *buffer, uint16_t *size, uint8_t *start)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
    while (*start < BUFFER_LENGTH && *size > 0 && *(buffer + *start) != start_char) {
 80007dc:	e00b      	b.n	80007f6 <getMsg+0x26>
        (*start)++;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	701a      	strb	r2, [r3, #0]
        (*size)--;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	801a      	strh	r2, [r3, #0]
    while (*start < BUFFER_LENGTH && *size > 0 && *(buffer + *start) != start_char) {
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b63      	cmp	r3, #99	; 0x63
 80007fc:	d80d      	bhi.n	800081a <getMsg+0x4a>
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d009      	beq.n	800081a <getMsg+0x4a>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <getMsg+0xe4>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	429a      	cmp	r2, r3
 8000818:	d1e1      	bne.n	80007de <getMsg+0xe>
    }
    // Handle empty buffer
    if (*size == 0) {
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d042      	beq.n	80008a8 <getMsg+0xd8>
        return;
    } 
    (*size)--;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	b29a      	uxth	r2, r3
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	801a      	strh	r2, [r3, #0]
    uint8_t idx = ++(*start), count = 0;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	75fb      	strb	r3, [r7, #23]
 8000840:	2300      	movs	r3, #0
 8000842:	75bb      	strb	r3, [r7, #22]
    while (idx < BUFFER_LENGTH && *size > 0 && *(buffer + idx) != stop_char) {
 8000844:	e00b      	b.n	800085e <getMsg+0x8e>
        idx++;
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	3301      	adds	r3, #1
 800084a:	75fb      	strb	r3, [r7, #23]
        (*size)--;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	b29a      	uxth	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	801a      	strh	r2, [r3, #0]
        count++;
 8000858:	7dbb      	ldrb	r3, [r7, #22]
 800085a:	3301      	adds	r3, #1
 800085c:	75bb      	strb	r3, [r7, #22]
    while (idx < BUFFER_LENGTH && *size > 0 && *(buffer + idx) != stop_char) {
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	2b63      	cmp	r3, #99	; 0x63
 8000862:	d80b      	bhi.n	800087c <getMsg+0xac>
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d007      	beq.n	800087c <getMsg+0xac>
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	4413      	add	r3, r2
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <getMsg+0xe8>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d1e4      	bne.n	8000846 <getMsg+0x76>
    }
    if (idx >= BUFFER_LENGTH || *(buffer + idx) != stop_char) {
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	2b63      	cmp	r3, #99	; 0x63
 8000880:	d807      	bhi.n	8000892 <getMsg+0xc2>
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <getMsg+0xe8>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d005      	beq.n	800089e <getMsg+0xce>
        *start = 0;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
        *size = 0;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2200      	movs	r2, #0
 800089c:	801a      	strh	r2, [r3, #0]
    }
    *size = count;
 800089e:	7dbb      	ldrb	r3, [r7, #22]
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	801a      	strh	r2, [r3, #0]
 80008a6:	e000      	b.n	80008aa <getMsg+0xda>
        return;
 80008a8:	bf00      	nop
}
 80008aa:	371c      	adds	r7, #28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	200000bc 	.word	0x200000bc
 80008b8:	2000018d 	.word	0x2000018d

080008bc <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2108      	movs	r1, #8
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <button_init+0x14>)
 80008c6:	f003 fe6b 	bl	80045a0 <HAL_GPIO_WritePin>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <button_Scan>:

void button_Scan() {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2108      	movs	r1, #8
 80008de:	482f      	ldr	r0, [pc, #188]	; (800099c <button_Scan+0xc8>)
 80008e0:	f003 fe5e 	bl	80045a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2108      	movs	r1, #8
 80008e8:	482c      	ldr	r0, [pc, #176]	; (800099c <button_Scan+0xc8>)
 80008ea:	f003 fe59 	bl	80045a0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80008ee:	230a      	movs	r3, #10
 80008f0:	2202      	movs	r2, #2
 80008f2:	492b      	ldr	r1, [pc, #172]	; (80009a0 <button_Scan+0xcc>)
 80008f4:	482b      	ldr	r0, [pc, #172]	; (80009a4 <button_Scan+0xd0>)
 80008f6:	f005 fd68 	bl	80063ca <HAL_SPI_Receive>
	  int button_index = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80008fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000902:	817b      	strh	r3, [r7, #10]
	  for (int i = 0; i < 16; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	e03f      	b.n	800098a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db06      	blt.n	800091e <button_Scan+0x4a>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	dc03      	bgt.n	800091e <button_Scan+0x4a>
			  button_index = i + 4;			// do theo schematic thì spi gửi ko giống như button trên mạch
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3304      	adds	r3, #4
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	e018      	b.n	8000950 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7) {	//-> cần convert lại cho nó đúng với thứ tự mình mún
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b03      	cmp	r3, #3
 8000922:	dd07      	ble.n	8000934 <button_Scan+0x60>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b07      	cmp	r3, #7
 8000928:	dc04      	bgt.n	8000934 <button_Scan+0x60>
			  button_index = 7 - i;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f1c3 0307 	rsb	r3, r3, #7
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e00d      	b.n	8000950 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b07      	cmp	r3, #7
 8000938:	dd06      	ble.n	8000948 <button_Scan+0x74>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0b      	cmp	r3, #11
 800093e:	dc03      	bgt.n	8000948 <button_Scan+0x74>
			  button_index = i + 4;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3304      	adds	r3, #4
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e003      	b.n	8000950 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f1c3 0317 	rsb	r3, r3, #23
 800094e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <button_Scan+0xcc>)
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	897b      	ldrh	r3, [r7, #10]
 8000956:	4013      	ands	r3, r2
 8000958:	b29b      	uxth	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d005      	beq.n	800096a <button_Scan+0x96>
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <button_Scan+0xd4>)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2100      	movs	r1, #0
 8000964:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000968:	e009      	b.n	800097e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <button_Scan+0xd4>)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000972:	3301      	adds	r3, #1
 8000974:	b299      	uxth	r1, r3
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <button_Scan+0xd4>)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800097e:	897b      	ldrh	r3, [r7, #10]
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	817b      	strh	r3, [r7, #10]
	  for (int i = 0; i < 16; i++) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	ddbc      	ble.n	800090a <button_Scan+0x36>
	  }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	20000094 	.word	0x20000094
 80009a4:	200002fc 	.word	0x200002fc
 80009a8:	20000190 	.word	0x20000190

080009ac <clockInit>:
/**
 * @brief Initialize clock
 * 
 */
void clockInit()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af04      	add	r7, sp, #16
	alarmInit();	// Initialize alarm attribute
 80009b2:	f000 f84b 	bl	8000a4c <alarmInit>

	// Initialize time
	updateTimeFull(16, 06, 07, 5, 5, 12, 24);
 80009b6:	2318      	movs	r3, #24
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	230c      	movs	r3, #12
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	2305      	movs	r3, #5
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2305      	movs	r3, #5
 80009c4:	2207      	movs	r2, #7
 80009c6:	2106      	movs	r1, #6
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 f91b 	bl	8000c04 <updateTimeFull>

	// Initialize mode
	clock_mode = WATCH_MODE;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <clockInit+0x70>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	set_time_mode = MODIFY_SEC_STATE;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <clockInit+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	alarm_mode = MODIFY_SEC_STATE;
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <clockInit+0x78>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	blink_mode = TURN_OFF;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <clockInit+0x7c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	update_time_mode = UPDATE_SEC;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <clockInit+0x80>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]

	// Initialize temparary variable
	sec_temp = 0;
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <clockInit+0x84>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	min_temp = 0;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <clockInit+0x88>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
	hours_temp = 0;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <clockInit+0x8c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	date_temp = 0;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <clockInit+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	day_temp = 0;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <clockInit+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	month_temp = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <clockInit+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	year_temp = 0;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <clockInit+0x9c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001b3 	.word	0x200001b3
 8000a20:	200001b9 	.word	0x200001b9
 8000a24:	200001b5 	.word	0x200001b5
 8000a28:	200001b4 	.word	0x200001b4
 8000a2c:	200001b7 	.word	0x200001b7
 8000a30:	200001bd 	.word	0x200001bd
 8000a34:	200001be 	.word	0x200001be
 8000a38:	200001ba 	.word	0x200001ba
 8000a3c:	200001c5 	.word	0x200001c5
 8000a40:	200001c0 	.word	0x200001c0
 8000a44:	200001b8 	.word	0x200001b8
 8000a48:	200001b1 	.word	0x200001b1

08000a4c <alarmInit>:
/**
 * @brief Initialize attribute of alarm
 * 
 */
void alarmInit() 
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	sec_alarm = 0;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <alarmInit+0x38>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
	min_alarm = 0;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <alarmInit+0x3c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
	hours_alarm = 0;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <alarmInit+0x40>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
	day_alarm = 0;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <alarmInit+0x44>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
	date_alarm = 0;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <alarmInit+0x48>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	month_alarm = 0;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <alarmInit+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
	year_alarm = 0;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <alarmInit+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	200001c2 	.word	0x200001c2
 8000a88:	200001bc 	.word	0x200001bc
 8000a8c:	200001b0 	.word	0x200001b0
 8000a90:	200001c3 	.word	0x200001c3
 8000a94:	200001bb 	.word	0x200001bb
 8000a98:	200001b2 	.word	0x200001b2
 8000a9c:	200001c1 	.word	0x200001c1

08000aa0 <setTimeInit>:
/**
 * @brief Initialize time attribute for setting time mode
 * 
 */
void setTimeInit()
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	sec_temp = ds3231_sec;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <setTimeInit+0x48>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <setTimeInit+0x4c>)
 8000aaa:	701a      	strb	r2, [r3, #0]
	min_temp = ds3231_min;
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <setTimeInit+0x50>)
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <setTimeInit+0x54>)
 8000ab2:	701a      	strb	r2, [r3, #0]
	hours_temp = ds3231_hours;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <setTimeInit+0x58>)
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <setTimeInit+0x5c>)
 8000aba:	701a      	strb	r2, [r3, #0]
	day_temp = ds3231_day;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <setTimeInit+0x60>)
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <setTimeInit+0x64>)
 8000ac2:	701a      	strb	r2, [r3, #0]
	date_temp = ds3231_date;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <setTimeInit+0x68>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <setTimeInit+0x6c>)
 8000aca:	701a      	strb	r2, [r3, #0]
	month_temp = ds3231_month;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <setTimeInit+0x70>)
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <setTimeInit+0x74>)
 8000ad2:	701a      	strb	r2, [r3, #0]
	year_temp = ds3231_year;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <setTimeInit+0x78>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <setTimeInit+0x7c>)
 8000ada:	701a      	strb	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200001c8 	.word	0x200001c8
 8000aec:	200001bd 	.word	0x200001bd
 8000af0:	200001ca 	.word	0x200001ca
 8000af4:	200001be 	.word	0x200001be
 8000af8:	200001cd 	.word	0x200001cd
 8000afc:	200001ba 	.word	0x200001ba
 8000b00:	200001cc 	.word	0x200001cc
 8000b04:	200001c0 	.word	0x200001c0
 8000b08:	200001cb 	.word	0x200001cb
 8000b0c:	200001c5 	.word	0x200001c5
 8000b10:	200001ce 	.word	0x200001ce
 8000b14:	200001b8 	.word	0x200001b8
 8000b18:	200001c9 	.word	0x200001c9
 8000b1c:	200001b1 	.word	0x200001b1

08000b20 <Uart4ClockInit>:
/**
 * @brief Initialize attributes for updating time via UART
 * 
 */
void Uart4ClockInit()
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af04      	add	r7, sp, #16
	waiting_response = 0;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <Uart4ClockInit+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
	is_update_complete = 0;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <Uart4ClockInit+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
	counter_update = MAX_COUNTER;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <Uart4ClockInit+0x54>)
 8000b34:	2203      	movs	r2, #3
 8000b36:	701a      	strb	r2, [r3, #0]
	timeout_update = 1000 * TIMEOUT / PERIOD;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <Uart4ClockInit+0x58>)
 8000b3a:	2214      	movs	r2, #20
 8000b3c:	701a      	strb	r2, [r3, #0]
	update_time_mode = UPDATE_SEC;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <Uart4ClockInit+0x5c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
	lcd_Clear(BLACK);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f001 fcab 	bl	80024a0 <lcd_Clear>
	lcd_ShowStr(20, 160, (uint8_t *)"Updating Second...", YELLOW, BLACK, 24, 1);
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2318      	movs	r3, #24
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	2300      	movs	r3, #0
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000b5a:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <Uart4ClockInit+0x60>)
 8000b5c:	21a0      	movs	r1, #160	; 0xa0
 8000b5e:	2014      	movs	r0, #20
 8000b60:	f002 f8ce 	bl	8002d00 <lcd_ShowStr>
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001c4 	.word	0x200001c4
 8000b70:	200001bf 	.word	0x200001bf
 8000b74:	200001b6 	.word	0x200001b6
 8000b78:	200001c6 	.word	0x200001c6
 8000b7c:	200001b7 	.word	0x200001b7
 8000b80:	08009068 	.word	0x08009068

08000b84 <isUpdateComplete>:
 * @brief Return 1 when update time via UART completely
 * 
 * @return uint8_t 
 */
uint8_t isUpdateComplete()
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	if (is_update_complete) {
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <isUpdateComplete+0x24>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <isUpdateComplete+0x16>
		is_update_complete = 0;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <isUpdateComplete+0x24>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
		return 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <isUpdateComplete+0x18>
	}
	return 0;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200001bf 	.word	0x200001bf

08000bac <updateTime>:
/**
 * @brief Update time to IC RTC DS3231 (reduce form)
 * 
 */
void updateTime()
{
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af04      	add	r7, sp, #16
	updateTimeFull(ds3231_sec, ds3231_min, ds3231_hours, ds3231_day,
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <updateTime+0x3c>)
 8000bb4:	7818      	ldrb	r0, [r3, #0]
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <updateTime+0x40>)
 8000bb8:	781c      	ldrb	r4, [r3, #0]
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <updateTime+0x44>)
 8000bbc:	781d      	ldrb	r5, [r3, #0]
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <updateTime+0x48>)
 8000bc0:	781e      	ldrb	r6, [r3, #0]
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <updateTime+0x4c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <updateTime+0x50>)
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <updateTime+0x54>)
 8000bcc:	7809      	ldrb	r1, [r1, #0]
 8000bce:	9102      	str	r1, [sp, #8]
 8000bd0:	9201      	str	r2, [sp, #4]
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	4633      	mov	r3, r6
 8000bd6:	462a      	mov	r2, r5
 8000bd8:	4621      	mov	r1, r4
 8000bda:	f000 f813 	bl	8000c04 <updateTimeFull>
				   ds3231_date, ds3231_month, ds3231_year);
}
 8000bde:	bf00      	nop
 8000be0:	3704      	adds	r7, #4
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001c8 	.word	0x200001c8
 8000bec:	200001ca 	.word	0x200001ca
 8000bf0:	200001cd 	.word	0x200001cd
 8000bf4:	200001cc 	.word	0x200001cc
 8000bf8:	200001cb 	.word	0x200001cb
 8000bfc:	200001ce 	.word	0x200001ce
 8000c00:	200001c9 	.word	0x200001c9

08000c04 <updateTimeFull>:
					uint8_t minute, 
					uint8_t hours, 
					uint8_t day, 
					uint8_t date, 
					uint8_t month, 
					uint8_t year){
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	4603      	mov	r3, r0
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	717b      	strb	r3, [r7, #5]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	713b      	strb	r3, [r7, #4]
	ds3231_Write(ADDRESS_YEAR, year);
 8000c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c26:	4619      	mov	r1, r3
 8000c28:	2006      	movs	r0, #6
 8000c2a:	f001 fb35 	bl	8002298 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, month);
 8000c2e:	7f3b      	ldrb	r3, [r7, #28]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2005      	movs	r0, #5
 8000c34:	f001 fb30 	bl	8002298 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, date);
 8000c38:	7e3b      	ldrb	r3, [r7, #24]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f001 fb2b 	bl	8002298 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, day);
 8000c42:	793b      	ldrb	r3, [r7, #4]
 8000c44:	4619      	mov	r1, r3
 8000c46:	2003      	movs	r0, #3
 8000c48:	f001 fb26 	bl	8002298 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, hours);
 8000c4c:	797b      	ldrb	r3, [r7, #5]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2002      	movs	r0, #2
 8000c52:	f001 fb21 	bl	8002298 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, minute);
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f001 fb1c 	bl	8002298 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, second);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	4619      	mov	r1, r3
 8000c64:	2000      	movs	r0, #0
 8000c66:	f001 fb17 	bl	8002298 <ds3231_Write>
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}
	...

08000c74 <clockFSM>:
/**
 * @brief Finite state machine for clock
 *
 */
void clockFSM()
{
 8000c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af04      	add	r7, sp, #16
	// button_count[11]: ringt arrow
	// button_count[3]: up arrow
	// button_count[12]: E button
	// button_count[14]: B button
	switch (clock_mode)
 8000c7a:	4b4f      	ldr	r3, [pc, #316]	; (8000db8 <clockFSM+0x144>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	f200 8094 	bhi.w	8000dac <clockFSM+0x138>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <clockFSM+0x18>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000ce5 	.word	0x08000ce5
 8000c94:	08000d35 	.word	0x08000d35
 8000c98:	08000d7d 	.word	0x08000d7d
	{
	case WATCH_MODE:
		// Display time
		ds3231_ReadTime();
 8000c9c:	f001 fb1e 	bl	80022dc <ds3231_ReadTime>
		displayTime();
 8000ca0:	f001 f988 	bl	8001fb4 <displayTime>
		// check button state
		if (button_count[11] >= BUTTON_COUNT_PRESS) {
 8000ca4:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <clockFSM+0x148>)
 8000ca6:	8adb      	ldrh	r3, [r3, #22]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d90b      	bls.n	8000cc4 <clockFSM+0x50>
			// Change mode
			button_count[11] = 0;
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <clockFSM+0x148>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	82da      	strh	r2, [r3, #22]
			clock_mode = SET_TIME_MODE;
 8000cb2:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <clockFSM+0x144>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
			setTimeInit();
 8000cb8:	f7ff fef2 	bl	8000aa0 <setTimeInit>
			lcd_Clear(BLACK);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f001 fbef 	bl	80024a0 <lcd_Clear>
			clock_mode = UPDATE_TIME_VIA_UART;
			Uart4ClockInit();
		} else {
			checkAlarm();
		}
		break;
 8000cc2:	e074      	b.n	8000dae <clockFSM+0x13a>
		} else if (button_count[14] >= BUTTON_COUNT_PRESS) {
 8000cc4:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <clockFSM+0x148>)
 8000cc6:	8b9b      	ldrh	r3, [r3, #28]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d908      	bls.n	8000cde <clockFSM+0x6a>
			button_count[14] = 0;
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <clockFSM+0x148>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	839a      	strh	r2, [r3, #28]
			clock_mode = UPDATE_TIME_VIA_UART;
 8000cd2:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <clockFSM+0x144>)
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	701a      	strb	r2, [r3, #0]
			Uart4ClockInit();
 8000cd8:	f7ff ff22 	bl	8000b20 <Uart4ClockInit>
		break;
 8000cdc:	e067      	b.n	8000dae <clockFSM+0x13a>
			checkAlarm();
 8000cde:	f001 f8ff 	bl	8001ee0 <checkAlarm>
		break;
 8000ce2:	e064      	b.n	8000dae <clockFSM+0x13a>
	case SET_TIME_MODE:
		displayTimeFull(sec_temp, min_temp, hours_temp, day_temp,
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <clockFSM+0x14c>)
 8000ce6:	7818      	ldrb	r0, [r3, #0]
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <clockFSM+0x150>)
 8000cea:	781c      	ldrb	r4, [r3, #0]
 8000cec:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <clockFSM+0x154>)
 8000cee:	781d      	ldrb	r5, [r3, #0]
 8000cf0:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <clockFSM+0x158>)
 8000cf2:	781e      	ldrb	r6, [r3, #0]
 8000cf4:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <clockFSM+0x15c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <clockFSM+0x160>)
 8000cfa:	7812      	ldrb	r2, [r2, #0]
 8000cfc:	4936      	ldr	r1, [pc, #216]	; (8000dd8 <clockFSM+0x164>)
 8000cfe:	7809      	ldrb	r1, [r1, #0]
 8000d00:	9102      	str	r1, [sp, #8]
 8000d02:	9201      	str	r2, [sp, #4]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	4633      	mov	r3, r6
 8000d08:	462a      	mov	r2, r5
 8000d0a:	4621      	mov	r1, r4
 8000d0c:	f001 f97e 	bl	800200c <displayTimeFull>
						date_temp, month_temp, year_temp);
		if (button_count[11] >= BUTTON_COUNT_PRESS) {
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <clockFSM+0x148>)
 8000d12:	8adb      	ldrh	r3, [r3, #22]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d90a      	bls.n	8000d2e <clockFSM+0xba>
			// Update Time and Change mode
			updateTime();
 8000d18:	f7ff ff48 	bl	8000bac <updateTime>
			button_count[11] = 0;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <clockFSM+0x148>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	82da      	strh	r2, [r3, #22]
			clock_mode = ALARM_MODE;
 8000d22:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <clockFSM+0x144>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	701a      	strb	r2, [r3, #0]
			setTimeInit();
 8000d28:	f7ff feba 	bl	8000aa0 <setTimeInit>
		} else {
			setTimeFSM();
		}
		break;
 8000d2c:	e03f      	b.n	8000dae <clockFSM+0x13a>
			setTimeFSM();
 8000d2e:	f000 f855 	bl	8000ddc <setTimeFSM>
		break;
 8000d32:	e03c      	b.n	8000dae <clockFSM+0x13a>
	case ALARM_MODE:
		displayTimeFull(sec_temp, min_temp, hours_temp, day_temp,
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <clockFSM+0x14c>)
 8000d36:	7818      	ldrb	r0, [r3, #0]
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <clockFSM+0x150>)
 8000d3a:	781c      	ldrb	r4, [r3, #0]
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <clockFSM+0x154>)
 8000d3e:	781d      	ldrb	r5, [r3, #0]
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <clockFSM+0x158>)
 8000d42:	781e      	ldrb	r6, [r3, #0]
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <clockFSM+0x15c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <clockFSM+0x160>)
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	4922      	ldr	r1, [pc, #136]	; (8000dd8 <clockFSM+0x164>)
 8000d4e:	7809      	ldrb	r1, [r1, #0]
 8000d50:	9102      	str	r1, [sp, #8]
 8000d52:	9201      	str	r2, [sp, #4]
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	4633      	mov	r3, r6
 8000d58:	462a      	mov	r2, r5
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	f001 f956 	bl	800200c <displayTimeFull>
						date_temp, month_temp, year_temp);
		if (button_count[11] >= BUTTON_COUNT_PRESS) {
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <clockFSM+0x148>)
 8000d62:	8adb      	ldrh	r3, [r3, #22]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d906      	bls.n	8000d76 <clockFSM+0x102>
			// Change mode
			button_count[11] = 0;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <clockFSM+0x148>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	82da      	strh	r2, [r3, #22]
			clock_mode = WATCH_MODE;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <clockFSM+0x144>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		} else {
			setAlarmFSM();
		}
		break;
 8000d74:	e01b      	b.n	8000dae <clockFSM+0x13a>
			setAlarmFSM();
 8000d76:	f000 f993 	bl	80010a0 <setAlarmFSM>
		break;
 8000d7a:	e018      	b.n	8000dae <clockFSM+0x13a>
	case UPDATE_TIME_VIA_UART:
		if (button_count[0] >= BUTTON_COUNT_PRESS || isUpdateComplete()) {
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <clockFSM+0x148>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d804      	bhi.n	8000d8e <clockFSM+0x11a>
 8000d84:	f7ff fefe 	bl	8000b84 <isUpdateComplete>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <clockFSM+0x132>
			clock_mode = WATCH_MODE;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <clockFSM+0x144>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
			button_count[0] = 0;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <clockFSM+0x148>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	801a      	strh	r2, [r3, #0]
			lcd_Clear(BLACK);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f001 fb80 	bl	80024a0 <lcd_Clear>
			updateTime();
 8000da0:	f7ff ff04 	bl	8000bac <updateTime>
			break;
 8000da4:	e003      	b.n	8000dae <clockFSM+0x13a>
		}
		updateTimeViaUartFSM();
 8000da6:	f000 fc1b 	bl	80015e0 <updateTimeViaUartFSM>
		break;
 8000daa:	e000      	b.n	8000dae <clockFSM+0x13a>
	default:
		break;
 8000dac:	bf00      	nop
	}
}
 8000dae:	bf00      	nop
 8000db0:	3704      	adds	r7, #4
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001b3 	.word	0x200001b3
 8000dbc:	20000190 	.word	0x20000190
 8000dc0:	200001bd 	.word	0x200001bd
 8000dc4:	200001be 	.word	0x200001be
 8000dc8:	200001ba 	.word	0x200001ba
 8000dcc:	200001c0 	.word	0x200001c0
 8000dd0:	200001c5 	.word	0x200001c5
 8000dd4:	200001b8 	.word	0x200001b8
 8000dd8:	200001b1 	.word	0x200001b1

08000ddc <setTimeFSM>:
/**
 * @brief Finite state machine for setting time
 * 
 */
void setTimeFSM()
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	switch (set_time_mode)
 8000de0:	4b99      	ldr	r3, [pc, #612]	; (8001048 <setTimeFSM+0x26c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	f200 811b 	bhi.w	8001020 <setTimeFSM+0x244>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <setTimeFSM+0x14>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e0d 	.word	0x08000e0d
 8000df4:	08000e5b 	.word	0x08000e5b
 8000df8:	08000ea9 	.word	0x08000ea9
 8000dfc:	08000ef5 	.word	0x08000ef5
 8000e00:	08000f43 	.word	0x08000f43
 8000e04:	08000f8f 	.word	0x08000f8f
 8000e08:	08000fd7 	.word	0x08000fd7
	{
	case MODIFY_SEC_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8000e0c:	4b8f      	ldr	r3, [pc, #572]	; (800104c <setTimeFSM+0x270>)
 8000e0e:	8b1b      	ldrh	r3, [r3, #24]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d90a      	bls.n	8000e2a <setTimeFSM+0x4e>
			// Save and change state to MINUTE
			ds3231_sec = sec_temp;
 8000e14:	4b8e      	ldr	r3, [pc, #568]	; (8001050 <setTimeFSM+0x274>)
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	4b8e      	ldr	r3, [pc, #568]	; (8001054 <setTimeFSM+0x278>)
 8000e1a:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8000e1c:	4b8b      	ldr	r3, [pc, #556]	; (800104c <setTimeFSM+0x270>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_MIN_STATE;
 8000e22:	4b89      	ldr	r3, [pc, #548]	; (8001048 <setTimeFSM+0x26c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase second
				sec_temp = (sec_temp + 1) % 60;
			}
		}
		break;
 8000e28:	e0fc      	b.n	8001024 <setTimeFSM+0x248>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8000e2a:	4b88      	ldr	r3, [pc, #544]	; (800104c <setTimeFSM+0x270>)
 8000e2c:	88db      	ldrh	r3, [r3, #6]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	f240 80f8 	bls.w	8001024 <setTimeFSM+0x248>
				sec_temp = (sec_temp + 1) % 60;
 8000e34:	4b86      	ldr	r3, [pc, #536]	; (8001050 <setTimeFSM+0x274>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	4b87      	ldr	r3, [pc, #540]	; (8001058 <setTimeFSM+0x27c>)
 8000e3c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e40:	4413      	add	r3, r2
 8000e42:	1159      	asrs	r1, r3, #5
 8000e44:	17d3      	asrs	r3, r2, #31
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	1ad1      	subs	r1, r2, r3
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	4b7e      	ldr	r3, [pc, #504]	; (8001050 <setTimeFSM+0x274>)
 8000e56:	701a      	strb	r2, [r3, #0]
		break;
 8000e58:	e0e4      	b.n	8001024 <setTimeFSM+0x248>
	case MODIFY_MIN_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8000e5a:	4b7c      	ldr	r3, [pc, #496]	; (800104c <setTimeFSM+0x270>)
 8000e5c:	8b1b      	ldrh	r3, [r3, #24]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d90a      	bls.n	8000e78 <setTimeFSM+0x9c>
			// Save and change state to HOURS
			ds3231_min = min_temp;
 8000e62:	4b7e      	ldr	r3, [pc, #504]	; (800105c <setTimeFSM+0x280>)
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	4b7e      	ldr	r3, [pc, #504]	; (8001060 <setTimeFSM+0x284>)
 8000e68:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8000e6a:	4b78      	ldr	r3, [pc, #480]	; (800104c <setTimeFSM+0x270>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_HOUR_STATE;
 8000e70:	4b75      	ldr	r3, [pc, #468]	; (8001048 <setTimeFSM+0x26c>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase minute
				min_temp = (min_temp + 1) % 60;
			}
		}
		break;
 8000e76:	e0d7      	b.n	8001028 <setTimeFSM+0x24c>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8000e78:	4b74      	ldr	r3, [pc, #464]	; (800104c <setTimeFSM+0x270>)
 8000e7a:	88db      	ldrh	r3, [r3, #6]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	f240 80d3 	bls.w	8001028 <setTimeFSM+0x24c>
				min_temp = (min_temp + 1) % 60;
 8000e82:	4b76      	ldr	r3, [pc, #472]	; (800105c <setTimeFSM+0x280>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	4b73      	ldr	r3, [pc, #460]	; (8001058 <setTimeFSM+0x27c>)
 8000e8a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e8e:	4413      	add	r3, r2
 8000e90:	1159      	asrs	r1, r3, #5
 8000e92:	17d3      	asrs	r3, r2, #31
 8000e94:	1ac9      	subs	r1, r1, r3
 8000e96:	460b      	mov	r3, r1
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	1a5b      	subs	r3, r3, r1
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	1ad1      	subs	r1, r2, r3
 8000ea0:	b2ca      	uxtb	r2, r1
 8000ea2:	4b6e      	ldr	r3, [pc, #440]	; (800105c <setTimeFSM+0x280>)
 8000ea4:	701a      	strb	r2, [r3, #0]
		break;
 8000ea6:	e0bf      	b.n	8001028 <setTimeFSM+0x24c>
	case MODIFY_HOUR_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8000ea8:	4b68      	ldr	r3, [pc, #416]	; (800104c <setTimeFSM+0x270>)
 8000eaa:	8b1b      	ldrh	r3, [r3, #24]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d90a      	bls.n	8000ec6 <setTimeFSM+0xea>
			// Save and change state to DAY
			ds3231_hours = hours_temp;
 8000eb0:	4b6c      	ldr	r3, [pc, #432]	; (8001064 <setTimeFSM+0x288>)
 8000eb2:	781a      	ldrb	r2, [r3, #0]
 8000eb4:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <setTimeFSM+0x28c>)
 8000eb6:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8000eb8:	4b64      	ldr	r3, [pc, #400]	; (800104c <setTimeFSM+0x270>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_DAY_STATE;
 8000ebe:	4b62      	ldr	r3, [pc, #392]	; (8001048 <setTimeFSM+0x26c>)
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase minute
				hours_temp = (hours_temp + 1) % 24;
			}
		}
		break;
 8000ec4:	e0b2      	b.n	800102c <setTimeFSM+0x250>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8000ec6:	4b61      	ldr	r3, [pc, #388]	; (800104c <setTimeFSM+0x270>)
 8000ec8:	88db      	ldrh	r3, [r3, #6]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	f240 80ae 	bls.w	800102c <setTimeFSM+0x250>
				hours_temp = (hours_temp + 1) % 24;
 8000ed0:	4b64      	ldr	r3, [pc, #400]	; (8001064 <setTimeFSM+0x288>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	4b65      	ldr	r3, [pc, #404]	; (800106c <setTimeFSM+0x290>)
 8000ed8:	fb83 1302 	smull	r1, r3, r3, r2
 8000edc:	1099      	asrs	r1, r3, #2
 8000ede:	17d3      	asrs	r3, r2, #31
 8000ee0:	1ac9      	subs	r1, r1, r3
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	440b      	add	r3, r1
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	1ad1      	subs	r1, r2, r3
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <setTimeFSM+0x288>)
 8000ef0:	701a      	strb	r2, [r3, #0]
		break;
 8000ef2:	e09b      	b.n	800102c <setTimeFSM+0x250>
	case MODIFY_DAY_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8000ef4:	4b55      	ldr	r3, [pc, #340]	; (800104c <setTimeFSM+0x270>)
 8000ef6:	8b1b      	ldrh	r3, [r3, #24]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d90a      	bls.n	8000f12 <setTimeFSM+0x136>
			// Save and change state to DATE
			ds3231_day = day_temp;
 8000efc:	4b5c      	ldr	r3, [pc, #368]	; (8001070 <setTimeFSM+0x294>)
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	4b5c      	ldr	r3, [pc, #368]	; (8001074 <setTimeFSM+0x298>)
 8000f02:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8000f04:	4b51      	ldr	r3, [pc, #324]	; (800104c <setTimeFSM+0x270>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_DATE_STATE;
 8000f0a:	4b4f      	ldr	r3, [pc, #316]	; (8001048 <setTimeFSM+0x26c>)
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase day
				day_temp = (day_temp % 7) + 1;
			}
		}
		break;
 8000f10:	e08e      	b.n	8001030 <setTimeFSM+0x254>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8000f12:	4b4e      	ldr	r3, [pc, #312]	; (800104c <setTimeFSM+0x270>)
 8000f14:	88db      	ldrh	r3, [r3, #6]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	f240 808a 	bls.w	8001030 <setTimeFSM+0x254>
				day_temp = (day_temp % 7) + 1;
 8000f1c:	4b54      	ldr	r3, [pc, #336]	; (8001070 <setTimeFSM+0x294>)
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	4b55      	ldr	r3, [pc, #340]	; (8001078 <setTimeFSM+0x29c>)
 8000f22:	fba3 1302 	umull	r1, r3, r3, r2
 8000f26:	1ad1      	subs	r1, r2, r3
 8000f28:	0849      	lsrs	r1, r1, #1
 8000f2a:	440b      	add	r3, r1
 8000f2c:	0899      	lsrs	r1, r3, #2
 8000f2e:	460b      	mov	r3, r1
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	1a5b      	subs	r3, r3, r1
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <setTimeFSM+0x294>)
 8000f3e:	701a      	strb	r2, [r3, #0]
		break;
 8000f40:	e076      	b.n	8001030 <setTimeFSM+0x254>
	case MODIFY_DATE_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <setTimeFSM+0x270>)
 8000f44:	8b1b      	ldrh	r3, [r3, #24]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d90a      	bls.n	8000f60 <setTimeFSM+0x184>
			// Save and change state to MONTH
			ds3231_date = date_temp;
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	; (800107c <setTimeFSM+0x2a0>)
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <setTimeFSM+0x2a4>)
 8000f50:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <setTimeFSM+0x270>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_MONTH_STATE;
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <setTimeFSM+0x26c>)
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase date
				date_temp = (date_temp % 31) + 1;
			}
		}
		break;
 8000f5e:	e069      	b.n	8001034 <setTimeFSM+0x258>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <setTimeFSM+0x270>)
 8000f62:	88db      	ldrh	r3, [r3, #6]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d965      	bls.n	8001034 <setTimeFSM+0x258>
				date_temp = (date_temp % 31) + 1;
 8000f68:	4b44      	ldr	r3, [pc, #272]	; (800107c <setTimeFSM+0x2a0>)
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	4b45      	ldr	r3, [pc, #276]	; (8001084 <setTimeFSM+0x2a8>)
 8000f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f72:	1ad1      	subs	r1, r2, r3
 8000f74:	0849      	lsrs	r1, r1, #1
 8000f76:	440b      	add	r3, r1
 8000f78:	0919      	lsrs	r1, r3, #4
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	1a5b      	subs	r3, r3, r1
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b3c      	ldr	r3, [pc, #240]	; (800107c <setTimeFSM+0x2a0>)
 8000f8a:	701a      	strb	r2, [r3, #0]
		break;
 8000f8c:	e052      	b.n	8001034 <setTimeFSM+0x258>
	case MODIFY_MONTH_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <setTimeFSM+0x270>)
 8000f90:	8b1b      	ldrh	r3, [r3, #24]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d90a      	bls.n	8000fac <setTimeFSM+0x1d0>
			// Save and change state to YEAR
			ds3231_month = month_temp;
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <setTimeFSM+0x2ac>)
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <setTimeFSM+0x2b0>)
 8000f9c:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <setTimeFSM+0x270>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_YEAR_STATE;
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <setTimeFSM+0x26c>)
 8000fa6:	2206      	movs	r2, #6
 8000fa8:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase month
				month_temp = (month_temp % 12) + 1;
			}
		}
		break;
 8000faa:	e045      	b.n	8001038 <setTimeFSM+0x25c>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <setTimeFSM+0x270>)
 8000fae:	88db      	ldrh	r3, [r3, #6]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d941      	bls.n	8001038 <setTimeFSM+0x25c>
				month_temp = (month_temp % 12) + 1;
 8000fb4:	4b34      	ldr	r3, [pc, #208]	; (8001088 <setTimeFSM+0x2ac>)
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <setTimeFSM+0x2b4>)
 8000fba:	fba3 1302 	umull	r1, r3, r3, r2
 8000fbe:	08d9      	lsrs	r1, r3, #3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	440b      	add	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <setTimeFSM+0x2ac>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		break;
 8000fd4:	e030      	b.n	8001038 <setTimeFSM+0x25c>
	case MODIFY_YEAR_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <setTimeFSM+0x270>)
 8000fd8:	8b1b      	ldrh	r3, [r3, #24]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d90a      	bls.n	8000ff4 <setTimeFSM+0x218>
			// Save and change state to SECOND
			ds3231_year = year_temp;
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <setTimeFSM+0x2b8>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <setTimeFSM+0x2bc>)
 8000fe4:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <setTimeFSM+0x270>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_SEC_STATE;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <setTimeFSM+0x26c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase year
				year_temp = (year_temp % 99) + 1;
			}
		}
		break;
 8000ff2:	e023      	b.n	800103c <setTimeFSM+0x260>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <setTimeFSM+0x270>)
 8000ff6:	88db      	ldrh	r3, [r3, #6]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d91f      	bls.n	800103c <setTimeFSM+0x260>
				year_temp = (year_temp % 99) + 1;
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <setTimeFSM+0x2b8>)
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <setTimeFSM+0x2c0>)
 8001002:	fba3 1302 	umull	r1, r3, r3, r2
 8001006:	0999      	lsrs	r1, r3, #6
 8001008:	460b      	mov	r3, r1
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	440b      	add	r3, r1
 800100e:	0159      	lsls	r1, r3, #5
 8001010:	440b      	add	r3, r1
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3301      	adds	r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <setTimeFSM+0x2b8>)
 800101c:	701a      	strb	r2, [r3, #0]
		break;
 800101e:	e00d      	b.n	800103c <setTimeFSM+0x260>
	
	default:
		break;
 8001020:	bf00      	nop
 8001022:	e00c      	b.n	800103e <setTimeFSM+0x262>
		break;
 8001024:	bf00      	nop
 8001026:	e00a      	b.n	800103e <setTimeFSM+0x262>
		break;
 8001028:	bf00      	nop
 800102a:	e008      	b.n	800103e <setTimeFSM+0x262>
		break;
 800102c:	bf00      	nop
 800102e:	e006      	b.n	800103e <setTimeFSM+0x262>
		break;
 8001030:	bf00      	nop
 8001032:	e004      	b.n	800103e <setTimeFSM+0x262>
		break;
 8001034:	bf00      	nop
 8001036:	e002      	b.n	800103e <setTimeFSM+0x262>
		break;
 8001038:	bf00      	nop
 800103a:	e000      	b.n	800103e <setTimeFSM+0x262>
		break;
 800103c:	bf00      	nop
	}
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	200001b9 	.word	0x200001b9
 800104c:	20000190 	.word	0x20000190
 8001050:	200001bd 	.word	0x200001bd
 8001054:	200001c8 	.word	0x200001c8
 8001058:	88888889 	.word	0x88888889
 800105c:	200001be 	.word	0x200001be
 8001060:	200001ca 	.word	0x200001ca
 8001064:	200001ba 	.word	0x200001ba
 8001068:	200001cd 	.word	0x200001cd
 800106c:	2aaaaaab 	.word	0x2aaaaaab
 8001070:	200001c0 	.word	0x200001c0
 8001074:	200001cc 	.word	0x200001cc
 8001078:	24924925 	.word	0x24924925
 800107c:	200001c5 	.word	0x200001c5
 8001080:	200001cb 	.word	0x200001cb
 8001084:	08421085 	.word	0x08421085
 8001088:	200001b8 	.word	0x200001b8
 800108c:	200001ce 	.word	0x200001ce
 8001090:	aaaaaaab 	.word	0xaaaaaaab
 8001094:	200001b1 	.word	0x200001b1
 8001098:	200001c9 	.word	0x200001c9
 800109c:	a57eb503 	.word	0xa57eb503

080010a0 <setAlarmFSM>:
/**
 * @brief Finite state machine for setting alarm
 * 
 */
void setAlarmFSM()
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	switch (alarm_mode)
 80010a4:	4b99      	ldr	r3, [pc, #612]	; (800130c <setAlarmFSM+0x26c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	f200 811b 	bhi.w	80012e4 <setAlarmFSM+0x244>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <setAlarmFSM+0x14>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	080010d1 	.word	0x080010d1
 80010b8:	0800111f 	.word	0x0800111f
 80010bc:	0800116d 	.word	0x0800116d
 80010c0:	080011b9 	.word	0x080011b9
 80010c4:	08001207 	.word	0x08001207
 80010c8:	08001253 	.word	0x08001253
 80010cc:	0800129b 	.word	0x0800129b
	{
	case MODIFY_SEC_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 80010d0:	4b8f      	ldr	r3, [pc, #572]	; (8001310 <setAlarmFSM+0x270>)
 80010d2:	8b1b      	ldrh	r3, [r3, #24]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d90a      	bls.n	80010ee <setAlarmFSM+0x4e>
			// Save and change state to MINUTE
			sec_alarm = sec_temp;
 80010d8:	4b8e      	ldr	r3, [pc, #568]	; (8001314 <setAlarmFSM+0x274>)
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	4b8e      	ldr	r3, [pc, #568]	; (8001318 <setAlarmFSM+0x278>)
 80010de:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 80010e0:	4b8b      	ldr	r3, [pc, #556]	; (8001310 <setAlarmFSM+0x270>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_MIN_STATE;
 80010e6:	4b8d      	ldr	r3, [pc, #564]	; (800131c <setAlarmFSM+0x27c>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase second
				sec_temp = (sec_temp + 1) % 60;
			}
		}
		break;
 80010ec:	e0fc      	b.n	80012e8 <setAlarmFSM+0x248>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 80010ee:	4b88      	ldr	r3, [pc, #544]	; (8001310 <setAlarmFSM+0x270>)
 80010f0:	88db      	ldrh	r3, [r3, #6]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	f240 80f8 	bls.w	80012e8 <setAlarmFSM+0x248>
				sec_temp = (sec_temp + 1) % 60;
 80010f8:	4b86      	ldr	r3, [pc, #536]	; (8001314 <setAlarmFSM+0x274>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	4b88      	ldr	r3, [pc, #544]	; (8001320 <setAlarmFSM+0x280>)
 8001100:	fb83 1302 	smull	r1, r3, r3, r2
 8001104:	4413      	add	r3, r2
 8001106:	1159      	asrs	r1, r3, #5
 8001108:	17d3      	asrs	r3, r2, #31
 800110a:	1ac9      	subs	r1, r1, r3
 800110c:	460b      	mov	r3, r1
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	1a5b      	subs	r3, r3, r1
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	1ad1      	subs	r1, r2, r3
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	4b7e      	ldr	r3, [pc, #504]	; (8001314 <setAlarmFSM+0x274>)
 800111a:	701a      	strb	r2, [r3, #0]
		break;
 800111c:	e0e4      	b.n	80012e8 <setAlarmFSM+0x248>
	case MODIFY_MIN_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 800111e:	4b7c      	ldr	r3, [pc, #496]	; (8001310 <setAlarmFSM+0x270>)
 8001120:	8b1b      	ldrh	r3, [r3, #24]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d90a      	bls.n	800113c <setAlarmFSM+0x9c>
			// Save and change state to HOURS
			min_alarm = min_temp;
 8001126:	4b7f      	ldr	r3, [pc, #508]	; (8001324 <setAlarmFSM+0x284>)
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	4b7f      	ldr	r3, [pc, #508]	; (8001328 <setAlarmFSM+0x288>)
 800112c:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 800112e:	4b78      	ldr	r3, [pc, #480]	; (8001310 <setAlarmFSM+0x270>)
 8001130:	2200      	movs	r2, #0
 8001132:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_HOUR_STATE;
 8001134:	4b79      	ldr	r3, [pc, #484]	; (800131c <setAlarmFSM+0x27c>)
 8001136:	2202      	movs	r2, #2
 8001138:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase minute
				min_temp = (min_temp + 1) % 60;
			}
		}
		break;
 800113a:	e0d7      	b.n	80012ec <setAlarmFSM+0x24c>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 800113c:	4b74      	ldr	r3, [pc, #464]	; (8001310 <setAlarmFSM+0x270>)
 800113e:	88db      	ldrh	r3, [r3, #6]
 8001140:	2b02      	cmp	r3, #2
 8001142:	f240 80d3 	bls.w	80012ec <setAlarmFSM+0x24c>
				min_temp = (min_temp + 1) % 60;
 8001146:	4b77      	ldr	r3, [pc, #476]	; (8001324 <setAlarmFSM+0x284>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	4b74      	ldr	r3, [pc, #464]	; (8001320 <setAlarmFSM+0x280>)
 800114e:	fb83 1302 	smull	r1, r3, r3, r2
 8001152:	4413      	add	r3, r2
 8001154:	1159      	asrs	r1, r3, #5
 8001156:	17d3      	asrs	r3, r2, #31
 8001158:	1ac9      	subs	r1, r1, r3
 800115a:	460b      	mov	r3, r1
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	1a5b      	subs	r3, r3, r1
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	1ad1      	subs	r1, r2, r3
 8001164:	b2ca      	uxtb	r2, r1
 8001166:	4b6f      	ldr	r3, [pc, #444]	; (8001324 <setAlarmFSM+0x284>)
 8001168:	701a      	strb	r2, [r3, #0]
		break;
 800116a:	e0bf      	b.n	80012ec <setAlarmFSM+0x24c>
	case MODIFY_HOUR_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 800116c:	4b68      	ldr	r3, [pc, #416]	; (8001310 <setAlarmFSM+0x270>)
 800116e:	8b1b      	ldrh	r3, [r3, #24]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d90a      	bls.n	800118a <setAlarmFSM+0xea>
			// Save and change state to DAY
			hours_alarm = hours_temp;
 8001174:	4b6d      	ldr	r3, [pc, #436]	; (800132c <setAlarmFSM+0x28c>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <setAlarmFSM+0x290>)
 800117a:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 800117c:	4b64      	ldr	r3, [pc, #400]	; (8001310 <setAlarmFSM+0x270>)
 800117e:	2200      	movs	r2, #0
 8001180:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_DAY_STATE;
 8001182:	4b66      	ldr	r3, [pc, #408]	; (800131c <setAlarmFSM+0x27c>)
 8001184:	2203      	movs	r2, #3
 8001186:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase minute
				hours_temp = (hours_temp + 1) % 24;
			}
		}
		break;
 8001188:	e0b2      	b.n	80012f0 <setAlarmFSM+0x250>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 800118a:	4b61      	ldr	r3, [pc, #388]	; (8001310 <setAlarmFSM+0x270>)
 800118c:	88db      	ldrh	r3, [r3, #6]
 800118e:	2b02      	cmp	r3, #2
 8001190:	f240 80ae 	bls.w	80012f0 <setAlarmFSM+0x250>
				hours_temp = (hours_temp + 1) % 24;
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <setAlarmFSM+0x28c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	4b66      	ldr	r3, [pc, #408]	; (8001334 <setAlarmFSM+0x294>)
 800119c:	fb83 1302 	smull	r1, r3, r3, r2
 80011a0:	1099      	asrs	r1, r3, #2
 80011a2:	17d3      	asrs	r3, r2, #31
 80011a4:	1ac9      	subs	r1, r1, r3
 80011a6:	460b      	mov	r3, r1
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	440b      	add	r3, r1
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	1ad1      	subs	r1, r2, r3
 80011b0:	b2ca      	uxtb	r2, r1
 80011b2:	4b5e      	ldr	r3, [pc, #376]	; (800132c <setAlarmFSM+0x28c>)
 80011b4:	701a      	strb	r2, [r3, #0]
		break;
 80011b6:	e09b      	b.n	80012f0 <setAlarmFSM+0x250>
	case MODIFY_DAY_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 80011b8:	4b55      	ldr	r3, [pc, #340]	; (8001310 <setAlarmFSM+0x270>)
 80011ba:	8b1b      	ldrh	r3, [r3, #24]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d90a      	bls.n	80011d6 <setAlarmFSM+0x136>
			// Save and change state to DATE
			day_alarm = day_temp;
 80011c0:	4b5d      	ldr	r3, [pc, #372]	; (8001338 <setAlarmFSM+0x298>)
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	4b5d      	ldr	r3, [pc, #372]	; (800133c <setAlarmFSM+0x29c>)
 80011c6:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 80011c8:	4b51      	ldr	r3, [pc, #324]	; (8001310 <setAlarmFSM+0x270>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_DATE_STATE;
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <setAlarmFSM+0x27c>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase day
				day_temp = (day_temp % 7) + 1;
			}
		}
		break;
 80011d4:	e08e      	b.n	80012f4 <setAlarmFSM+0x254>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 80011d6:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <setAlarmFSM+0x270>)
 80011d8:	88db      	ldrh	r3, [r3, #6]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	f240 808a 	bls.w	80012f4 <setAlarmFSM+0x254>
				day_temp = (day_temp % 7) + 1;
 80011e0:	4b55      	ldr	r3, [pc, #340]	; (8001338 <setAlarmFSM+0x298>)
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b56      	ldr	r3, [pc, #344]	; (8001340 <setAlarmFSM+0x2a0>)
 80011e6:	fba3 1302 	umull	r1, r3, r3, r2
 80011ea:	1ad1      	subs	r1, r2, r3
 80011ec:	0849      	lsrs	r1, r1, #1
 80011ee:	440b      	add	r3, r1
 80011f0:	0899      	lsrs	r1, r3, #2
 80011f2:	460b      	mov	r3, r1
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	1a5b      	subs	r3, r3, r1
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	3301      	adds	r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <setAlarmFSM+0x298>)
 8001202:	701a      	strb	r2, [r3, #0]
		break;
 8001204:	e076      	b.n	80012f4 <setAlarmFSM+0x254>
	case MODIFY_DATE_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <setAlarmFSM+0x270>)
 8001208:	8b1b      	ldrh	r3, [r3, #24]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d90a      	bls.n	8001224 <setAlarmFSM+0x184>
			// Save and change state to MONTH
			date_alarm = date_temp;
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <setAlarmFSM+0x2a4>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <setAlarmFSM+0x2a8>)
 8001214:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8001216:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <setAlarmFSM+0x270>)
 8001218:	2200      	movs	r2, #0
 800121a:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_MONTH_STATE;
 800121c:	4b3f      	ldr	r3, [pc, #252]	; (800131c <setAlarmFSM+0x27c>)
 800121e:	2205      	movs	r2, #5
 8001220:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase date
				date_temp = (date_temp % 31) + 1;
			}
		}
		break;
 8001222:	e069      	b.n	80012f8 <setAlarmFSM+0x258>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8001224:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <setAlarmFSM+0x270>)
 8001226:	88db      	ldrh	r3, [r3, #6]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d965      	bls.n	80012f8 <setAlarmFSM+0x258>
				date_temp = (date_temp % 31) + 1;
 800122c:	4b45      	ldr	r3, [pc, #276]	; (8001344 <setAlarmFSM+0x2a4>)
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b46      	ldr	r3, [pc, #280]	; (800134c <setAlarmFSM+0x2ac>)
 8001232:	fba3 1302 	umull	r1, r3, r3, r2
 8001236:	1ad1      	subs	r1, r2, r3
 8001238:	0849      	lsrs	r1, r1, #1
 800123a:	440b      	add	r3, r1
 800123c:	0919      	lsrs	r1, r3, #4
 800123e:	460b      	mov	r3, r1
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	1a5b      	subs	r3, r3, r1
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <setAlarmFSM+0x2a4>)
 800124e:	701a      	strb	r2, [r3, #0]
		break;
 8001250:	e052      	b.n	80012f8 <setAlarmFSM+0x258>
	case MODIFY_MONTH_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 8001252:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <setAlarmFSM+0x270>)
 8001254:	8b1b      	ldrh	r3, [r3, #24]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d90a      	bls.n	8001270 <setAlarmFSM+0x1d0>
			// Save and change state to YEAR
			month_alarm = month_temp;
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <setAlarmFSM+0x2b0>)
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <setAlarmFSM+0x2b4>)
 8001260:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <setAlarmFSM+0x270>)
 8001264:	2200      	movs	r2, #0
 8001266:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_YEAR_STATE;
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <setAlarmFSM+0x27c>)
 800126a:	2206      	movs	r2, #6
 800126c:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase month
				month_temp = (month_temp % 12) + 1;
			}
		}
		break;
 800126e:	e045      	b.n	80012fc <setAlarmFSM+0x25c>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <setAlarmFSM+0x270>)
 8001272:	88db      	ldrh	r3, [r3, #6]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d941      	bls.n	80012fc <setAlarmFSM+0x25c>
				month_temp = (month_temp % 12) + 1;
 8001278:	4b35      	ldr	r3, [pc, #212]	; (8001350 <setAlarmFSM+0x2b0>)
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	4b36      	ldr	r3, [pc, #216]	; (8001358 <setAlarmFSM+0x2b8>)
 800127e:	fba3 1302 	umull	r1, r3, r3, r2
 8001282:	08d9      	lsrs	r1, r3, #3
 8001284:	460b      	mov	r3, r1
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	440b      	add	r3, r1
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <setAlarmFSM+0x2b0>)
 8001296:	701a      	strb	r2, [r3, #0]
		break;
 8001298:	e030      	b.n	80012fc <setAlarmFSM+0x25c>
	case MODIFY_YEAR_STATE:
		if (button_count[12] >= BUTTON_COUNT_PRESS) {
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <setAlarmFSM+0x270>)
 800129c:	8b1b      	ldrh	r3, [r3, #24]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d90a      	bls.n	80012b8 <setAlarmFSM+0x218>
			// Save and change state to SECOND
			year_alarm = year_temp;
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <setAlarmFSM+0x2bc>)
 80012a4:	781a      	ldrb	r2, [r3, #0]
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <setAlarmFSM+0x2c0>)
 80012a8:	701a      	strb	r2, [r3, #0]
			button_count[12] = 0;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <setAlarmFSM+0x270>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	831a      	strh	r2, [r3, #24]
			set_time_mode = MODIFY_SEC_STATE;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <setAlarmFSM+0x27c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
				// Increase year
				year_temp = (year_temp % 99) + 1;
			}
		}
		break;
 80012b6:	e023      	b.n	8001300 <setAlarmFSM+0x260>
			if (button_count[3] >= BUTTON_COUNT_PRESS) {
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <setAlarmFSM+0x270>)
 80012ba:	88db      	ldrh	r3, [r3, #6]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d91f      	bls.n	8001300 <setAlarmFSM+0x260>
				year_temp = (year_temp % 99) + 1;
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <setAlarmFSM+0x2bc>)
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <setAlarmFSM+0x2c4>)
 80012c6:	fba3 1302 	umull	r1, r3, r3, r2
 80012ca:	0999      	lsrs	r1, r3, #6
 80012cc:	460b      	mov	r3, r1
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	440b      	add	r3, r1
 80012d2:	0159      	lsls	r1, r3, #5
 80012d4:	440b      	add	r3, r1
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <setAlarmFSM+0x2bc>)
 80012e0:	701a      	strb	r2, [r3, #0]
		break;
 80012e2:	e00d      	b.n	8001300 <setAlarmFSM+0x260>
	
	default:
		break;
 80012e4:	bf00      	nop
 80012e6:	e00c      	b.n	8001302 <setAlarmFSM+0x262>
		break;
 80012e8:	bf00      	nop
 80012ea:	e00a      	b.n	8001302 <setAlarmFSM+0x262>
		break;
 80012ec:	bf00      	nop
 80012ee:	e008      	b.n	8001302 <setAlarmFSM+0x262>
		break;
 80012f0:	bf00      	nop
 80012f2:	e006      	b.n	8001302 <setAlarmFSM+0x262>
		break;
 80012f4:	bf00      	nop
 80012f6:	e004      	b.n	8001302 <setAlarmFSM+0x262>
		break;
 80012f8:	bf00      	nop
 80012fa:	e002      	b.n	8001302 <setAlarmFSM+0x262>
		break;
 80012fc:	bf00      	nop
 80012fe:	e000      	b.n	8001302 <setAlarmFSM+0x262>
		break;
 8001300:	bf00      	nop
	}
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	200001b5 	.word	0x200001b5
 8001310:	20000190 	.word	0x20000190
 8001314:	200001bd 	.word	0x200001bd
 8001318:	200001c2 	.word	0x200001c2
 800131c:	200001b9 	.word	0x200001b9
 8001320:	88888889 	.word	0x88888889
 8001324:	200001be 	.word	0x200001be
 8001328:	200001bc 	.word	0x200001bc
 800132c:	200001ba 	.word	0x200001ba
 8001330:	200001b0 	.word	0x200001b0
 8001334:	2aaaaaab 	.word	0x2aaaaaab
 8001338:	200001c0 	.word	0x200001c0
 800133c:	200001c3 	.word	0x200001c3
 8001340:	24924925 	.word	0x24924925
 8001344:	200001c5 	.word	0x200001c5
 8001348:	200001bb 	.word	0x200001bb
 800134c:	08421085 	.word	0x08421085
 8001350:	200001b8 	.word	0x200001b8
 8001354:	200001b2 	.word	0x200001b2
 8001358:	aaaaaaab 	.word	0xaaaaaaab
 800135c:	200001b1 	.word	0x200001b1
 8001360:	200001c1 	.word	0x200001c1
 8001364:	a57eb503 	.word	0xa57eb503

08001368 <blinkTimeFSM>:
/**
 * @brief Finite State Machine for blinking time in setting time mode
 * 
 */
void blinkTimeFSM()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af04      	add	r7, sp, #16
	if (clock_mode == SET_TIME_MODE || clock_mode == ALARM_MODE) {
 800136e:	4b92      	ldr	r3, [pc, #584]	; (80015b8 <blinkTimeFSM+0x250>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d004      	beq.n	8001380 <blinkTimeFSM+0x18>
 8001376:	4b90      	ldr	r3, [pc, #576]	; (80015b8 <blinkTimeFSM+0x250>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b02      	cmp	r3, #2
 800137c:	f040 8117 	bne.w	80015ae <blinkTimeFSM+0x246>
		switch (blink_mode) {
 8001380:	4b8e      	ldr	r3, [pc, #568]	; (80015bc <blinkTimeFSM+0x254>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <blinkTimeFSM+0x28>
 8001388:	2b01      	cmp	r3, #1
 800138a:	f000 8085 	beq.w	8001498 <blinkTimeFSM+0x130>
				break;
			}
			blink_mode = TURN_OFF;
			break;
		default:
			break;
 800138e:	e10f      	b.n	80015b0 <blinkTimeFSM+0x248>
			switch (set_time_mode) {
 8001390:	4b8b      	ldr	r3, [pc, #556]	; (80015c0 <blinkTimeFSM+0x258>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b06      	cmp	r3, #6
 8001396:	d87a      	bhi.n	800148e <blinkTimeFSM+0x126>
 8001398:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <blinkTimeFSM+0x38>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	080013bd 	.word	0x080013bd
 80013a4:	080013db 	.word	0x080013db
 80013a8:	080013f9 	.word	0x080013f9
 80013ac:	08001417 	.word	0x08001417
 80013b0:	08001435 	.word	0x08001435
 80013b4:	08001453 	.word	0x08001453
 80013b8:	08001471 	.word	0x08001471
				lcd_ShowIntNum(150, 190, sec_temp, 2, BLACK, BLACK, 24);
 80013bc:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <blinkTimeFSM+0x25c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	2318      	movs	r3, #24
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2302      	movs	r3, #2
 80013d0:	21be      	movs	r1, #190	; 0xbe
 80013d2:	2096      	movs	r0, #150	; 0x96
 80013d4:	f001 f99a 	bl	800270c <lcd_ShowIntNum>
				break;
 80013d8:	e05a      	b.n	8001490 <blinkTimeFSM+0x128>
				lcd_ShowIntNum(100, 190, min_temp, 2, BLACK, BLACK, 24);
 80013da:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <blinkTimeFSM+0x260>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	2318      	movs	r3, #24
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2300      	movs	r3, #0
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2300      	movs	r3, #0
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2302      	movs	r3, #2
 80013ee:	21be      	movs	r1, #190	; 0xbe
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f001 f98b 	bl	800270c <lcd_ShowIntNum>
				break;
 80013f6:	e04b      	b.n	8001490 <blinkTimeFSM+0x128>
				lcd_ShowIntNum(50, 190, hours_temp, 2, BLACK, BLACK, 24);
 80013f8:	4b74      	ldr	r3, [pc, #464]	; (80015cc <blinkTimeFSM+0x264>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	2318      	movs	r3, #24
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2300      	movs	r3, #0
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2302      	movs	r3, #2
 800140c:	21be      	movs	r1, #190	; 0xbe
 800140e:	2032      	movs	r0, #50	; 0x32
 8001410:	f001 f97c 	bl	800270c <lcd_ShowIntNum>
				break;
 8001414:	e03c      	b.n	8001490 <blinkTimeFSM+0x128>
				lcd_ShowIntNum(10, 100, day_temp, 2, BLACK, BLACK, 24);
 8001416:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <blinkTimeFSM+0x268>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b29a      	uxth	r2, r3
 800141c:	2318      	movs	r3, #24
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2300      	movs	r3, #0
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	2300      	movs	r3, #0
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2302      	movs	r3, #2
 800142a:	2164      	movs	r1, #100	; 0x64
 800142c:	200a      	movs	r0, #10
 800142e:	f001 f96d 	bl	800270c <lcd_ShowIntNum>
				break;
 8001432:	e02d      	b.n	8001490 <blinkTimeFSM+0x128>
				lcd_ShowIntNum(60, 100, date_temp, 2, BLACK, BLACK, 24);
 8001434:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <blinkTimeFSM+0x26c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b29a      	uxth	r2, r3
 800143a:	2318      	movs	r3, #24
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2300      	movs	r3, #0
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2302      	movs	r3, #2
 8001448:	2164      	movs	r1, #100	; 0x64
 800144a:	203c      	movs	r0, #60	; 0x3c
 800144c:	f001 f95e 	bl	800270c <lcd_ShowIntNum>
				break;
 8001450:	e01e      	b.n	8001490 <blinkTimeFSM+0x128>
				lcd_ShowIntNum(120, 100, month_temp, 2, BLACK, BLACK, 24);
 8001452:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <blinkTimeFSM+0x270>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29a      	uxth	r2, r3
 8001458:	2318      	movs	r3, #24
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	2300      	movs	r3, #0
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2302      	movs	r3, #2
 8001466:	2164      	movs	r1, #100	; 0x64
 8001468:	2078      	movs	r0, #120	; 0x78
 800146a:	f001 f94f 	bl	800270c <lcd_ShowIntNum>
				break;
 800146e:	e00f      	b.n	8001490 <blinkTimeFSM+0x128>
				lcd_ShowIntNum(180, 100, year_temp, 2, BLACK, BLACK, 24);
 8001470:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <blinkTimeFSM+0x274>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b29a      	uxth	r2, r3
 8001476:	2318      	movs	r3, #24
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2300      	movs	r3, #0
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	2300      	movs	r3, #0
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2302      	movs	r3, #2
 8001484:	2164      	movs	r1, #100	; 0x64
 8001486:	20b4      	movs	r0, #180	; 0xb4
 8001488:	f001 f940 	bl	800270c <lcd_ShowIntNum>
				break;
 800148c:	e000      	b.n	8001490 <blinkTimeFSM+0x128>
				break;
 800148e:	bf00      	nop
			blink_mode = TURN_ON;
 8001490:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <blinkTimeFSM+0x254>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
			break;
 8001496:	e08b      	b.n	80015b0 <blinkTimeFSM+0x248>
			switch (set_time_mode) {
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <blinkTimeFSM+0x258>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b06      	cmp	r3, #6
 800149e:	f200 8081 	bhi.w	80015a4 <blinkTimeFSM+0x23c>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <blinkTimeFSM+0x140>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014c5 	.word	0x080014c5
 80014ac:	080014e5 	.word	0x080014e5
 80014b0:	08001505 	.word	0x08001505
 80014b4:	08001525 	.word	0x08001525
 80014b8:	08001545 	.word	0x08001545
 80014bc:	08001565 	.word	0x08001565
 80014c0:	08001585 	.word	0x08001585
				lcd_ShowIntNum(150, 190, sec_temp, 2, GREEN, BLACK, 24);
 80014c4:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <blinkTimeFSM+0x25c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	2318      	movs	r3, #24
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2302      	movs	r3, #2
 80014da:	21be      	movs	r1, #190	; 0xbe
 80014dc:	2096      	movs	r0, #150	; 0x96
 80014de:	f001 f915 	bl	800270c <lcd_ShowIntNum>
				break;
 80014e2:	e060      	b.n	80015a6 <blinkTimeFSM+0x23e>
				lcd_ShowIntNum(100, 190, min_temp, 2, GREEN, BLACK, 24);
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <blinkTimeFSM+0x260>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	2318      	movs	r3, #24
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2300      	movs	r3, #0
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2302      	movs	r3, #2
 80014fa:	21be      	movs	r1, #190	; 0xbe
 80014fc:	2064      	movs	r0, #100	; 0x64
 80014fe:	f001 f905 	bl	800270c <lcd_ShowIntNum>
				break;
 8001502:	e050      	b.n	80015a6 <blinkTimeFSM+0x23e>
				lcd_ShowIntNum(50, 190, hours_temp, 2, GREEN, BLACK, 24);
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <blinkTimeFSM+0x264>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b29a      	uxth	r2, r3
 800150a:	2318      	movs	r3, #24
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	2300      	movs	r3, #0
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2302      	movs	r3, #2
 800151a:	21be      	movs	r1, #190	; 0xbe
 800151c:	2032      	movs	r0, #50	; 0x32
 800151e:	f001 f8f5 	bl	800270c <lcd_ShowIntNum>
				break;
 8001522:	e040      	b.n	80015a6 <blinkTimeFSM+0x23e>
				lcd_ShowIntNum(10, 100, day_temp, 2, YELLOW, BLACK, 24);
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <blinkTimeFSM+0x268>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b29a      	uxth	r2, r3
 800152a:	2318      	movs	r3, #24
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	2300      	movs	r3, #0
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2302      	movs	r3, #2
 800153a:	2164      	movs	r1, #100	; 0x64
 800153c:	200a      	movs	r0, #10
 800153e:	f001 f8e5 	bl	800270c <lcd_ShowIntNum>
				break;
 8001542:	e030      	b.n	80015a6 <blinkTimeFSM+0x23e>
				lcd_ShowIntNum(60, 100, date_temp, 2, YELLOW, BLACK, 24);
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <blinkTimeFSM+0x26c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b29a      	uxth	r2, r3
 800154a:	2318      	movs	r3, #24
 800154c:	9302      	str	r3, [sp, #8]
 800154e:	2300      	movs	r3, #0
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2302      	movs	r3, #2
 800155a:	2164      	movs	r1, #100	; 0x64
 800155c:	203c      	movs	r0, #60	; 0x3c
 800155e:	f001 f8d5 	bl	800270c <lcd_ShowIntNum>
				break;
 8001562:	e020      	b.n	80015a6 <blinkTimeFSM+0x23e>
				lcd_ShowIntNum(120, 100, month_temp, 2, YELLOW, BLACK, 24);
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <blinkTimeFSM+0x270>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b29a      	uxth	r2, r3
 800156a:	2318      	movs	r3, #24
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2302      	movs	r3, #2
 800157a:	2164      	movs	r1, #100	; 0x64
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f001 f8c5 	bl	800270c <lcd_ShowIntNum>
				break;
 8001582:	e010      	b.n	80015a6 <blinkTimeFSM+0x23e>
				lcd_ShowIntNum(180, 100, year_temp, 2, YELLOW, BLACK, 24);
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <blinkTimeFSM+0x274>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b29a      	uxth	r2, r3
 800158a:	2318      	movs	r3, #24
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2302      	movs	r3, #2
 800159a:	2164      	movs	r1, #100	; 0x64
 800159c:	20b4      	movs	r0, #180	; 0xb4
 800159e:	f001 f8b5 	bl	800270c <lcd_ShowIntNum>
				break;
 80015a2:	e000      	b.n	80015a6 <blinkTimeFSM+0x23e>
				break;
 80015a4:	bf00      	nop
			blink_mode = TURN_OFF;
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <blinkTimeFSM+0x254>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
			break;
 80015ac:	e000      	b.n	80015b0 <blinkTimeFSM+0x248>
		}
	} 
 80015ae:	bf00      	nop
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200001b3 	.word	0x200001b3
 80015bc:	200001b4 	.word	0x200001b4
 80015c0:	200001b9 	.word	0x200001b9
 80015c4:	200001bd 	.word	0x200001bd
 80015c8:	200001be 	.word	0x200001be
 80015cc:	200001ba 	.word	0x200001ba
 80015d0:	200001c0 	.word	0x200001c0
 80015d4:	200001c5 	.word	0x200001c5
 80015d8:	200001b8 	.word	0x200001b8
 80015dc:	200001b1 	.word	0x200001b1

080015e0 <updateTimeViaUartFSM>:
/**
 * @brief Finite State Machine for Updating Time Via UART 
 * 
 */
void updateTimeViaUartFSM()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b09e      	sub	sp, #120	; 0x78
 80015e4:	af04      	add	r7, sp, #16
	if (update_time_mode != UPDATE_FAIL) {
 80015e6:	4bad      	ldr	r3, [pc, #692]	; (800189c <updateTimeViaUartFSM+0x2bc>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b07      	cmp	r3, #7
 80015ec:	d023      	beq.n	8001636 <updateTimeViaUartFSM+0x56>
		// Check timeout for update time
		if (counter_update == 0) {
 80015ee:	4bac      	ldr	r3, [pc, #688]	; (80018a0 <updateTimeViaUartFSM+0x2c0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10a      	bne.n	800160c <updateTimeViaUartFSM+0x2c>
			timeout_update = 1 * 1000 / PERIOD;		// Display error message within 1 sec
 80015f6:	4bab      	ldr	r3, [pc, #684]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	701a      	strb	r2, [r3, #0]
			update_time_mode = UPDATE_FAIL;
 80015fc:	4ba7      	ldr	r3, [pc, #668]	; (800189c <updateTimeViaUartFSM+0x2bc>)
 80015fe:	2207      	movs	r2, #7
 8001600:	701a      	strb	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001602:	2000      	movs	r0, #0
 8001604:	f000 ff4c 	bl	80024a0 <lcd_Clear>
			return;
 8001608:	f000 bc3f 	b.w	8001e8a <updateTimeViaUartFSM+0x8aa>
		}
		if (timeout_update > 0) {
 800160c:	4ba5      	ldr	r3, [pc, #660]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <updateTimeViaUartFSM+0x42>
			timeout_update--;
 8001614:	4ba3      	ldr	r3, [pc, #652]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	3b01      	subs	r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4ba1      	ldr	r3, [pc, #644]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	e01a      	b.n	8001658 <updateTimeViaUartFSM+0x78>
		} else {
			counter_update--;
 8001622:	4b9f      	ldr	r3, [pc, #636]	; (80018a0 <updateTimeViaUartFSM+0x2c0>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3b01      	subs	r3, #1
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b9d      	ldr	r3, [pc, #628]	; (80018a0 <updateTimeViaUartFSM+0x2c0>)
 800162c:	701a      	strb	r2, [r3, #0]
			timeout_update = 1000 * TIMEOUT / PERIOD;
 800162e:	4b9d      	ldr	r3, [pc, #628]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 8001630:	2214      	movs	r2, #20
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e010      	b.n	8001658 <updateTimeViaUartFSM+0x78>
		}
	} else {
		// Check timeout for showing error message
		if (timeout_update > 0) {
 8001636:	4b9b      	ldr	r3, [pc, #620]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <updateTimeViaUartFSM+0x6c>
			timeout_update--;
 800163e:	4b99      	ldr	r3, [pc, #612]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3b01      	subs	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b97      	ldr	r3, [pc, #604]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e005      	b.n	8001658 <updateTimeViaUartFSM+0x78>
		} else {
			timeout_update = TIMEOUT * 1000 / PERIOD;
 800164c:	4b95      	ldr	r3, [pc, #596]	; (80018a4 <updateTimeViaUartFSM+0x2c4>)
 800164e:	2214      	movs	r2, #20
 8001650:	701a      	strb	r2, [r3, #0]
			clock_mode = WATCH_MODE;
 8001652:	4b95      	ldr	r3, [pc, #596]	; (80018a8 <updateTimeViaUartFSM+0x2c8>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
		}
	}
	switch (update_time_mode)
 8001658:	4b90      	ldr	r3, [pc, #576]	; (800189c <updateTimeViaUartFSM+0x2bc>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b07      	cmp	r3, #7
 800165e:	f200 8405 	bhi.w	8001e6c <updateTimeViaUartFSM+0x88c>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <updateTimeViaUartFSM+0x88>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001689 	.word	0x08001689
 800166c:	08001793 	.word	0x08001793
 8001670:	080018d9 	.word	0x080018d9
 8001674:	080019e3 	.word	0x080019e3
 8001678:	08001b01 	.word	0x08001b01
 800167c:	08001c55 	.word	0x08001c55
 8001680:	08001d6f 	.word	0x08001d6f
 8001684:	08001e51 	.word	0x08001e51
	{
	case UPDATE_SEC:
		if (waiting_response) {
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <updateTimeViaUartFSM+0x2cc>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d079      	beq.n	8001784 <updateTimeViaUartFSM+0x1a4>
			if (isMsgStop() == READING_COMPLETE_STATE) {
 8001690:	f7ff f892 	bl	80007b8 <isMsgStop>
 8001694:	4603      	mov	r3, r0
 8001696:	2b02      	cmp	r3, #2
 8001698:	f040 83ea 	bne.w	8001e70 <updateTimeViaUartFSM+0x890>
				uint8_t start = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	77fb      	strb	r3, [r7, #31]
				uint16_t size = getBufSize();
 80016a0:	f7ff f85e 	bl	8000760 <getBufSize>
 80016a4:	4603      	mov	r3, r0
 80016a6:	83bb      	strh	r3, [r7, #28]
				uint8_t *buffer = flushBuffer();
 80016a8:	f7ff f81e 	bl	80006e8 <flushBuffer>
 80016ac:	6278      	str	r0, [r7, #36]	; 0x24

				getMsg(buffer, &size, &start);
 80016ae:	f107 021f 	add.w	r2, r7, #31
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016ba:	f7ff f889 	bl	80007d0 <getMsg>
				if (size > 0) {
 80016be:	8bbb      	ldrh	r3, [r7, #28]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 83d5 	beq.w	8001e70 <updateTimeViaUartFSM+0x890>
					uint8_t *msg = malloc(size * sizeof(uint8_t) + 1);
 80016c6:	8bbb      	ldrh	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 ffec 	bl	80086a8 <malloc>
 80016d0:	4603      	mov	r3, r0
 80016d2:	623b      	str	r3, [r7, #32]
					for (uint16_t i = 0; i < size; ++i) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80016da:	e012      	b.n	8001702 <updateTimeViaUartFSM+0x122>
						msg[i] = buffer[start + i];
 80016dc:	7ffb      	ldrb	r3, [r7, #31]
 80016de:	461a      	mov	r2, r3
 80016e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016e4:	4413      	add	r3, r2
 80016e6:	461a      	mov	r2, r3
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	441a      	add	r2, r3
 80016ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016f0:	6a39      	ldr	r1, [r7, #32]
 80016f2:	440b      	add	r3, r1
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	701a      	strb	r2, [r3, #0]
					for (uint16_t i = 0; i < size; ++i) {
 80016f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016fc:	3301      	adds	r3, #1
 80016fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001702:	8bbb      	ldrh	r3, [r7, #28]
 8001704:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001708:	429a      	cmp	r2, r3
 800170a:	d3e7      	bcc.n	80016dc <updateTimeViaUartFSM+0xfc>
					}
					msg[size] = '\0';
 800170c:	8bbb      	ldrh	r3, [r7, #28]
 800170e:	461a      	mov	r2, r3
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	4413      	add	r3, r2
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]

					// Save second and change state
					ds3231_sec = (uint8_t)atoi((char *)msg) % 60;
 8001718:	6a38      	ldr	r0, [r7, #32]
 800171a:	f006 ff97 	bl	800864c <atoi>
 800171e:	4603      	mov	r3, r0
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <updateTimeViaUartFSM+0x2d0>)
 8001724:	fba3 1302 	umull	r1, r3, r3, r2
 8001728:	0959      	lsrs	r1, r3, #5
 800172a:	460b      	mov	r3, r1
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	1a5b      	subs	r3, r3, r1
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b5f      	ldr	r3, [pc, #380]	; (80018b4 <updateTimeViaUartFSM+0x2d4>)
 8001738:	701a      	strb	r2, [r3, #0]
					update_time_mode = UPDATE_MIN;
 800173a:	4b58      	ldr	r3, [pc, #352]	; (800189c <updateTimeViaUartFSM+0x2bc>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
					waiting_response = 0;
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <updateTimeViaUartFSM+0x2cc>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 feaa 	bl	80024a0 <lcd_Clear>
					lcd_ShowStr(20, 160, (uint8_t *)"Updating Minute...", YELLOW, BLACK, 24, 1);
 800174c:	2301      	movs	r3, #1
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2318      	movs	r3, #24
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800175c:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <updateTimeViaUartFSM+0x2d8>)
 800175e:	21a0      	movs	r1, #160	; 0xa0
 8001760:	2014      	movs	r0, #20
 8001762:	f001 facd 	bl	8002d00 <lcd_ShowStr>

					uart_Rs232SendString((uint8_t *)"second = ");
 8001766:	4855      	ldr	r0, [pc, #340]	; (80018bc <updateTimeViaUartFSM+0x2dc>)
 8001768:	f002 fa22 	bl	8003bb0 <uart_Rs232SendString>
					uart_Rs232SendNum((uint32_t)ds3231_sec);
 800176c:	4b51      	ldr	r3, [pc, #324]	; (80018b4 <updateTimeViaUartFSM+0x2d4>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f002 fa49 	bl	8003c08 <uart_Rs232SendNum>
					uart_Rs232SendString((uint8_t *)"\n");
 8001776:	4852      	ldr	r0, [pc, #328]	; (80018c0 <updateTimeViaUartFSM+0x2e0>)
 8001778:	f002 fa1a 	bl	8003bb0 <uart_Rs232SendString>
					free(msg);
 800177c:	6a38      	ldr	r0, [r7, #32]
 800177e:	f006 ff9b 	bl	80086b8 <free>
			}
		} else {
			uart_Rs232SendString((uint8_t *)"!second#");
			waiting_response = 1;
		}
		break;
 8001782:	e375      	b.n	8001e70 <updateTimeViaUartFSM+0x890>
			uart_Rs232SendString((uint8_t *)"!second#");
 8001784:	484f      	ldr	r0, [pc, #316]	; (80018c4 <updateTimeViaUartFSM+0x2e4>)
 8001786:	f002 fa13 	bl	8003bb0 <uart_Rs232SendString>
			waiting_response = 1;
 800178a:	4b48      	ldr	r3, [pc, #288]	; (80018ac <updateTimeViaUartFSM+0x2cc>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
		break;
 8001790:	e36e      	b.n	8001e70 <updateTimeViaUartFSM+0x890>
	case UPDATE_MIN:
		if (waiting_response) {
 8001792:	4b46      	ldr	r3, [pc, #280]	; (80018ac <updateTimeViaUartFSM+0x2cc>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d079      	beq.n	800188e <updateTimeViaUartFSM+0x2ae>
			if (isMsgStop() == READING_COMPLETE_STATE) {
 800179a:	f7ff f80d 	bl	80007b8 <isMsgStop>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	f040 8367 	bne.w	8001e74 <updateTimeViaUartFSM+0x894>
				uint8_t start = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	76fb      	strb	r3, [r7, #27]
				uint16_t size = getBufSize();
 80017aa:	f7fe ffd9 	bl	8000760 <getBufSize>
 80017ae:	4603      	mov	r3, r0
 80017b0:	833b      	strh	r3, [r7, #24]
				uint8_t *buffer = flushBuffer();
 80017b2:	f7fe ff99 	bl	80006e8 <flushBuffer>
 80017b6:	62f8      	str	r0, [r7, #44]	; 0x2c

				getMsg(buffer, &size, &start);
 80017b8:	f107 021b 	add.w	r2, r7, #27
 80017bc:	f107 0318 	add.w	r3, r7, #24
 80017c0:	4619      	mov	r1, r3
 80017c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017c4:	f7ff f804 	bl	80007d0 <getMsg>
				if (size > 0) {
 80017c8:	8b3b      	ldrh	r3, [r7, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8352 	beq.w	8001e74 <updateTimeViaUartFSM+0x894>
					uint8_t *msg = malloc(size * sizeof(uint8_t) + 1);
 80017d0:	8b3b      	ldrh	r3, [r7, #24]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4618      	mov	r0, r3
 80017d6:	f006 ff67 	bl	80086a8 <malloc>
 80017da:	4603      	mov	r3, r0
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
					for (uint16_t i = 0; i < size; ++i) {
 80017de:	2300      	movs	r3, #0
 80017e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80017e4:	e012      	b.n	800180c <updateTimeViaUartFSM+0x22c>
						msg[i] = buffer[start + i];
 80017e6:	7efb      	ldrb	r3, [r7, #27]
 80017e8:	461a      	mov	r2, r3
 80017ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80017ee:	4413      	add	r3, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	441a      	add	r2, r3
 80017f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80017fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017fc:	440b      	add	r3, r1
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	701a      	strb	r2, [r3, #0]
					for (uint16_t i = 0; i < size; ++i) {
 8001802:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001806:	3301      	adds	r3, #1
 8001808:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001812:	429a      	cmp	r2, r3
 8001814:	d3e7      	bcc.n	80017e6 <updateTimeViaUartFSM+0x206>
					}
					msg[size] = '\0';
 8001816:	8b3b      	ldrh	r3, [r7, #24]
 8001818:	461a      	mov	r2, r3
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181c:	4413      	add	r3, r2
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]

					// Save second and change state
					ds3231_min = (uint8_t)atoi((char *)msg) % 60;
 8001822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001824:	f006 ff12 	bl	800864c <atoi>
 8001828:	4603      	mov	r3, r0
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <updateTimeViaUartFSM+0x2d0>)
 800182e:	fba3 1302 	umull	r1, r3, r3, r2
 8001832:	0959      	lsrs	r1, r3, #5
 8001834:	460b      	mov	r3, r1
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a5b      	subs	r3, r3, r1
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <updateTimeViaUartFSM+0x2e8>)
 8001842:	701a      	strb	r2, [r3, #0]
					update_time_mode = UPDATE_HOURS;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <updateTimeViaUartFSM+0x2bc>)
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
					waiting_response = 0;
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <updateTimeViaUartFSM+0x2cc>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 8001850:	2000      	movs	r0, #0
 8001852:	f000 fe25 	bl	80024a0 <lcd_Clear>
					lcd_ShowStr(20, 160, (uint8_t *)"Updating Hous...", YELLOW, BLACK, 24, 1);
 8001856:	2301      	movs	r3, #1
 8001858:	9302      	str	r3, [sp, #8]
 800185a:	2318      	movs	r3, #24
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	2300      	movs	r3, #0
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001866:	4a19      	ldr	r2, [pc, #100]	; (80018cc <updateTimeViaUartFSM+0x2ec>)
 8001868:	21a0      	movs	r1, #160	; 0xa0
 800186a:	2014      	movs	r0, #20
 800186c:	f001 fa48 	bl	8002d00 <lcd_ShowStr>

					uart_Rs232SendString((uint8_t *)"minute = ");
 8001870:	4817      	ldr	r0, [pc, #92]	; (80018d0 <updateTimeViaUartFSM+0x2f0>)
 8001872:	f002 f99d 	bl	8003bb0 <uart_Rs232SendString>
					uart_Rs232SendNum((uint32_t)ds3231_min);
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <updateTimeViaUartFSM+0x2e8>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f002 f9c4 	bl	8003c08 <uart_Rs232SendNum>
					uart_Rs232SendString((uint8_t *)"\n");
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <updateTimeViaUartFSM+0x2e0>)
 8001882:	f002 f995 	bl	8003bb0 <uart_Rs232SendString>
					free(msg);
 8001886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001888:	f006 ff16 	bl	80086b8 <free>
			}
		} else {
			uart_Rs232SendString((uint8_t *)"!minute#");
			waiting_response = 1;
		}
		break;
 800188c:	e2f2      	b.n	8001e74 <updateTimeViaUartFSM+0x894>
			uart_Rs232SendString((uint8_t *)"!minute#");
 800188e:	4811      	ldr	r0, [pc, #68]	; (80018d4 <updateTimeViaUartFSM+0x2f4>)
 8001890:	f002 f98e 	bl	8003bb0 <uart_Rs232SendString>
			waiting_response = 1;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <updateTimeViaUartFSM+0x2cc>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
		break;
 800189a:	e2eb      	b.n	8001e74 <updateTimeViaUartFSM+0x894>
 800189c:	200001b7 	.word	0x200001b7
 80018a0:	200001b6 	.word	0x200001b6
 80018a4:	200001c6 	.word	0x200001c6
 80018a8:	200001b3 	.word	0x200001b3
 80018ac:	200001c4 	.word	0x200001c4
 80018b0:	88888889 	.word	0x88888889
 80018b4:	200001c8 	.word	0x200001c8
 80018b8:	0800907c 	.word	0x0800907c
 80018bc:	08009090 	.word	0x08009090
 80018c0:	0800909c 	.word	0x0800909c
 80018c4:	080090a0 	.word	0x080090a0
 80018c8:	200001ca 	.word	0x200001ca
 80018cc:	080090ac 	.word	0x080090ac
 80018d0:	080090c0 	.word	0x080090c0
 80018d4:	080090cc 	.word	0x080090cc
	case UPDATE_HOURS:
		if (waiting_response) {
 80018d8:	4b9f      	ldr	r3, [pc, #636]	; (8001b58 <updateTimeViaUartFSM+0x578>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d079      	beq.n	80019d4 <updateTimeViaUartFSM+0x3f4>
			if (isMsgStop() == READING_COMPLETE_STATE) {
 80018e0:	f7fe ff6a 	bl	80007b8 <isMsgStop>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	f040 82c6 	bne.w	8001e78 <updateTimeViaUartFSM+0x898>
				uint8_t start = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	75fb      	strb	r3, [r7, #23]
				uint16_t size = getBufSize();
 80018f0:	f7fe ff36 	bl	8000760 <getBufSize>
 80018f4:	4603      	mov	r3, r0
 80018f6:	82bb      	strh	r3, [r7, #20]
				uint8_t *buffer = flushBuffer();
 80018f8:	f7fe fef6 	bl	80006e8 <flushBuffer>
 80018fc:	6378      	str	r0, [r7, #52]	; 0x34

				getMsg(buffer, &size, &start);
 80018fe:	f107 0217 	add.w	r2, r7, #23
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800190a:	f7fe ff61 	bl	80007d0 <getMsg>
				if (size > 0) {
 800190e:	8abb      	ldrh	r3, [r7, #20]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 82b1 	beq.w	8001e78 <updateTimeViaUartFSM+0x898>
					uint8_t *msg = malloc(size * sizeof(uint8_t) + 1);
 8001916:	8abb      	ldrh	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f006 fec4 	bl	80086a8 <malloc>
 8001920:	4603      	mov	r3, r0
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
					for (uint16_t i = 0; i < size; ++i) {
 8001924:	2300      	movs	r3, #0
 8001926:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800192a:	e012      	b.n	8001952 <updateTimeViaUartFSM+0x372>
						msg[i] = buffer[start + i];
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	461a      	mov	r2, r3
 8001930:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001934:	4413      	add	r3, r2
 8001936:	461a      	mov	r2, r3
 8001938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193a:	441a      	add	r2, r3
 800193c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001942:	440b      	add	r3, r1
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	701a      	strb	r2, [r3, #0]
					for (uint16_t i = 0; i < size; ++i) {
 8001948:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800194c:	3301      	adds	r3, #1
 800194e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001952:	8abb      	ldrh	r3, [r7, #20]
 8001954:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001958:	429a      	cmp	r2, r3
 800195a:	d3e7      	bcc.n	800192c <updateTimeViaUartFSM+0x34c>
					}
					msg[size] = '\0';
 800195c:	8abb      	ldrh	r3, [r7, #20]
 800195e:	461a      	mov	r2, r3
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	4413      	add	r3, r2
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]

					// Save second and change state
					ds3231_hours = (uint8_t)atoi((char *)msg) % 24;
 8001968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800196a:	f006 fe6f 	bl	800864c <atoi>
 800196e:	4603      	mov	r3, r0
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b7a      	ldr	r3, [pc, #488]	; (8001b5c <updateTimeViaUartFSM+0x57c>)
 8001974:	fba3 1302 	umull	r1, r3, r3, r2
 8001978:	0919      	lsrs	r1, r3, #4
 800197a:	460b      	mov	r3, r1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	440b      	add	r3, r1
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b76      	ldr	r3, [pc, #472]	; (8001b60 <updateTimeViaUartFSM+0x580>)
 8001988:	701a      	strb	r2, [r3, #0]
					update_time_mode = UPDATE_DAY;
 800198a:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <updateTimeViaUartFSM+0x584>)
 800198c:	2203      	movs	r2, #3
 800198e:	701a      	strb	r2, [r3, #0]
					waiting_response = 0;
 8001990:	4b71      	ldr	r3, [pc, #452]	; (8001b58 <updateTimeViaUartFSM+0x578>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 fd82 	bl	80024a0 <lcd_Clear>
					lcd_ShowStr(20, 160, (uint8_t *)"Updating Day...", YELLOW, BLACK, 24, 1);
 800199c:	2301      	movs	r3, #1
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	2318      	movs	r3, #24
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019ac:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <updateTimeViaUartFSM+0x588>)
 80019ae:	21a0      	movs	r1, #160	; 0xa0
 80019b0:	2014      	movs	r0, #20
 80019b2:	f001 f9a5 	bl	8002d00 <lcd_ShowStr>

					uart_Rs232SendString((uint8_t *)"hours = ");
 80019b6:	486d      	ldr	r0, [pc, #436]	; (8001b6c <updateTimeViaUartFSM+0x58c>)
 80019b8:	f002 f8fa 	bl	8003bb0 <uart_Rs232SendString>
					uart_Rs232SendNum((uint32_t)ds3231_hours);
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <updateTimeViaUartFSM+0x580>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 f921 	bl	8003c08 <uart_Rs232SendNum>
					uart_Rs232SendString((uint8_t *)"\n");
 80019c6:	486a      	ldr	r0, [pc, #424]	; (8001b70 <updateTimeViaUartFSM+0x590>)
 80019c8:	f002 f8f2 	bl	8003bb0 <uart_Rs232SendString>
					free(msg);
 80019cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019ce:	f006 fe73 	bl	80086b8 <free>
			}
		} else {
			uart_Rs232SendString((uint8_t *)"!hours#");
			waiting_response = 1;
		}
		break;
 80019d2:	e251      	b.n	8001e78 <updateTimeViaUartFSM+0x898>
			uart_Rs232SendString((uint8_t *)"!hours#");
 80019d4:	4867      	ldr	r0, [pc, #412]	; (8001b74 <updateTimeViaUartFSM+0x594>)
 80019d6:	f002 f8eb 	bl	8003bb0 <uart_Rs232SendString>
			waiting_response = 1;
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <updateTimeViaUartFSM+0x578>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
		break;
 80019e0:	e24a      	b.n	8001e78 <updateTimeViaUartFSM+0x898>
	case UPDATE_DAY:
		if (waiting_response) {
 80019e2:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <updateTimeViaUartFSM+0x578>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8083 	beq.w	8001af2 <updateTimeViaUartFSM+0x512>
			if (isMsgStop() == READING_COMPLETE_STATE) {
 80019ec:	f7fe fee4 	bl	80007b8 <isMsgStop>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	f040 8242 	bne.w	8001e7c <updateTimeViaUartFSM+0x89c>
				uint8_t start = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	74fb      	strb	r3, [r7, #19]
				uint16_t size = getBufSize();
 80019fc:	f7fe feb0 	bl	8000760 <getBufSize>
 8001a00:	4603      	mov	r3, r0
 8001a02:	823b      	strh	r3, [r7, #16]
				uint8_t *buffer = flushBuffer();
 8001a04:	f7fe fe70 	bl	80006e8 <flushBuffer>
 8001a08:	63f8      	str	r0, [r7, #60]	; 0x3c

				getMsg(buffer, &size, &start);
 8001a0a:	f107 0213 	add.w	r2, r7, #19
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a16:	f7fe fedb 	bl	80007d0 <getMsg>
				if (size > 0) {
 8001a1a:	8a3b      	ldrh	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 822d 	beq.w	8001e7c <updateTimeViaUartFSM+0x89c>
					uint8_t *msg = malloc(size * sizeof(uint8_t) + 1);
 8001a22:	8a3b      	ldrh	r3, [r7, #16]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f006 fe3e 	bl	80086a8 <malloc>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38
					for (uint16_t i = 0; i < size; ++i) {
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8001a36:	e012      	b.n	8001a5e <updateTimeViaUartFSM+0x47e>
						msg[i] = buffer[start + i];
 8001a38:	7cfb      	ldrb	r3, [r7, #19]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001a40:	4413      	add	r3, r2
 8001a42:	461a      	mov	r2, r3
 8001a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a46:	441a      	add	r2, r3
 8001a48:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001a4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a4e:	440b      	add	r3, r1
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	701a      	strb	r2, [r3, #0]
					for (uint16_t i = 0; i < size; ++i) {
 8001a54:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8001a5e:	8a3b      	ldrh	r3, [r7, #16]
 8001a60:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d3e7      	bcc.n	8001a38 <updateTimeViaUartFSM+0x458>
					}
					msg[size] = '\0';
 8001a68:	8a3b      	ldrh	r3, [r7, #16]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6e:	4413      	add	r3, r2
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

					// Save second and change state
					ds3231_day = (uint8_t)atoi((char *)msg) % 7;
 8001a74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a76:	f006 fde9 	bl	800864c <atoi>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <updateTimeViaUartFSM+0x598>)
 8001a80:	fba3 1302 	umull	r1, r3, r3, r2
 8001a84:	1ad1      	subs	r1, r2, r3
 8001a86:	0849      	lsrs	r1, r1, #1
 8001a88:	440b      	add	r3, r1
 8001a8a:	0899      	lsrs	r1, r3, #2
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	1a5b      	subs	r3, r3, r1
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <updateTimeViaUartFSM+0x59c>)
 8001a98:	701a      	strb	r2, [r3, #0]
					if (ds3231_day == 0) {
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <updateTimeViaUartFSM+0x59c>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <updateTimeViaUartFSM+0x4c8>
						ds3231_day = 7;
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <updateTimeViaUartFSM+0x59c>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	701a      	strb	r2, [r3, #0]
					}
					update_time_mode = UPDATE_DATE;
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <updateTimeViaUartFSM+0x584>)
 8001aaa:	2204      	movs	r2, #4
 8001aac:	701a      	strb	r2, [r3, #0]
					waiting_response = 0;
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <updateTimeViaUartFSM+0x578>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f000 fcf3 	bl	80024a0 <lcd_Clear>
					lcd_ShowStr(20, 160, (uint8_t *)"Updating Date...", YELLOW, BLACK, 24, 1);
 8001aba:	2301      	movs	r3, #1
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2318      	movs	r3, #24
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001aca:	4a2d      	ldr	r2, [pc, #180]	; (8001b80 <updateTimeViaUartFSM+0x5a0>)
 8001acc:	21a0      	movs	r1, #160	; 0xa0
 8001ace:	2014      	movs	r0, #20
 8001ad0:	f001 f916 	bl	8002d00 <lcd_ShowStr>

					uart_Rs232SendString((uint8_t *)"day = ");
 8001ad4:	482b      	ldr	r0, [pc, #172]	; (8001b84 <updateTimeViaUartFSM+0x5a4>)
 8001ad6:	f002 f86b 	bl	8003bb0 <uart_Rs232SendString>
					uart_Rs232SendNum((uint32_t)ds3231_day);
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <updateTimeViaUartFSM+0x59c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 f892 	bl	8003c08 <uart_Rs232SendNum>
					uart_Rs232SendString((uint8_t *)"\n");
 8001ae4:	4822      	ldr	r0, [pc, #136]	; (8001b70 <updateTimeViaUartFSM+0x590>)
 8001ae6:	f002 f863 	bl	8003bb0 <uart_Rs232SendString>
					free(msg);
 8001aea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001aec:	f006 fde4 	bl	80086b8 <free>
			}
		} else {
			uart_Rs232SendString((uint8_t *)"!day#");
			waiting_response = 1;
		}
		break;
 8001af0:	e1c4      	b.n	8001e7c <updateTimeViaUartFSM+0x89c>
			uart_Rs232SendString((uint8_t *)"!day#");
 8001af2:	4825      	ldr	r0, [pc, #148]	; (8001b88 <updateTimeViaUartFSM+0x5a8>)
 8001af4:	f002 f85c 	bl	8003bb0 <uart_Rs232SendString>
			waiting_response = 1;
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <updateTimeViaUartFSM+0x578>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
		break;
 8001afe:	e1bd      	b.n	8001e7c <updateTimeViaUartFSM+0x89c>
	case UPDATE_DATE:
		if (waiting_response) {
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <updateTimeViaUartFSM+0x578>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 809e 	beq.w	8001c46 <updateTimeViaUartFSM+0x666>
			if (isMsgStop() == READING_COMPLETE_STATE) {
 8001b0a:	f7fe fe55 	bl	80007b8 <isMsgStop>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	f040 81b5 	bne.w	8001e80 <updateTimeViaUartFSM+0x8a0>
				uint8_t start = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
				uint16_t size = getBufSize();
 8001b1a:	f7fe fe21 	bl	8000760 <getBufSize>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	81bb      	strh	r3, [r7, #12]
				uint8_t *buffer = flushBuffer();
 8001b22:	f7fe fde1 	bl	80006e8 <flushBuffer>
 8001b26:	6478      	str	r0, [r7, #68]	; 0x44

				getMsg(buffer, &size, &start);
 8001b28:	f107 020f 	add.w	r2, r7, #15
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b34:	f7fe fe4c 	bl	80007d0 <getMsg>
				if (size > 0) {
 8001b38:	89bb      	ldrh	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 81a0 	beq.w	8001e80 <updateTimeViaUartFSM+0x8a0>
					uint8_t *msg = malloc(size * sizeof(uint8_t) + 1);
 8001b40:	89bb      	ldrh	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f006 fdaf 	bl	80086a8 <malloc>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	643b      	str	r3, [r7, #64]	; 0x40
					for (uint16_t i = 0; i < size; ++i) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001b54:	e02d      	b.n	8001bb2 <updateTimeViaUartFSM+0x5d2>
 8001b56:	bf00      	nop
 8001b58:	200001c4 	.word	0x200001c4
 8001b5c:	aaaaaaab 	.word	0xaaaaaaab
 8001b60:	200001cd 	.word	0x200001cd
 8001b64:	200001b7 	.word	0x200001b7
 8001b68:	080090d8 	.word	0x080090d8
 8001b6c:	080090e8 	.word	0x080090e8
 8001b70:	0800909c 	.word	0x0800909c
 8001b74:	080090f4 	.word	0x080090f4
 8001b78:	24924925 	.word	0x24924925
 8001b7c:	200001cc 	.word	0x200001cc
 8001b80:	080090fc 	.word	0x080090fc
 8001b84:	08009110 	.word	0x08009110
 8001b88:	08009118 	.word	0x08009118
						msg[i] = buffer[start + i];
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b94:	4413      	add	r3, r2
 8001b96:	461a      	mov	r2, r3
 8001b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9a:	441a      	add	r2, r3
 8001b9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ba2:	440b      	add	r3, r1
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
					for (uint16_t i = 0; i < size; ++i) {
 8001ba8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001bac:	3301      	adds	r3, #1
 8001bae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001bb2:	89bb      	ldrh	r3, [r7, #12]
 8001bb4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d3e7      	bcc.n	8001b8c <updateTimeViaUartFSM+0x5ac>
					}
					msg[size] = '\0';
 8001bbc:	89bb      	ldrh	r3, [r7, #12]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bc2:	4413      	add	r3, r2
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]

					// Save second and change state
					ds3231_date = (uint8_t)atoi((char *)msg) % 31;
 8001bc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bca:	f006 fd3f 	bl	800864c <atoi>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4baf      	ldr	r3, [pc, #700]	; (8001e90 <updateTimeViaUartFSM+0x8b0>)
 8001bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd8:	1ad1      	subs	r1, r2, r3
 8001bda:	0849      	lsrs	r1, r1, #1
 8001bdc:	440b      	add	r3, r1
 8001bde:	0919      	lsrs	r1, r3, #4
 8001be0:	460b      	mov	r3, r1
 8001be2:	015b      	lsls	r3, r3, #5
 8001be4:	1a5b      	subs	r3, r3, r1
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4baa      	ldr	r3, [pc, #680]	; (8001e94 <updateTimeViaUartFSM+0x8b4>)
 8001bec:	701a      	strb	r2, [r3, #0]
					if (ds3231_date == 0) {
 8001bee:	4ba9      	ldr	r3, [pc, #676]	; (8001e94 <updateTimeViaUartFSM+0x8b4>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <updateTimeViaUartFSM+0x61c>
						ds3231_date = 31;
 8001bf6:	4ba7      	ldr	r3, [pc, #668]	; (8001e94 <updateTimeViaUartFSM+0x8b4>)
 8001bf8:	221f      	movs	r2, #31
 8001bfa:	701a      	strb	r2, [r3, #0]
					}
					update_time_mode = UPDATE_MONTH;
 8001bfc:	4ba6      	ldr	r3, [pc, #664]	; (8001e98 <updateTimeViaUartFSM+0x8b8>)
 8001bfe:	2205      	movs	r2, #5
 8001c00:	701a      	strb	r2, [r3, #0]
					waiting_response = 0;
 8001c02:	4ba6      	ldr	r3, [pc, #664]	; (8001e9c <updateTimeViaUartFSM+0x8bc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 fc49 	bl	80024a0 <lcd_Clear>
					lcd_ShowStr(20, 160, (uint8_t *)"Updating Month...", YELLOW, BLACK, 24, 1);
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2318      	movs	r3, #24
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	2300      	movs	r3, #0
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c1e:	4aa0      	ldr	r2, [pc, #640]	; (8001ea0 <updateTimeViaUartFSM+0x8c0>)
 8001c20:	21a0      	movs	r1, #160	; 0xa0
 8001c22:	2014      	movs	r0, #20
 8001c24:	f001 f86c 	bl	8002d00 <lcd_ShowStr>

					uart_Rs232SendString((uint8_t *)"date = ");
 8001c28:	489e      	ldr	r0, [pc, #632]	; (8001ea4 <updateTimeViaUartFSM+0x8c4>)
 8001c2a:	f001 ffc1 	bl	8003bb0 <uart_Rs232SendString>
					uart_Rs232SendNum((uint32_t)ds3231_sec);
 8001c2e:	4b9e      	ldr	r3, [pc, #632]	; (8001ea8 <updateTimeViaUartFSM+0x8c8>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 ffe8 	bl	8003c08 <uart_Rs232SendNum>
					uart_Rs232SendString((uint8_t *)"\n");
 8001c38:	489c      	ldr	r0, [pc, #624]	; (8001eac <updateTimeViaUartFSM+0x8cc>)
 8001c3a:	f001 ffb9 	bl	8003bb0 <uart_Rs232SendString>
					free(msg);
 8001c3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c40:	f006 fd3a 	bl	80086b8 <free>
			}
		} else {
			uart_Rs232SendString((uint8_t *)"!date#");
			waiting_response = 1;
		}
		break;
 8001c44:	e11c      	b.n	8001e80 <updateTimeViaUartFSM+0x8a0>
			uart_Rs232SendString((uint8_t *)"!date#");
 8001c46:	489a      	ldr	r0, [pc, #616]	; (8001eb0 <updateTimeViaUartFSM+0x8d0>)
 8001c48:	f001 ffb2 	bl	8003bb0 <uart_Rs232SendString>
			waiting_response = 1;
 8001c4c:	4b93      	ldr	r3, [pc, #588]	; (8001e9c <updateTimeViaUartFSM+0x8bc>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
		break;
 8001c52:	e115      	b.n	8001e80 <updateTimeViaUartFSM+0x8a0>
	case UPDATE_MONTH:
		if (waiting_response) {
 8001c54:	4b91      	ldr	r3, [pc, #580]	; (8001e9c <updateTimeViaUartFSM+0x8bc>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8081 	beq.w	8001d60 <updateTimeViaUartFSM+0x780>
			if (isMsgStop() == READING_COMPLETE_STATE) {
 8001c5e:	f7fe fdab 	bl	80007b8 <isMsgStop>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f040 810d 	bne.w	8001e84 <updateTimeViaUartFSM+0x8a4>
				uint8_t start = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	72fb      	strb	r3, [r7, #11]
				uint16_t size = getBufSize();
 8001c6e:	f7fe fd77 	bl	8000760 <getBufSize>
 8001c72:	4603      	mov	r3, r0
 8001c74:	813b      	strh	r3, [r7, #8]
				uint8_t *buffer = flushBuffer();
 8001c76:	f7fe fd37 	bl	80006e8 <flushBuffer>
 8001c7a:	64f8      	str	r0, [r7, #76]	; 0x4c

				getMsg(buffer, &size, &start);
 8001c7c:	f107 020b 	add.w	r2, r7, #11
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	4619      	mov	r1, r3
 8001c86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c88:	f7fe fda2 	bl	80007d0 <getMsg>
				if (size > 0) {
 8001c8c:	893b      	ldrh	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80f8 	beq.w	8001e84 <updateTimeViaUartFSM+0x8a4>
					uint8_t *msg = malloc(size * sizeof(uint8_t) + 1);
 8001c94:	893b      	ldrh	r3, [r7, #8]
 8001c96:	3301      	adds	r3, #1
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f006 fd05 	bl	80086a8 <malloc>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	64bb      	str	r3, [r7, #72]	; 0x48
					for (uint16_t i = 0; i < size; ++i) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001ca8:	e012      	b.n	8001cd0 <updateTimeViaUartFSM+0x6f0>
						msg[i] = buffer[start + i];
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	461a      	mov	r2, r3
 8001cae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001cb2:	4413      	add	r3, r2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb8:	441a      	add	r2, r3
 8001cba:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001cbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001cc0:	440b      	add	r3, r1
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	701a      	strb	r2, [r3, #0]
					for (uint16_t i = 0; i < size; ++i) {
 8001cc6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001cd0:	893b      	ldrh	r3, [r7, #8]
 8001cd2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3e7      	bcc.n	8001caa <updateTimeViaUartFSM+0x6ca>
					}
					msg[size] = '\0';
 8001cda:	893b      	ldrh	r3, [r7, #8]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce0:	4413      	add	r3, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]

					// Save second and change state
					ds3231_month = (uint8_t)atoi((char *)msg) % 12;
 8001ce6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ce8:	f006 fcb0 	bl	800864c <atoi>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b70      	ldr	r3, [pc, #448]	; (8001eb4 <updateTimeViaUartFSM+0x8d4>)
 8001cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf6:	08d9      	lsrs	r1, r3, #3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	440b      	add	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b6c      	ldr	r3, [pc, #432]	; (8001eb8 <updateTimeViaUartFSM+0x8d8>)
 8001d06:	701a      	strb	r2, [r3, #0]
					if (ds3231_month == 0) {
 8001d08:	4b6b      	ldr	r3, [pc, #428]	; (8001eb8 <updateTimeViaUartFSM+0x8d8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <updateTimeViaUartFSM+0x736>
						ds3231_month = 12;
 8001d10:	4b69      	ldr	r3, [pc, #420]	; (8001eb8 <updateTimeViaUartFSM+0x8d8>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	701a      	strb	r2, [r3, #0]
					}
					update_time_mode = UPDATE_YEAR;
 8001d16:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <updateTimeViaUartFSM+0x8b8>)
 8001d18:	2206      	movs	r2, #6
 8001d1a:	701a      	strb	r2, [r3, #0]
					waiting_response = 0;
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <updateTimeViaUartFSM+0x8bc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 fbbc 	bl	80024a0 <lcd_Clear>
					lcd_ShowStr(20, 160, (uint8_t *)"Updating Year...", YELLOW, BLACK, 24, 1);
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	2318      	movs	r3, #24
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d38:	4a60      	ldr	r2, [pc, #384]	; (8001ebc <updateTimeViaUartFSM+0x8dc>)
 8001d3a:	21a0      	movs	r1, #160	; 0xa0
 8001d3c:	2014      	movs	r0, #20
 8001d3e:	f000 ffdf 	bl	8002d00 <lcd_ShowStr>

					uart_Rs232SendString((uint8_t *)"month = ");
 8001d42:	485f      	ldr	r0, [pc, #380]	; (8001ec0 <updateTimeViaUartFSM+0x8e0>)
 8001d44:	f001 ff34 	bl	8003bb0 <uart_Rs232SendString>
					uart_Rs232SendNum((uint32_t)ds3231_month);
 8001d48:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <updateTimeViaUartFSM+0x8d8>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 ff5b 	bl	8003c08 <uart_Rs232SendNum>
					uart_Rs232SendString((uint8_t *)"\n");
 8001d52:	4856      	ldr	r0, [pc, #344]	; (8001eac <updateTimeViaUartFSM+0x8cc>)
 8001d54:	f001 ff2c 	bl	8003bb0 <uart_Rs232SendString>
					free(msg);
 8001d58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d5a:	f006 fcad 	bl	80086b8 <free>
			}
		} else {
			uart_Rs232SendString((uint8_t *)"!month#");
			waiting_response = 1;
		}
		break;
 8001d5e:	e091      	b.n	8001e84 <updateTimeViaUartFSM+0x8a4>
			uart_Rs232SendString((uint8_t *)"!month#");
 8001d60:	4858      	ldr	r0, [pc, #352]	; (8001ec4 <updateTimeViaUartFSM+0x8e4>)
 8001d62:	f001 ff25 	bl	8003bb0 <uart_Rs232SendString>
			waiting_response = 1;
 8001d66:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <updateTimeViaUartFSM+0x8bc>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
		break;
 8001d6c:	e08a      	b.n	8001e84 <updateTimeViaUartFSM+0x8a4>
	case UPDATE_YEAR:
		if (waiting_response) {
 8001d6e:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <updateTimeViaUartFSM+0x8bc>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d065      	beq.n	8001e42 <updateTimeViaUartFSM+0x862>
			if (isMsgStop() == READING_COMPLETE_STATE) {
 8001d76:	f7fe fd1f 	bl	80007b8 <isMsgStop>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	f040 8083 	bne.w	8001e88 <updateTimeViaUartFSM+0x8a8>
				uint8_t start = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	71fb      	strb	r3, [r7, #7]
				uint16_t size = getBufSize();
 8001d86:	f7fe fceb 	bl	8000760 <getBufSize>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80bb      	strh	r3, [r7, #4]
				uint8_t *buffer = flushBuffer();
 8001d8e:	f7fe fcab 	bl	80006e8 <flushBuffer>
 8001d92:	6578      	str	r0, [r7, #84]	; 0x54

				getMsg(buffer, &size, &start);
 8001d94:	1dfa      	adds	r2, r7, #7
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001d9c:	f7fe fd18 	bl	80007d0 <getMsg>
				if (size > 0) {
 8001da0:	88bb      	ldrh	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d070      	beq.n	8001e88 <updateTimeViaUartFSM+0x8a8>
					uint8_t *msg = malloc(size * sizeof(uint8_t) + 1);
 8001da6:	88bb      	ldrh	r3, [r7, #4]
 8001da8:	3301      	adds	r3, #1
 8001daa:	4618      	mov	r0, r3
 8001dac:	f006 fc7c 	bl	80086a8 <malloc>
 8001db0:	4603      	mov	r3, r0
 8001db2:	653b      	str	r3, [r7, #80]	; 0x50
					for (uint16_t i = 0; i < size; ++i) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8001dba:	e012      	b.n	8001de2 <updateTimeViaUartFSM+0x802>
						msg[i] = buffer[start + i];
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001dc4:	4413      	add	r3, r2
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dca:	441a      	add	r2, r3
 8001dcc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001dd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001dd2:	440b      	add	r3, r1
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
					for (uint16_t i = 0; i < size; ++i) {
 8001dd8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8001de2:	88bb      	ldrh	r3, [r7, #4]
 8001de4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d3e7      	bcc.n	8001dbc <updateTimeViaUartFSM+0x7dc>
					}
					msg[size] = '\0';
 8001dec:	88bb      	ldrh	r3, [r7, #4]
 8001dee:	461a      	mov	r2, r3
 8001df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df2:	4413      	add	r3, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]

					// Save second and change state
					ds3231_year = (uint8_t)atoi((char *)msg) % 100;
 8001df8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001dfa:	f006 fc27 	bl	800864c <atoi>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <updateTimeViaUartFSM+0x8e8>)
 8001e04:	fba2 1203 	umull	r1, r2, r2, r3
 8001e08:	0952      	lsrs	r2, r2, #5
 8001e0a:	2164      	movs	r1, #100	; 0x64
 8001e0c:	fb01 f202 	mul.w	r2, r1, r2
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <updateTimeViaUartFSM+0x8ec>)
 8001e16:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f000 fb41 	bl	80024a0 <lcd_Clear>
					is_update_complete = 1;	// Special case when time is updated conpletely
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <updateTimeViaUartFSM+0x8f0>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]

					uart_Rs232SendString((uint8_t *)"year = ");
 8001e24:	482b      	ldr	r0, [pc, #172]	; (8001ed4 <updateTimeViaUartFSM+0x8f4>)
 8001e26:	f001 fec3 	bl	8003bb0 <uart_Rs232SendString>
					uart_Rs232SendNum((uint32_t)ds3231_year);
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <updateTimeViaUartFSM+0x8ec>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 feea 	bl	8003c08 <uart_Rs232SendNum>
					uart_Rs232SendString((uint8_t *)"\n");
 8001e34:	481d      	ldr	r0, [pc, #116]	; (8001eac <updateTimeViaUartFSM+0x8cc>)
 8001e36:	f001 febb 	bl	8003bb0 <uart_Rs232SendString>
					free(msg);
 8001e3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001e3c:	f006 fc3c 	bl	80086b8 <free>
			}
		} else {
			uart_Rs232SendString((uint8_t *)"!year#");
			waiting_response = 1;
		}
		break;
 8001e40:	e022      	b.n	8001e88 <updateTimeViaUartFSM+0x8a8>
			uart_Rs232SendString((uint8_t *)"!year#");
 8001e42:	4825      	ldr	r0, [pc, #148]	; (8001ed8 <updateTimeViaUartFSM+0x8f8>)
 8001e44:	f001 feb4 	bl	8003bb0 <uart_Rs232SendString>
			waiting_response = 1;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <updateTimeViaUartFSM+0x8bc>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
		break;
 8001e4e:	e01b      	b.n	8001e88 <updateTimeViaUartFSM+0x8a8>
	case UPDATE_FAIL:
		lcd_ShowStr(20, 160, (uint8_t *)"Update Time Fail", YELLOW, BLACK, 24, 1);
 8001e50:	2301      	movs	r3, #1
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	2318      	movs	r3, #24
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <updateTimeViaUartFSM+0x8fc>)
 8001e62:	21a0      	movs	r1, #160	; 0xa0
 8001e64:	2014      	movs	r0, #20
 8001e66:	f000 ff4b 	bl	8002d00 <lcd_ShowStr>
		break;
 8001e6a:	e00e      	b.n	8001e8a <updateTimeViaUartFSM+0x8aa>
	default:
		break;
 8001e6c:	bf00      	nop
 8001e6e:	e00c      	b.n	8001e8a <updateTimeViaUartFSM+0x8aa>
		break;
 8001e70:	bf00      	nop
 8001e72:	e00a      	b.n	8001e8a <updateTimeViaUartFSM+0x8aa>
		break;
 8001e74:	bf00      	nop
 8001e76:	e008      	b.n	8001e8a <updateTimeViaUartFSM+0x8aa>
		break;
 8001e78:	bf00      	nop
 8001e7a:	e006      	b.n	8001e8a <updateTimeViaUartFSM+0x8aa>
		break;
 8001e7c:	bf00      	nop
 8001e7e:	e004      	b.n	8001e8a <updateTimeViaUartFSM+0x8aa>
		break;
 8001e80:	bf00      	nop
 8001e82:	e002      	b.n	8001e8a <updateTimeViaUartFSM+0x8aa>
		break;
 8001e84:	bf00      	nop
 8001e86:	e000      	b.n	8001e8a <updateTimeViaUartFSM+0x8aa>
		break;
 8001e88:	bf00      	nop
	}
}
 8001e8a:	3768      	adds	r7, #104	; 0x68
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	08421085 	.word	0x08421085
 8001e94:	200001cb 	.word	0x200001cb
 8001e98:	200001b7 	.word	0x200001b7
 8001e9c:	200001c4 	.word	0x200001c4
 8001ea0:	08009120 	.word	0x08009120
 8001ea4:	08009134 	.word	0x08009134
 8001ea8:	200001c8 	.word	0x200001c8
 8001eac:	0800909c 	.word	0x0800909c
 8001eb0:	0800913c 	.word	0x0800913c
 8001eb4:	aaaaaaab 	.word	0xaaaaaaab
 8001eb8:	200001ce 	.word	0x200001ce
 8001ebc:	08009144 	.word	0x08009144
 8001ec0:	08009158 	.word	0x08009158
 8001ec4:	08009164 	.word	0x08009164
 8001ec8:	51eb851f 	.word	0x51eb851f
 8001ecc:	200001c9 	.word	0x200001c9
 8001ed0:	200001bf 	.word	0x200001bf
 8001ed4:	0800916c 	.word	0x0800916c
 8001ed8:	08009174 	.word	0x08009174
 8001edc:	0800917c 	.word	0x0800917c

08001ee0 <checkAlarm>:
/**
 * @brief Compare the current time to alarm
 * 
 */
void checkAlarm() 
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	if (ds3231_sec == sec_alarm &&
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <checkAlarm+0x60>)
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <checkAlarm+0x64>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d125      	bne.n	8001f3c <checkAlarm+0x5c>
		ds3231_min == min_alarm &&
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <checkAlarm+0x68>)
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <checkAlarm+0x6c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
	if (ds3231_sec == sec_alarm &&
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d11f      	bne.n	8001f3c <checkAlarm+0x5c>
		ds3231_hours == hours_alarm &&
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <checkAlarm+0x70>)
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <checkAlarm+0x74>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
		ds3231_min == min_alarm &&
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d119      	bne.n	8001f3c <checkAlarm+0x5c>
		ds3231_day == day_alarm &&
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <checkAlarm+0x78>)
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <checkAlarm+0x7c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
		ds3231_hours == hours_alarm &&
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d113      	bne.n	8001f3c <checkAlarm+0x5c>
		ds3231_date == date_alarm &&
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <checkAlarm+0x80>)
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <checkAlarm+0x84>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
		ds3231_day == day_alarm &&
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d10d      	bne.n	8001f3c <checkAlarm+0x5c>
		ds3231_month == month_alarm &&
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <checkAlarm+0x88>)
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <checkAlarm+0x8c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
		ds3231_date == date_alarm &&
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <checkAlarm+0x5c>
		ds3231_year == year_alarm) {
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <checkAlarm+0x90>)
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <checkAlarm+0x94>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
		ds3231_month == month_alarm &&
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d101      	bne.n	8001f3c <checkAlarm+0x5c>
		notifyAlarm();
 8001f38:	f000 f81e 	bl	8001f78 <notifyAlarm>
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200001c8 	.word	0x200001c8
 8001f44:	200001c2 	.word	0x200001c2
 8001f48:	200001ca 	.word	0x200001ca
 8001f4c:	200001bc 	.word	0x200001bc
 8001f50:	200001cd 	.word	0x200001cd
 8001f54:	200001b0 	.word	0x200001b0
 8001f58:	200001cc 	.word	0x200001cc
 8001f5c:	200001c3 	.word	0x200001c3
 8001f60:	200001cb 	.word	0x200001cb
 8001f64:	200001bb 	.word	0x200001bb
 8001f68:	200001ce 	.word	0x200001ce
 8001f6c:	200001b2 	.word	0x200001b2
 8001f70:	200001c9 	.word	0x200001c9
 8001f74:	200001c1 	.word	0x200001c1

08001f78 <notifyAlarm>:

/**
 * @brief Display alarm to LCD	
 * 
 */
void notifyAlarm() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af04      	add	r7, sp, #16
	lcd_DrawCircle(120, 160, RED, 50, 1);
 8001f7e:	2301      	movs	r3, #1
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2332      	movs	r3, #50	; 0x32
 8001f84:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001f88:	21a0      	movs	r1, #160	; 0xa0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 fe4b 	bl	8002c26 <lcd_DrawCircle>
	lcd_ShowStr(100, 160, (uint8_t *)"ALART", BLACK, RED, 24, 1);
 8001f90:	2301      	movs	r3, #1
 8001f92:	9302      	str	r3, [sp, #8]
 8001f94:	2318      	movs	r3, #24
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <notifyAlarm+0x38>)
 8001fa2:	21a0      	movs	r1, #160	; 0xa0
 8001fa4:	2064      	movs	r0, #100	; 0x64
 8001fa6:	f000 feab 	bl	8002d00 <lcd_ShowStr>
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	08009190 	.word	0x08009190

08001fb4 <displayTime>:

/**
 * @brief Display time to LCD with default parameter
 * 
 */
void displayTime() {
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af04      	add	r7, sp, #16
	displayTimeFull(ds3231_sec, ds3231_min, ds3231_hours, ds3231_day, ds3231_date, ds3231_month, ds3231_year);
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <displayTime+0x3c>)
 8001fbc:	7818      	ldrb	r0, [r3, #0]
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <displayTime+0x40>)
 8001fc0:	781c      	ldrb	r4, [r3, #0]
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <displayTime+0x44>)
 8001fc4:	781d      	ldrb	r5, [r3, #0]
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <displayTime+0x48>)
 8001fc8:	781e      	ldrb	r6, [r3, #0]
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <displayTime+0x4c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <displayTime+0x50>)
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	490d      	ldr	r1, [pc, #52]	; (8002008 <displayTime+0x54>)
 8001fd4:	7809      	ldrb	r1, [r1, #0]
 8001fd6:	9102      	str	r1, [sp, #8]
 8001fd8:	9201      	str	r2, [sp, #4]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4633      	mov	r3, r6
 8001fde:	462a      	mov	r2, r5
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	f000 f813 	bl	800200c <displayTimeFull>
}
 8001fe6:	bf00      	nop
 8001fe8:	3704      	adds	r7, #4
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200001c8 	.word	0x200001c8
 8001ff4:	200001ca 	.word	0x200001ca
 8001ff8:	200001cd 	.word	0x200001cd
 8001ffc:	200001cc 	.word	0x200001cc
 8002000:	200001cb 	.word	0x200001cb
 8002004:	200001ce 	.word	0x200001ce
 8002008:	200001c9 	.word	0x200001c9

0800200c <displayTimeFull>:
					 uint8_t minute, 
					 uint8_t hours, 
					 uint8_t day, 
					 uint8_t date, 
					 uint8_t month, 
					 uint8_t year) {
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b087      	sub	sp, #28
 8002010:	af04      	add	r7, sp, #16
 8002012:	4604      	mov	r4, r0
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4623      	mov	r3, r4
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	4603      	mov	r3, r0
 8002020:	71bb      	strb	r3, [r7, #6]
 8002022:	460b      	mov	r3, r1
 8002024:	717b      	strb	r3, [r7, #5]
 8002026:	4613      	mov	r3, r2
 8002028:	713b      	strb	r3, [r7, #4]
	lcd_ShowStr(10, 70, (uint8_t *)"Thu", YELLOW, BLACK, 24, 1);
 800202a:	2301      	movs	r3, #1
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	2318      	movs	r3, #24
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	2300      	movs	r3, #0
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800203a:	4a6c      	ldr	r2, [pc, #432]	; (80021ec <displayTimeFull+0x1e0>)
 800203c:	2146      	movs	r1, #70	; 0x46
 800203e:	200a      	movs	r0, #10
 8002040:	f000 fe5e 	bl	8002d00 <lcd_ShowStr>
	lcd_ShowStr(55, 70, (uint8_t *)"Ngay", YELLOW, BLACK, 24, 1);
 8002044:	2301      	movs	r3, #1
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	2318      	movs	r3, #24
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002054:	4a66      	ldr	r2, [pc, #408]	; (80021f0 <displayTimeFull+0x1e4>)
 8002056:	2146      	movs	r1, #70	; 0x46
 8002058:	2037      	movs	r0, #55	; 0x37
 800205a:	f000 fe51 	bl	8002d00 <lcd_ShowStr>
	lcd_ShowStr(110, 70, (uint8_t *)"Thang", YELLOW, BLACK, 24, 1);
 800205e:	2301      	movs	r3, #1
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	2318      	movs	r3, #24
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2300      	movs	r3, #0
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800206e:	4a61      	ldr	r2, [pc, #388]	; (80021f4 <displayTimeFull+0x1e8>)
 8002070:	2146      	movs	r1, #70	; 0x46
 8002072:	206e      	movs	r0, #110	; 0x6e
 8002074:	f000 fe44 	bl	8002d00 <lcd_ShowStr>
	lcd_ShowStr(180, 70, (uint8_t *)"Nam", YELLOW, BLACK, 24, 1);
 8002078:	2301      	movs	r3, #1
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	2318      	movs	r3, #24
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002088:	4a5b      	ldr	r2, [pc, #364]	; (80021f8 <displayTimeFull+0x1ec>)
 800208a:	2146      	movs	r1, #70	; 0x46
 800208c:	20b4      	movs	r0, #180	; 0xb4
 800208e:	f000 fe37 	bl	8002d00 <lcd_ShowStr>

	lcd_ShowIntNum(10, 100, day, 2, YELLOW, BLACK, 24);
 8002092:	793b      	ldrb	r3, [r7, #4]
 8002094:	b29a      	uxth	r2, r3
 8002096:	2318      	movs	r3, #24
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	2300      	movs	r3, #0
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2302      	movs	r3, #2
 80020a6:	2164      	movs	r1, #100	; 0x64
 80020a8:	200a      	movs	r0, #10
 80020aa:	f000 fb2f 	bl	800270c <lcd_ShowIntNum>
	lcd_ShowIntNum(60, 100, date, 2, YELLOW, BLACK, 24);
 80020ae:	7e3b      	ldrb	r3, [r7, #24]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	2318      	movs	r3, #24
 80020b4:	9302      	str	r3, [sp, #8]
 80020b6:	2300      	movs	r3, #0
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2302      	movs	r3, #2
 80020c2:	2164      	movs	r1, #100	; 0x64
 80020c4:	203c      	movs	r0, #60	; 0x3c
 80020c6:	f000 fb21 	bl	800270c <lcd_ShowIntNum>
	lcd_ShowIntNum(120, 100, month, 2, YELLOW, BLACK, 24);
 80020ca:	7f3b      	ldrb	r3, [r7, #28]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	2318      	movs	r3, #24
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2302      	movs	r3, #2
 80020de:	2164      	movs	r1, #100	; 0x64
 80020e0:	2078      	movs	r0, #120	; 0x78
 80020e2:	f000 fb13 	bl	800270c <lcd_ShowIntNum>
	lcd_ShowIntNum(180, 100, year + 2000, 2, YELLOW, BLACK, 24);
 80020e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	2318      	movs	r3, #24
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2300      	movs	r3, #0
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2302      	movs	r3, #2
 8002102:	2164      	movs	r1, #100	; 0x64
 8002104:	20b4      	movs	r0, #180	; 0xb4
 8002106:	f000 fb01 	bl	800270c <lcd_ShowIntNum>

	lcd_ShowStr(40, 160, (uint8_t *)"Gio", YELLOW, BLACK, 24, 1);
 800210a:	2301      	movs	r3, #1
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	2318      	movs	r3, #24
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	2300      	movs	r3, #0
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800211a:	4a38      	ldr	r2, [pc, #224]	; (80021fc <displayTimeFull+0x1f0>)
 800211c:	21a0      	movs	r1, #160	; 0xa0
 800211e:	2028      	movs	r0, #40	; 0x28
 8002120:	f000 fdee 	bl	8002d00 <lcd_ShowStr>
	lcd_ShowStr(90, 160, (uint8_t *)"Phut", YELLOW, BLACK, 24, 1);
 8002124:	2301      	movs	r3, #1
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	2318      	movs	r3, #24
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	2300      	movs	r3, #0
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002134:	4a32      	ldr	r2, [pc, #200]	; (8002200 <displayTimeFull+0x1f4>)
 8002136:	21a0      	movs	r1, #160	; 0xa0
 8002138:	205a      	movs	r0, #90	; 0x5a
 800213a:	f000 fde1 	bl	8002d00 <lcd_ShowStr>
	lcd_ShowStr(150, 160, (uint8_t *)"Giay", YELLOW, BLACK, 24, 1);
 800213e:	2301      	movs	r3, #1
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2318      	movs	r3, #24
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2300      	movs	r3, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800214e:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <displayTimeFull+0x1f8>)
 8002150:	21a0      	movs	r1, #160	; 0xa0
 8002152:	2096      	movs	r0, #150	; 0x96
 8002154:	f000 fdd4 	bl	8002d00 <lcd_ShowStr>

	lcd_ShowIntNum(50, 190, hours, 2, GREEN, BLACK, 24);
 8002158:	797b      	ldrb	r3, [r7, #5]
 800215a:	b29a      	uxth	r2, r3
 800215c:	2318      	movs	r3, #24
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2302      	movs	r3, #2
 800216c:	21be      	movs	r1, #190	; 0xbe
 800216e:	2032      	movs	r0, #50	; 0x32
 8002170:	f000 facc 	bl	800270c <lcd_ShowIntNum>
	lcd_ShowIntNum(100, 190, minute, 2, GREEN, BLACK, 24);
 8002174:	79bb      	ldrb	r3, [r7, #6]
 8002176:	b29a      	uxth	r2, r3
 8002178:	2318      	movs	r3, #24
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2300      	movs	r3, #0
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2302      	movs	r3, #2
 8002188:	21be      	movs	r1, #190	; 0xbe
 800218a:	2064      	movs	r0, #100	; 0x64
 800218c:	f000 fabe 	bl	800270c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 190, second, 2, GREEN, BLACK, 24);
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	b29a      	uxth	r2, r3
 8002194:	2318      	movs	r3, #24
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2302      	movs	r3, #2
 80021a4:	21be      	movs	r1, #190	; 0xbe
 80021a6:	2096      	movs	r0, #150	; 0x96
 80021a8:	f000 fab0 	bl	800270c <lcd_ShowIntNum>

	lcd_ShowStr(40, 250, (uint8_t *)"Mode: ", BLUE, BLACK, 24, 1);
 80021ac:	2301      	movs	r3, #1
 80021ae:	9302      	str	r3, [sp, #8]
 80021b0:	2318      	movs	r3, #24
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2300      	movs	r3, #0
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	231f      	movs	r3, #31
 80021ba:	4a13      	ldr	r2, [pc, #76]	; (8002208 <displayTimeFull+0x1fc>)
 80021bc:	21fa      	movs	r1, #250	; 0xfa
 80021be:	2028      	movs	r0, #40	; 0x28
 80021c0:	f000 fd9e 	bl	8002d00 <lcd_ShowStr>
	lcd_ShowIntNum(100, 250, clock_mode, 2, GREEN, BLACK, 24);
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <displayTimeFull+0x200>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	2318      	movs	r3, #24
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2300      	movs	r3, #0
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2302      	movs	r3, #2
 80021da:	21fa      	movs	r1, #250	; 0xfa
 80021dc:	2064      	movs	r0, #100	; 0x64
 80021de:	f000 fa95 	bl	800270c <lcd_ShowIntNum>
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	08009198 	.word	0x08009198
 80021f0:	0800919c 	.word	0x0800919c
 80021f4:	080091a4 	.word	0x080091a4
 80021f8:	080091ac 	.word	0x080091ac
 80021fc:	080091b0 	.word	0x080091b0
 8002200:	080091b4 	.word	0x080091b4
 8002204:	080091bc 	.word	0x080091bc
 8002208:	080091c4 	.word	0x080091c4
 800220c:	200001b3 	.word	0x200001b3

08002210 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(07); //second
 8002214:	2007      	movs	r0, #7
 8002216:	f001 fd9f 	bl	8003d58 <DEC2BCD>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <ds3231_init+0x80>)
 8002220:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(06); //minute
 8002222:	2006      	movs	r0, #6
 8002224:	f001 fd98 	bl	8003d58 <DEC2BCD>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <ds3231_init+0x80>)
 800222e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(16); //hour
 8002230:	2010      	movs	r0, #16
 8002232:	f001 fd91 	bl	8003d58 <DEC2BCD>
 8002236:	4603      	mov	r3, r0
 8002238:	461a      	mov	r2, r3
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <ds3231_init+0x80>)
 800223c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(05); //day
 800223e:	2005      	movs	r0, #5
 8002240:	f001 fd8a 	bl	8003d58 <DEC2BCD>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <ds3231_init+0x80>)
 800224a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(05); //date
 800224c:	2005      	movs	r0, #5
 800224e:	f001 fd83 	bl	8003d58 <DEC2BCD>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <ds3231_init+0x80>)
 8002258:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(12); //month
 800225a:	200c      	movs	r0, #12
 800225c:	f001 fd7c 	bl	8003d58 <DEC2BCD>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <ds3231_init+0x80>)
 8002266:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(24); //year
 8002268:	2018      	movs	r0, #24
 800226a:	f001 fd75 	bl	8003d58 <DEC2BCD>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <ds3231_init+0x80>)
 8002274:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8002276:	2332      	movs	r3, #50	; 0x32
 8002278:	2203      	movs	r2, #3
 800227a:	21d0      	movs	r1, #208	; 0xd0
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <ds3231_init+0x84>)
 800227e:	f002 fe0d 	bl	8004e9c <HAL_I2C_IsDeviceReady>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d000      	beq.n	800228a <ds3231_init+0x7a>
		while(1);
 8002288:	e7fe      	b.n	8002288 <ds3231_init+0x78>
	};
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200001d0 	.word	0x200001d0
 8002294:	20000214 	.word	0x20000214

08002298 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af04      	add	r7, sp, #16
 800229e:	4603      	mov	r3, r0
 80022a0:	460a      	mov	r2, r1
 80022a2:	71fb      	strb	r3, [r7, #7]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80022a8:	79bb      	ldrb	r3, [r7, #6]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 fd54 	bl	8003d58 <DEC2BCD>
 80022b0:	4603      	mov	r3, r0
 80022b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	230a      	movs	r3, #10
 80022ba:	9302      	str	r3, [sp, #8]
 80022bc:	2301      	movs	r3, #1
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	f107 030f 	add.w	r3, r7, #15
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2301      	movs	r3, #1
 80022c8:	21d0      	movs	r1, #208	; 0xd0
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <ds3231_Write+0x40>)
 80022cc:	f002 fac6 	bl	800485c <HAL_I2C_Mem_Write>
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000214 	.word	0x20000214

080022dc <ds3231_ReadTime>:

void ds3231_ReadTime() {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80022e2:	230a      	movs	r3, #10
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2307      	movs	r3, #7
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <ds3231_ReadTime+0xa4>)
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2301      	movs	r3, #1
 80022f0:	2200      	movs	r2, #0
 80022f2:	21d0      	movs	r1, #208	; 0xd0
 80022f4:	4823      	ldr	r0, [pc, #140]	; (8002384 <ds3231_ReadTime+0xa8>)
 80022f6:	f002 fbab 	bl	8004a50 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <ds3231_ReadTime+0xa4>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 fd10 	bl	8003d24 <BCD2DEC>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <ds3231_ReadTime+0xac>)
 800230a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <ds3231_ReadTime+0xa4>)
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	4618      	mov	r0, r3
 8002312:	f001 fd07 	bl	8003d24 <BCD2DEC>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <ds3231_ReadTime+0xb0>)
 800231c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <ds3231_ReadTime+0xa4>)
 8002320:	789b      	ldrb	r3, [r3, #2]
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fcfe 	bl	8003d24 <BCD2DEC>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <ds3231_ReadTime+0xb4>)
 800232e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <ds3231_ReadTime+0xa4>)
 8002332:	78db      	ldrb	r3, [r3, #3]
 8002334:	4618      	mov	r0, r3
 8002336:	f001 fcf5 	bl	8003d24 <BCD2DEC>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <ds3231_ReadTime+0xb8>)
 8002340:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <ds3231_ReadTime+0xa4>)
 8002344:	791b      	ldrb	r3, [r3, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fcec 	bl	8003d24 <BCD2DEC>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <ds3231_ReadTime+0xbc>)
 8002352:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <ds3231_ReadTime+0xa4>)
 8002356:	795b      	ldrb	r3, [r3, #5]
 8002358:	4618      	mov	r0, r3
 800235a:	f001 fce3 	bl	8003d24 <BCD2DEC>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <ds3231_ReadTime+0xc0>)
 8002364:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <ds3231_ReadTime+0xa4>)
 8002368:	799b      	ldrb	r3, [r3, #6]
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fcda 	bl	8003d24 <BCD2DEC>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <ds3231_ReadTime+0xc4>)
 8002376:	701a      	strb	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200001d0 	.word	0x200001d0
 8002384:	20000214 	.word	0x20000214
 8002388:	200001c8 	.word	0x200001c8
 800238c:	200001ca 	.word	0x200001ca
 8002390:	200001cd 	.word	0x200001cd
 8002394:	200001cc 	.word	0x200001cc
 8002398:	200001cb 	.word	0x200001cb
 800239c:	200001ce 	.word	0x200001ce
 80023a0:	200001c9 	.word	0x200001c9

080023a4 <LCD_WR_DATA>:
#define LGRAY 			 0XC618

#define LGRAYBLUE        0XA651
#define LBBLUE           0X2B12

static inline void LCD_WR_DATA(uint16_t data) { LCD->LCD_RAM = data; }
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <LCD_WR_DATA+0x1c>)
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	8053      	strh	r3, [r2, #2]
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	600ffffe 	.word	0x600ffffe

080023c4 <LCD_RD_DATA>:
static inline uint16_t LCD_RD_DATA(void) 
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <LCD_RD_DATA+0x20>)
 80023cc:	885b      	ldrh	r3, [r3, #2]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	b29b      	uxth	r3, r3
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	600ffffe 	.word	0x600ffffe

080023e8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <LCD_WR_REG+0x1c>)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	8013      	strh	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	600ffffe 	.word	0x600ffffe

08002408 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4623      	mov	r3, r4
 8002418:	80fb      	strh	r3, [r7, #6]
 800241a:	4603      	mov	r3, r0
 800241c:	80bb      	strh	r3, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	807b      	strh	r3, [r7, #2]
 8002422:	4613      	mov	r3, r2
 8002424:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002426:	202a      	movs	r0, #42	; 0x2a
 8002428:	f7ff ffde 	bl	80023e8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29b      	uxth	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ffb6 	bl	80023a4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	b29b      	uxth	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ffb0 	bl	80023a4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ffaa 	bl	80023a4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	b29b      	uxth	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ffa4 	bl	80023a4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800245c:	202b      	movs	r0, #43	; 0x2b
 800245e:	f7ff ffc3 	bl	80023e8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002462:	88bb      	ldrh	r3, [r7, #4]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff9b 	bl	80023a4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800246e:	88bb      	ldrh	r3, [r7, #4]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	b29b      	uxth	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff95 	bl	80023a4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800247a:	883b      	ldrh	r3, [r7, #0]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b29b      	uxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff8f 	bl	80023a4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002486:	883b      	ldrh	r3, [r7, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff89 	bl	80023a4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002492:	202c      	movs	r0, #44	; 0x2c
 8002494:	f7ff ffa8 	bl	80023e8 <LCD_WR_REG>
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bd90      	pop	{r4, r7, pc}

080024a0 <lcd_Clear>:
	return (((r >> 11) << 11) | ((g >> 10) << 5) | (b >> 11));
}


void lcd_Clear(uint16_t color)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	// uint8_t buffer[2];
	// buffer[0] = color >> 8;
	// buffer[1] = color;
	lcd_AddressSet(0, 0, lcddev.width - 1, lcddev.height - 1);
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <lcd_Clear+0x60>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <lcd_Clear+0x60>)
 80024b4:	885b      	ldrh	r3, [r3, #2]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2100      	movs	r1, #0
 80024bc:	2000      	movs	r0, #0
 80024be:	f7ff ffa3 	bl	8002408 <lcd_AddressSet>
	for(i = 0; i < lcddev.width; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	81fb      	strh	r3, [r7, #14]
 80024c6:	e011      	b.n	80024ec <lcd_Clear+0x4c>
	{
		for(j=0; j < lcddev.height; j++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	81bb      	strh	r3, [r7, #12]
 80024cc:	e006      	b.n	80024dc <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff67 	bl	80023a4 <LCD_WR_DATA>
		for(j=0; j < lcddev.height; j++)
 80024d6:	89bb      	ldrh	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	81bb      	strh	r3, [r7, #12]
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <lcd_Clear+0x60>)
 80024de:	885b      	ldrh	r3, [r3, #2]
 80024e0:	89ba      	ldrh	r2, [r7, #12]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3f3      	bcc.n	80024ce <lcd_Clear+0x2e>
	for(i = 0; i < lcddev.width; i++)
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	3301      	adds	r3, #1
 80024ea:	81fb      	strh	r3, [r7, #14]
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <lcd_Clear+0x60>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	89fa      	ldrh	r2, [r7, #14]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3e8      	bcc.n	80024c8 <lcd_Clear+0x28>
			// sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200001d8 	.word	0x200001d8

08002504 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x, uint16_t y, uint16_t color) // 1 điểm ảnh
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
 800250e:	460b      	mov	r3, r1
 8002510:	80bb      	strh	r3, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x, y, x, y);
 8002516:	88bb      	ldrh	r3, [r7, #4]
 8002518:	88fa      	ldrh	r2, [r7, #6]
 800251a:	88b9      	ldrh	r1, [r7, #4]
 800251c:	88f8      	ldrh	r0, [r7, #6]
 800251e:	f7ff ff73 	bl	8002408 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff3d 	bl	80023a4 <LCD_WR_DATA>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	4604      	mov	r4, r0
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4623      	mov	r3, r4
 8002544:	80fb      	strh	r3, [r7, #6]
 8002546:	4603      	mov	r3, r0
 8002548:	80bb      	strh	r3, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	70fb      	strb	r3, [r7, #3]
 800254e:	4613      	mov	r3, r2
 8002550:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8002552:	2300      	movs	r3, #0
 8002554:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800255a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4413      	add	r3, r2
 800257e:	b29a      	uxth	r2, r3
 8002580:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002584:	b29b      	uxth	r3, r3
 8002586:	fb12 f303 	smulbb	r3, r2, r3
 800258a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	3b20      	subs	r3, #32
 8002590:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	b29a      	uxth	r2, r3
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	4413      	add	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29c      	uxth	r4, r3
 80025a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	88bb      	ldrh	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	88b9      	ldrh	r1, [r7, #4]
 80025b2:	88f8      	ldrh	r0, [r7, #6]
 80025b4:	4622      	mov	r2, r4
 80025b6:	f7ff ff27 	bl	8002408 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	827b      	strh	r3, [r7, #18]
 80025be:	e07a      	b.n	80026b6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80025c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	d028      	beq.n	800261a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 80025c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d108      	bne.n	80025e2 <lcd_ShowChar+0xae>
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	8a7b      	ldrh	r3, [r7, #18]
 80025d4:	493c      	ldr	r1, [pc, #240]	; (80026c8 <lcd_ShowChar+0x194>)
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	440a      	add	r2, r1
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	75fb      	strb	r3, [r7, #23]
 80025e0:	e01b      	b.n	800261a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 80025e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025e6:	2b18      	cmp	r3, #24
 80025e8:	d10b      	bne.n	8002602 <lcd_ShowChar+0xce>
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	8a79      	ldrh	r1, [r7, #18]
 80025ee:	4837      	ldr	r0, [pc, #220]	; (80026cc <lcd_ShowChar+0x198>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4403      	add	r3, r0
 80025fa:	440b      	add	r3, r1
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	75fb      	strb	r3, [r7, #23]
 8002600:	e00b      	b.n	800261a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8002602:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002606:	2b20      	cmp	r3, #32
 8002608:	d15a      	bne.n	80026c0 <lcd_ShowChar+0x18c>
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	8a7b      	ldrh	r3, [r7, #18]
 800260e:	4930      	ldr	r1, [pc, #192]	; (80026d0 <lcd_ShowChar+0x19c>)
 8002610:	0192      	lsls	r2, r2, #6
 8002612:	440a      	add	r2, r1
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800261a:	2300      	movs	r3, #0
 800261c:	75bb      	strb	r3, [r7, #22]
 800261e:	e044      	b.n	80026aa <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002620:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002624:	2b00      	cmp	r3, #0
 8002626:	d120      	bne.n	800266a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002628:	7dfa      	ldrb	r2, [r7, #23]
 800262a:	7dbb      	ldrb	r3, [r7, #22]
 800262c:	fa42 f303 	asr.w	r3, r2, r3
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <lcd_ShowChar+0x10e>
 8002638:	883b      	ldrh	r3, [r7, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff feb2 	bl	80023a4 <LCD_WR_DATA>
 8002640:	e003      	b.n	800264a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8002642:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fead 	bl	80023a4 <LCD_WR_DATA>
				m++;
 800264a:	7d7b      	ldrb	r3, [r7, #21]
 800264c:	3301      	adds	r3, #1
 800264e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8002650:	7d7b      	ldrb	r3, [r7, #21]
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	fbb3 f1f2 	udiv	r1, r3, r2
 8002658:	fb02 f201 	mul.w	r2, r2, r1
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11f      	bne.n	80026a4 <lcd_ShowChar+0x170>
				{
					m=0;
 8002664:	2300      	movs	r3, #0
 8002666:	757b      	strb	r3, [r7, #21]
					break;
 8002668:	e022      	b.n	80026b0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800266a:	7dfa      	ldrb	r2, [r7, #23]
 800266c:	7dbb      	ldrb	r3, [r7, #22]
 800266e:	fa42 f303 	asr.w	r3, r2, r3
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <lcd_ShowChar+0x152>
 800267a:	883a      	ldrh	r2, [r7, #0]
 800267c:	88b9      	ldrh	r1, [r7, #4]
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff3f 	bl	8002504 <lcd_DrawPoint>
				x++;
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	3301      	adds	r3, #1
 800268a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800268c:	88fa      	ldrh	r2, [r7, #6]
 800268e:	8a3b      	ldrh	r3, [r7, #16]
 8002690:	1ad2      	subs	r2, r2, r3
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	429a      	cmp	r2, r3
 8002696:	d105      	bne.n	80026a4 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002698:	8a3b      	ldrh	r3, [r7, #16]
 800269a:	80fb      	strh	r3, [r7, #6]
					y++;
 800269c:	88bb      	ldrh	r3, [r7, #4]
 800269e:	3301      	adds	r3, #1
 80026a0:	80bb      	strh	r3, [r7, #4]
					break;
 80026a2:	e005      	b.n	80026b0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80026a4:	7dbb      	ldrb	r3, [r7, #22]
 80026a6:	3301      	adds	r3, #1
 80026a8:	75bb      	strb	r3, [r7, #22]
 80026aa:	7dbb      	ldrb	r3, [r7, #22]
 80026ac:	2b07      	cmp	r3, #7
 80026ae:	d9b7      	bls.n	8002620 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80026b0:	8a7b      	ldrh	r3, [r7, #18]
 80026b2:	3301      	adds	r3, #1
 80026b4:	827b      	strh	r3, [r7, #18]
 80026b6:	8a7a      	ldrh	r2, [r7, #18]
 80026b8:	89bb      	ldrh	r3, [r7, #12]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d380      	bcc.n	80025c0 <lcd_ShowChar+0x8c>
 80026be:	e000      	b.n	80026c2 <lcd_ShowChar+0x18e>
		else return;
 80026c0:	bf00      	nop
				}
			}
		}
	}
}
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}
 80026c8:	08009200 	.word	0x08009200
 80026cc:	080097f0 	.word	0x080097f0
 80026d0:	0800a9c0 	.word	0x0800a9c0

080026d4 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	460a      	mov	r2, r1
 80026de:	71fb      	strb	r3, [r7, #7]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80026e4:	2301      	movs	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80026e8:	e004      	b.n	80026f4 <mypow+0x20>
 80026ea:	79fa      	ldrb	r2, [r7, #7]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	79bb      	ldrb	r3, [r7, #6]
 80026f6:	1e5a      	subs	r2, r3, #1
 80026f8:	71ba      	strb	r2, [r7, #6]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f5      	bne.n	80026ea <mypow+0x16>
	return result;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af04      	add	r7, sp, #16
 8002712:	4604      	mov	r4, r0
 8002714:	4608      	mov	r0, r1
 8002716:	4611      	mov	r1, r2
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	80fb      	strh	r3, [r7, #6]
 800271e:	4603      	mov	r3, r0
 8002720:	80bb      	strh	r3, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	807b      	strh	r3, [r7, #2]
 8002726:	4613      	mov	r3, r2
 8002728:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800272a:	2300      	movs	r3, #0
 800272c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800272e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e059      	b.n	80027f0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 800273c:	887c      	ldrh	r4, [r7, #2]
 800273e:	787a      	ldrb	r2, [r7, #1]
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4619      	mov	r1, r3
 800274c:	200a      	movs	r0, #10
 800274e:	f7ff ffc1 	bl	80026d4 <mypow>
 8002752:	4603      	mov	r3, r0
 8002754:	fbb4 f1f3 	udiv	r1, r4, r3
 8002758:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <lcd_ShowIntNum+0xf8>)
 800275a:	fba3 2301 	umull	r2, r3, r3, r1
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	1aca      	subs	r2, r1, r3
 800276a:	4613      	mov	r3, r2
 800276c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800276e:	7bbb      	ldrb	r3, [r7, #14]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d121      	bne.n	80027b8 <lcd_ShowIntNum+0xac>
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	787b      	ldrb	r3, [r7, #1]
 8002778:	3b01      	subs	r3, #1
 800277a:	429a      	cmp	r2, r3
 800277c:	da1c      	bge.n	80027b8 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800277e:	7b3b      	ldrb	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d117      	bne.n	80027b4 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	b29a      	uxth	r2, r3
 8002788:	7b7b      	ldrb	r3, [r7, #13]
 800278a:	b29b      	uxth	r3, r3
 800278c:	fb12 f303 	smulbb	r3, r2, r3
 8002790:	b29a      	uxth	r2, r3
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	4413      	add	r3, r2
 8002796:	b298      	uxth	r0, r3
 8002798:	8c3a      	ldrh	r2, [r7, #32]
 800279a:	88b9      	ldrh	r1, [r7, #4]
 800279c:	2300      	movs	r3, #0
 800279e:	9302      	str	r3, [sp, #8]
 80027a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	2220      	movs	r2, #32
 80027ae:	f7ff fec1 	bl	8002534 <lcd_ShowChar>
				continue;
 80027b2:	e01a      	b.n	80027ea <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	7b7b      	ldrb	r3, [r7, #13]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	fb12 f303 	smulbb	r3, r2, r3
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	4413      	add	r3, r2
 80027ca:	b298      	uxth	r0, r3
 80027cc:	7b3b      	ldrb	r3, [r7, #12]
 80027ce:	3330      	adds	r3, #48	; 0x30
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	8c3c      	ldrh	r4, [r7, #32]
 80027d4:	88b9      	ldrh	r1, [r7, #4]
 80027d6:	2300      	movs	r3, #0
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4623      	mov	r3, r4
 80027e6:	f7ff fea5 	bl	8002534 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	3301      	adds	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	787b      	ldrb	r3, [r7, #1]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d3a1      	bcc.n	800273c <lcd_ShowIntNum+0x30>
	}
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	bf00      	nop
 8002804:	cccccccd 	.word	0xcccccccd

08002808 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <lcd_SetDir+0x44>)
 8002824:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002828:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <lcd_SetDir+0x44>)
 800282c:	22f0      	movs	r2, #240	; 0xf0
 800282e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002830:	e006      	b.n	8002840 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <lcd_SetDir+0x44>)
 8002834:	22f0      	movs	r2, #240	; 0xf0
 8002836:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <lcd_SetDir+0x44>)
 800283a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800283e:	805a      	strh	r2, [r3, #2]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	200001d8 	.word	0x200001d8

08002850 <lcd_init>:


void lcd_init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002854:	2200      	movs	r2, #0
 8002856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800285a:	48aa      	ldr	r0, [pc, #680]	; (8002b04 <lcd_init+0x2b4>)
 800285c:	f001 fea0 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002864:	f001 fb38 	bl	8003ed8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002868:	2201      	movs	r2, #1
 800286a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800286e:	48a5      	ldr	r0, [pc, #660]	; (8002b04 <lcd_init+0x2b4>)
 8002870:	f001 fe96 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002878:	f001 fb2e 	bl	8003ed8 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 800287c:	2000      	movs	r0, #0
 800287e:	f7ff ffc3 	bl	8002808 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002882:	20d3      	movs	r0, #211	; 0xd3
 8002884:	f7ff fdb0 	bl	80023e8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002888:	f7ff fd9c 	bl	80023c4 <LCD_RD_DATA>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b9d      	ldr	r3, [pc, #628]	; (8002b08 <lcd_init+0x2b8>)
 8002892:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002894:	f7ff fd96 	bl	80023c4 <LCD_RD_DATA>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	4b9a      	ldr	r3, [pc, #616]	; (8002b08 <lcd_init+0x2b8>)
 800289e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80028a0:	f7ff fd90 	bl	80023c4 <LCD_RD_DATA>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b97      	ldr	r3, [pc, #604]	; (8002b08 <lcd_init+0x2b8>)
 80028aa:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80028ac:	4b96      	ldr	r3, [pc, #600]	; (8002b08 <lcd_init+0x2b8>)
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b94      	ldr	r3, [pc, #592]	; (8002b08 <lcd_init+0x2b8>)
 80028b6:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80028b8:	f7ff fd84 	bl	80023c4 <LCD_RD_DATA>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b91      	ldr	r3, [pc, #580]	; (8002b08 <lcd_init+0x2b8>)
 80028c2:	889b      	ldrh	r3, [r3, #4]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b8f      	ldr	r3, [pc, #572]	; (8002b08 <lcd_init+0x2b8>)
 80028ca:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80028cc:	20cf      	movs	r0, #207	; 0xcf
 80028ce:	f7ff fd8b 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff fd66 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80028d8:	20c1      	movs	r0, #193	; 0xc1
 80028da:	f7ff fd63 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80028de:	2030      	movs	r0, #48	; 0x30
 80028e0:	f7ff fd60 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80028e4:	20ed      	movs	r0, #237	; 0xed
 80028e6:	f7ff fd7f 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80028ea:	2064      	movs	r0, #100	; 0x64
 80028ec:	f7ff fd5a 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80028f0:	2003      	movs	r0, #3
 80028f2:	f7ff fd57 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80028f6:	2012      	movs	r0, #18
 80028f8:	f7ff fd54 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80028fc:	2081      	movs	r0, #129	; 0x81
 80028fe:	f7ff fd51 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002902:	20e8      	movs	r0, #232	; 0xe8
 8002904:	f7ff fd70 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002908:	2085      	movs	r0, #133	; 0x85
 800290a:	f7ff fd4b 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800290e:	2010      	movs	r0, #16
 8002910:	f7ff fd48 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002914:	207a      	movs	r0, #122	; 0x7a
 8002916:	f7ff fd45 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800291a:	20cb      	movs	r0, #203	; 0xcb
 800291c:	f7ff fd64 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002920:	2039      	movs	r0, #57	; 0x39
 8002922:	f7ff fd3f 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	f7ff fd3c 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800292c:	2000      	movs	r0, #0
 800292e:	f7ff fd39 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002932:	2034      	movs	r0, #52	; 0x34
 8002934:	f7ff fd36 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002938:	2002      	movs	r0, #2
 800293a:	f7ff fd33 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800293e:	20f7      	movs	r0, #247	; 0xf7
 8002940:	f7ff fd52 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002944:	2020      	movs	r0, #32
 8002946:	f7ff fd2d 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800294a:	20ea      	movs	r0, #234	; 0xea
 800294c:	f7ff fd4c 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002950:	2000      	movs	r0, #0
 8002952:	f7ff fd27 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff fd24 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800295c:	20c0      	movs	r0, #192	; 0xc0
 800295e:	f7ff fd43 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002962:	201b      	movs	r0, #27
 8002964:	f7ff fd1e 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002968:	20c1      	movs	r0, #193	; 0xc1
 800296a:	f7ff fd3d 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff fd18 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002974:	20c5      	movs	r0, #197	; 0xc5
 8002976:	f7ff fd37 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800297a:	2030      	movs	r0, #48	; 0x30
 800297c:	f7ff fd12 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002980:	2030      	movs	r0, #48	; 0x30
 8002982:	f7ff fd0f 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002986:	20c7      	movs	r0, #199	; 0xc7
 8002988:	f7ff fd2e 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800298c:	20b7      	movs	r0, #183	; 0xb7
 800298e:	f7ff fd09 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002992:	2036      	movs	r0, #54	; 0x36
 8002994:	f7ff fd28 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002998:	2008      	movs	r0, #8
 800299a:	f7ff fd03 	bl	80023a4 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800299e:	203a      	movs	r0, #58	; 0x3a
 80029a0:	f7ff fd22 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80029a4:	2055      	movs	r0, #85	; 0x55
 80029a6:	f7ff fcfd 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80029aa:	20b1      	movs	r0, #177	; 0xb1
 80029ac:	f7ff fd1c 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7ff fcf7 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80029b6:	201a      	movs	r0, #26
 80029b8:	f7ff fcf4 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80029bc:	20b6      	movs	r0, #182	; 0xb6
 80029be:	f7ff fd13 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80029c2:	200a      	movs	r0, #10
 80029c4:	f7ff fcee 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80029c8:	20a2      	movs	r0, #162	; 0xa2
 80029ca:	f7ff fceb 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80029ce:	20f2      	movs	r0, #242	; 0xf2
 80029d0:	f7ff fd0a 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7ff fce5 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80029da:	2026      	movs	r0, #38	; 0x26
 80029dc:	f7ff fd04 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff fcdf 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80029e6:	20e0      	movs	r0, #224	; 0xe0
 80029e8:	f7ff fcfe 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80029ec:	200f      	movs	r0, #15
 80029ee:	f7ff fcd9 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80029f2:	202a      	movs	r0, #42	; 0x2a
 80029f4:	f7ff fcd6 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80029f8:	2028      	movs	r0, #40	; 0x28
 80029fa:	f7ff fcd3 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80029fe:	2008      	movs	r0, #8
 8002a00:	f7ff fcd0 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002a04:	200e      	movs	r0, #14
 8002a06:	f7ff fccd 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002a0a:	2008      	movs	r0, #8
 8002a0c:	f7ff fcca 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002a10:	2054      	movs	r0, #84	; 0x54
 8002a12:	f7ff fcc7 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002a16:	20a9      	movs	r0, #169	; 0xa9
 8002a18:	f7ff fcc4 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002a1c:	2043      	movs	r0, #67	; 0x43
 8002a1e:	f7ff fcc1 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002a22:	200a      	movs	r0, #10
 8002a24:	f7ff fcbe 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002a28:	200f      	movs	r0, #15
 8002a2a:	f7ff fcbb 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7ff fcb8 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7ff fcb5 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff fcb2 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fcaf 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002a46:	20e1      	movs	r0, #225	; 0xe1
 8002a48:	f7ff fcce 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7ff fca9 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002a52:	2015      	movs	r0, #21
 8002a54:	f7ff fca6 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002a58:	2017      	movs	r0, #23
 8002a5a:	f7ff fca3 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002a5e:	2007      	movs	r0, #7
 8002a60:	f7ff fca0 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002a64:	2011      	movs	r0, #17
 8002a66:	f7ff fc9d 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002a6a:	2006      	movs	r0, #6
 8002a6c:	f7ff fc9a 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002a70:	202b      	movs	r0, #43	; 0x2b
 8002a72:	f7ff fc97 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002a76:	2056      	movs	r0, #86	; 0x56
 8002a78:	f7ff fc94 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002a7c:	203c      	movs	r0, #60	; 0x3c
 8002a7e:	f7ff fc91 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002a82:	2005      	movs	r0, #5
 8002a84:	f7ff fc8e 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002a88:	2010      	movs	r0, #16
 8002a8a:	f7ff fc8b 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002a8e:	200f      	movs	r0, #15
 8002a90:	f7ff fc88 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002a94:	203f      	movs	r0, #63	; 0x3f
 8002a96:	f7ff fc85 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002a9a:	203f      	movs	r0, #63	; 0x3f
 8002a9c:	f7ff fc82 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002aa0:	200f      	movs	r0, #15
 8002aa2:	f7ff fc7f 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002aa6:	202b      	movs	r0, #43	; 0x2b
 8002aa8:	f7ff fc9e 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff fc79 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7ff fc76 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f7ff fc73 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002abe:	203f      	movs	r0, #63	; 0x3f
 8002ac0:	f7ff fc70 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002ac4:	202a      	movs	r0, #42	; 0x2a
 8002ac6:	f7ff fc8f 	bl	80023e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7ff fc6a 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7ff fc67 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7ff fc64 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002adc:	20ef      	movs	r0, #239	; 0xef
 8002ade:	f7ff fc61 	bl	80023a4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002ae2:	2011      	movs	r0, #17
 8002ae4:	f7ff fc80 	bl	80023e8 <LCD_WR_REG>
	HAL_Delay(120);
 8002ae8:	2078      	movs	r0, #120	; 0x78
 8002aea:	f001 f9f5 	bl	8003ed8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002aee:	2029      	movs	r0, #41	; 0x29
 8002af0:	f7ff fc7a 	bl	80023e8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002af4:	2201      	movs	r2, #1
 8002af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002afa:	4804      	ldr	r0, [pc, #16]	; (8002b0c <lcd_init+0x2bc>)
 8002afc:	f001 fd50 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40020800 	.word	0x40020800
 8002b08:	200001d8 	.word	0x200001d8
 8002b0c:	40020000 	.word	0x40020000

08002b10 <_draw_circle_8>:

void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	b298      	uxth	r0, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	8b3a      	ldrh	r2, [r7, #24]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7ff fce3 	bl	8002504 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	b298      	uxth	r0, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	8b3a      	ldrh	r2, [r7, #24]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7ff fcd3 	bl	8002504 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	b298      	uxth	r0, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	8b3a      	ldrh	r2, [r7, #24]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7ff fcc3 	bl	8002504 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	b298      	uxth	r0, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	8b3a      	ldrh	r2, [r7, #24]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7ff fcb3 	bl	8002504 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	b298      	uxth	r0, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	8b3a      	ldrh	r2, [r7, #24]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7ff fca3 	bl	8002504 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	8b3a      	ldrh	r2, [r7, #24]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7ff fc93 	bl	8002504 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	b298      	uxth	r0, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	8b3a      	ldrh	r2, [r7, #24]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7ff fc83 	bl	8002504 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	b298      	uxth	r0, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	8b3a      	ldrh	r2, [r7, #24]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f7ff fc73 	bl	8002504 <lcd_DrawPoint>
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08a      	sub	sp, #40	; 0x28
 8002c2a:	af02      	add	r7, sp, #8
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	f1c3 0303 	rsb	r3, r3, #3
 8002c46:	613b      	str	r3, [r7, #16]


	if (fill)
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d04f      	beq.n	8002cee <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002c4e:	e029      	b.n	8002ca4 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e00a      	b.n	8002c6c <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff ff55 	bl	8002b10 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	ddf0      	ble.n	8002c56 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	da06      	bge.n	8002c88 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	009a      	lsls	r2, r3, #2
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	3306      	adds	r3, #6
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	e00a      	b.n	8002c9e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	009a      	lsls	r2, r3, #2
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	330a      	adds	r3, #10
 8002c96:	613b      	str	r3, [r7, #16]
				y--;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	ddd1      	ble.n	8002c50 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002cac:	e023      	b.n	8002cf6 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff ff29 	bl	8002b10 <_draw_circle_8>
			if (d < 0) {
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da06      	bge.n	8002cd2 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	3306      	adds	r3, #6
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	e00a      	b.n	8002ce8 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	009a      	lsls	r2, r3, #2
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	330a      	adds	r3, #10
 8002ce0:	613b      	str	r3, [r7, #16]
				y--;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
			x++;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	3301      	adds	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	dddb      	ble.n	8002cae <lcd_DrawCircle+0x88>
}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b08b      	sub	sp, #44	; 0x2c
 8002d04:	af04      	add	r7, sp, #16
 8002d06:	60ba      	str	r2, [r7, #8]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	81fb      	strh	r3, [r7, #14]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	81bb      	strh	r3, [r7, #12]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002d16:	89fb      	ldrh	r3, [r7, #14]
 8002d18:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz=0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002d1e:	e048      	b.n	8002db2 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d145      	bne.n	8002db2 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002d26:	89fa      	ldrh	r2, [r7, #14]
 8002d28:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <lcd_ShowStr+0xc4>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	1acb      	subs	r3, r1, r3
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	dc3f      	bgt.n	8002dbc <lcd_ShowStr+0xbc>
 8002d3c:	89ba      	ldrh	r2, [r7, #12]
 8002d3e:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <lcd_ShowStr+0xc4>)
 8002d40:	885b      	ldrh	r3, [r3, #2]
 8002d42:	4619      	mov	r1, r3
 8002d44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d48:	1acb      	subs	r3, r1, r3
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dc36      	bgt.n	8002dbc <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d902      	bls.n	8002d5c <lcd_ShowStr+0x5c>
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
 8002d5a:	e02a      	b.n	8002db2 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b0d      	cmp	r3, #13
 8002d62:	d10b      	bne.n	8002d7c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002d64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	89bb      	ldrh	r3, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002d70:	8abb      	ldrh	r3, [r7, #20]
 8002d72:	81fb      	strh	r3, [r7, #14]
					str++;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	e017      	b.n	8002dac <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	88fc      	ldrh	r4, [r7, #6]
 8002d82:	89b9      	ldrh	r1, [r7, #12]
 8002d84:	89f8      	ldrh	r0, [r7, #14]
 8002d86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d8a:	9302      	str	r3, [sp, #8]
 8002d8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4623      	mov	r3, r4
 8002d98:	f7ff fbcc 	bl	8002534 <lcd_ShowChar>
					x+=sizey/2;
 8002d9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	89fb      	ldrh	r3, [r7, #14]
 8002da8:	4413      	add	r3, r2
 8002daa:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3301      	adds	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1b2      	bne.n	8002d20 <lcd_ShowStr+0x20>
 8002dba:	e000      	b.n	8002dbe <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002dbc:	bf00      	nop
			}
		}
	}
}
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	200001d8 	.word	0x200001d8

08002dc8 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2140      	movs	r1, #64	; 0x40
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <led7_init+0x14>)
 8002dd2:	f001 fbe5 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40021800 	.word	0x40021800

08002de0 <led7_Scan>:

void led7_Scan(){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002de4:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <led7_Scan+0x104>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <led7_Scan+0x104>)
 8002dee:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <led7_Scan+0x108>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3d      	ldr	r2, [pc, #244]	; (8002eec <led7_Scan+0x10c>)
 8002df6:	5cd3      	ldrb	r3, [r2, r3]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	b21a      	sxth	r2, r3
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <led7_Scan+0x104>)
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	4313      	orrs	r3, r2
 8002e04:	b21b      	sxth	r3, r3
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <led7_Scan+0x104>)
 8002e0a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <led7_Scan+0x108>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d847      	bhi.n	8002ea4 <led7_Scan+0xc4>
 8002e14:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <led7_Scan+0x3c>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e4b 	.word	0x08002e4b
 8002e24:	08002e69 	.word	0x08002e69
 8002e28:	08002e87 	.word	0x08002e87
	case 0:
		spi_buffer |= 0x00b0;
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <led7_Scan+0x104>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <led7_Scan+0x104>)
 8002e38:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002e3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <led7_Scan+0x104>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <led7_Scan+0x104>)
 8002e46:	801a      	strh	r2, [r3, #0]
		break;
 8002e48:	e02d      	b.n	8002ea6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <led7_Scan+0x104>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <led7_Scan+0x104>)
 8002e56:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <led7_Scan+0x104>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	f023 0320 	bic.w	r3, r3, #32
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <led7_Scan+0x104>)
 8002e64:	801a      	strh	r2, [r3, #0]
		break;
 8002e66:	e01e      	b.n	8002ea6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <led7_Scan+0x104>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <led7_Scan+0x104>)
 8002e74:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <led7_Scan+0x104>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f023 0310 	bic.w	r3, r3, #16
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <led7_Scan+0x104>)
 8002e82:	801a      	strh	r2, [r3, #0]
		break;
 8002e84:	e00f      	b.n	8002ea6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <led7_Scan+0x104>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <led7_Scan+0x104>)
 8002e92:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <led7_Scan+0x104>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <led7_Scan+0x104>)
 8002ea0:	801a      	strh	r2, [r3, #0]
		break;
 8002ea2:	e000      	b.n	8002ea6 <led7_Scan+0xc6>
	default:
		break;
 8002ea4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <led7_Scan+0x108>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	425a      	negs	r2, r3
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	f002 0203 	and.w	r2, r2, #3
 8002eb6:	bf58      	it	pl
 8002eb8:	4253      	negpl	r3, r2
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <led7_Scan+0x108>)
 8002ebc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2140      	movs	r1, #64	; 0x40
 8002ec2:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <led7_Scan+0x110>)
 8002ec4:	f001 fb6c 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002ec8:	2301      	movs	r3, #1
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4905      	ldr	r1, [pc, #20]	; (8002ee4 <led7_Scan+0x104>)
 8002ece:	4809      	ldr	r0, [pc, #36]	; (8002ef4 <led7_Scan+0x114>)
 8002ed0:	f003 f93f 	bl	8006152 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2140      	movs	r1, #64	; 0x40
 8002ed8:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <led7_Scan+0x110>)
 8002eda:	f001 fb61 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000004 	.word	0x20000004
 8002ee8:	20000098 	.word	0x20000098
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	40021800 	.word	0x40021800
 8002ef4:	200002fc 	.word	0x200002fc

08002ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002efc:	f000 ff7a 	bl	8003df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f00:	f000 f848 	bl	8002f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f04:	f000 f98a 	bl	800321c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002f08:	f000 f95e 	bl	80031c8 <MX_USART1_UART_Init>
  MX_FSMC_Init();
 8002f0c:	f000 fa70 	bl	80033f0 <MX_FSMC_Init>
  MX_TIM2_Init();
 8002f10:	f000 f90e 	bl	8003130 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002f14:	f000 f8d6 	bl	80030c4 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002f18:	f000 f8a6 	bl	8003068 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();  // Initialize all service
 8002f1c:	f000 fae2 	bl	80034e4 <system_init>

  setTimer2(20);          // for button scan
 8002f20:	2014      	movs	r0, #20
 8002f22:	f000 fb21 	bl	8003568 <setTimer2>
  setClockTimer(PERIOD);     // update clock every 500 ms
 8002f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f2a:	f000 fb55 	bl	80035d8 <setClockTimer>
  setBlinkLCDTimer(250);  // blink LCD with frequency 2 Hz => Time period = 250 ms
 8002f2e:	20fa      	movs	r0, #250	; 0xfa
 8002f30:	f000 fb36 	bl	80035a0 <setBlinkLCDTimer>

  lcd_Clear(BLACK);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff fab3 	bl	80024a0 <lcd_Clear>
  setStartChar('!');
 8002f3a:	2021      	movs	r0, #33	; 0x21
 8002f3c:	f7fd fc1c 	bl	8000778 <setStartChar>
  setStopChar('#');
 8002f40:	2023      	movs	r0, #35	; 0x23
 8002f42:	f7fd fc29 	bl	8000798 <setStopChar>
  uart_Rs232SendString((uint8_t *)"Hello from STM32\n");
 8002f46:	4812      	ldr	r0, [pc, #72]	; (8002f90 <main+0x98>)
 8002f48:	f000 fe32 	bl	8003bb0 <uart_Rs232SendString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // displayTime();
    if (getBufSize() == 10) {
 8002f4c:	f7fd fc08 	bl	8000760 <getBufSize>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b0a      	cmp	r3, #10
 8002f54:	d106      	bne.n	8002f64 <main+0x6c>
      uart_Rs232SendBytes(flushBuffer(), 10);
 8002f56:	f7fd fbc7 	bl	80006e8 <flushBuffer>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	210a      	movs	r1, #10
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fe40 	bl	8003be4 <uart_Rs232SendBytes>
    }

    if (isClock()) {
 8002f64:	f000 fb68 	bl	8003638 <isClock>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <main+0x7a>
      clockFSM();
 8002f6e:	f7fd fe81 	bl	8000c74 <clockFSM>
    }

    if (isBlinkLCD()) {
 8002f72:	f000 fb4d 	bl	8003610 <isBlinkLCD>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <main+0x88>
      blinkTimeFSM();
 8002f7c:	f7fe f9f4 	bl	8001368 <blinkTimeFSM>
    }

    if (isFlagTimer2()) {
 8002f80:	f000 fb6e 	bl	8003660 <isFlagTimer2>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0e0      	beq.n	8002f4c <main+0x54>
      button_Scan();
 8002f8a:	f7fd fca3 	bl	80008d4 <button_Scan>
    if (getBufSize() == 10) {
 8002f8e:	e7dd      	b.n	8002f4c <main+0x54>
 8002f90:	080091cc 	.word	0x080091cc

08002f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b094      	sub	sp, #80	; 0x50
 8002f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f9a:	f107 0320 	add.w	r3, r7, #32
 8002f9e:	2230      	movs	r2, #48	; 0x30
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 fb90 	bl	80086c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <SystemClock_Config+0xcc>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	4a27      	ldr	r2, [pc, #156]	; (8003060 <SystemClock_Config+0xcc>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <SystemClock_Config+0xcc>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <SystemClock_Config+0xd0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <SystemClock_Config+0xd0>)
 8002fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <SystemClock_Config+0xd0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003000:	2300      	movs	r3, #0
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003004:	2308      	movs	r3, #8
 8003006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003008:	23a8      	movs	r3, #168	; 0xa8
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800300c:	2302      	movs	r3, #2
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003010:	2304      	movs	r3, #4
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003014:	f107 0320 	add.w	r3, r7, #32
 8003018:	4618      	mov	r0, r3
 800301a:	f002 fbc9 	bl	80057b0 <HAL_RCC_OscConfig>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003024:	f000 fa82 	bl	800352c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003028:	230f      	movs	r3, #15
 800302a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800302c:	2302      	movs	r3, #2
 800302e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800303a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800303e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003040:	f107 030c 	add.w	r3, r7, #12
 8003044:	2105      	movs	r1, #5
 8003046:	4618      	mov	r0, r3
 8003048:	f002 fe2a 	bl	8005ca0 <HAL_RCC_ClockConfig>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003052:	f000 fa6b 	bl	800352c <Error_Handler>
  }
}
 8003056:	bf00      	nop
 8003058:	3750      	adds	r7, #80	; 0x50
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000

08003068 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <MX_I2C1_Init+0x50>)
 800306e:	4a13      	ldr	r2, [pc, #76]	; (80030bc <MX_I2C1_Init+0x54>)
 8003070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_I2C1_Init+0x50>)
 8003074:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <MX_I2C1_Init+0x58>)
 8003076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <MX_I2C1_Init+0x50>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <MX_I2C1_Init+0x50>)
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_I2C1_Init+0x50>)
 8003086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800308a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <MX_I2C1_Init+0x50>)
 800308e:	2200      	movs	r2, #0
 8003090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_I2C1_Init+0x50>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <MX_I2C1_Init+0x50>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_I2C1_Init+0x50>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_I2C1_Init+0x50>)
 80030a6:	f001 fa95 	bl	80045d4 <HAL_I2C_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030b0:	f000 fa3c 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000214 	.word	0x20000214
 80030bc:	40005400 	.word	0x40005400
 80030c0:	000186a0 	.word	0x000186a0

080030c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <MX_SPI1_Init+0x64>)
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <MX_SPI1_Init+0x68>)
 80030cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <MX_SPI1_Init+0x64>)
 80030d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <MX_SPI1_Init+0x64>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <MX_SPI1_Init+0x64>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <MX_SPI1_Init+0x64>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <MX_SPI1_Init+0x64>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <MX_SPI1_Init+0x64>)
 80030f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030f6:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <MX_SPI1_Init+0x64>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <MX_SPI1_Init+0x64>)
 80030fe:	2200      	movs	r2, #0
 8003100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <MX_SPI1_Init+0x64>)
 8003104:	2200      	movs	r2, #0
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <MX_SPI1_Init+0x64>)
 800310a:	2200      	movs	r2, #0
 800310c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <MX_SPI1_Init+0x64>)
 8003110:	220a      	movs	r2, #10
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003114:	4804      	ldr	r0, [pc, #16]	; (8003128 <MX_SPI1_Init+0x64>)
 8003116:	f002 ff93 	bl	8006040 <HAL_SPI_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003120:	f000 fa04 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	200002fc 	.word	0x200002fc
 800312c:	40013000 	.word	0x40013000

08003130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003144:	463b      	mov	r3, r7
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <MX_TIM2_Init+0x94>)
 800314e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <MX_TIM2_Init+0x94>)
 8003156:	f240 3247 	movw	r2, #839	; 0x347
 800315a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <MX_TIM2_Init+0x94>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <MX_TIM2_Init+0x94>)
 8003164:	2263      	movs	r2, #99	; 0x63
 8003166:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <MX_TIM2_Init+0x94>)
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <MX_TIM2_Init+0x94>)
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003174:	4813      	ldr	r0, [pc, #76]	; (80031c4 <MX_TIM2_Init+0x94>)
 8003176:	f003 fd4f 	bl	8006c18 <HAL_TIM_Base_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003180:	f000 f9d4 	bl	800352c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800318a:	f107 0308 	add.w	r3, r7, #8
 800318e:	4619      	mov	r1, r3
 8003190:	480c      	ldr	r0, [pc, #48]	; (80031c4 <MX_TIM2_Init+0x94>)
 8003192:	f003 ff09 	bl	8006fa8 <HAL_TIM_ConfigClockSource>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800319c:	f000 f9c6 	bl	800352c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a0:	2300      	movs	r3, #0
 80031a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031a8:	463b      	mov	r3, r7
 80031aa:	4619      	mov	r1, r3
 80031ac:	4805      	ldr	r0, [pc, #20]	; (80031c4 <MX_TIM2_Init+0x94>)
 80031ae:	f004 f925 	bl	80073fc <HAL_TIMEx_MasterConfigSynchronization>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80031b8:	f000 f9b8 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031bc:	bf00      	nop
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000354 	.word	0x20000354

080031c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <MX_USART1_UART_Init+0x50>)
 80031d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031ee:	220c      	movs	r2, #12
 80031f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031fe:	4805      	ldr	r0, [pc, #20]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 8003200:	f004 f98c 	bl	800751c <HAL_UART_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800320a:	f000 f98f 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200002b8 	.word	0x200002b8
 8003218:	40011000 	.word	0x40011000

0800321c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08c      	sub	sp, #48	; 0x30
 8003220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003222:	f107 031c 	add.w	r3, r7, #28
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	60da      	str	r2, [r3, #12]
 8003230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a67      	ldr	r2, [pc, #412]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 800323c:	f043 0310 	orr.w	r3, r3, #16
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	4b5a      	ldr	r3, [pc, #360]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a59      	ldr	r2, [pc, #356]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003290:	f043 0308 	orr.w	r3, r3, #8
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 80032ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
 80032ce:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <MX_GPIO_Init+0x1bc>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	2170      	movs	r1, #112	; 0x70
 80032de:	483f      	ldr	r0, [pc, #252]	; (80033dc <MX_GPIO_Init+0x1c0>)
 80032e0:	f001 f95e 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80032e4:	2200      	movs	r2, #0
 80032e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ea:	483d      	ldr	r0, [pc, #244]	; (80033e0 <MX_GPIO_Init+0x1c4>)
 80032ec:	f001 f958 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2140      	movs	r1, #64	; 0x40
 80032f4:	483b      	ldr	r0, [pc, #236]	; (80033e4 <MX_GPIO_Init+0x1c8>)
 80032f6:	f001 f953 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003300:	4839      	ldr	r0, [pc, #228]	; (80033e8 <MX_GPIO_Init+0x1cc>)
 8003302:	f001 f94d 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8003306:	2200      	movs	r2, #0
 8003308:	2108      	movs	r1, #8
 800330a:	4838      	ldr	r0, [pc, #224]	; (80033ec <MX_GPIO_Init+0x1d0>)
 800330c:	f001 f948 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8003310:	2370      	movs	r3, #112	; 0x70
 8003312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003314:	2301      	movs	r3, #1
 8003316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	4619      	mov	r1, r3
 8003326:	482d      	ldr	r0, [pc, #180]	; (80033dc <MX_GPIO_Init+0x1c0>)
 8003328:	f000 ff9e 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_RES_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800332c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003332:	2301      	movs	r3, #1
 8003334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333a:	2300      	movs	r3, #0
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800333e:	f107 031c 	add.w	r3, r7, #28
 8003342:	4619      	mov	r1, r3
 8003344:	4826      	ldr	r0, [pc, #152]	; (80033e0 <MX_GPIO_Init+0x1c4>)
 8003346:	f000 ff8f 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X0_Pin INPUT_X1_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800334a:	23c0      	movs	r3, #192	; 0xc0
 800334c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	4619      	mov	r1, r3
 800335c:	4822      	ldr	r0, [pc, #136]	; (80033e8 <MX_GPIO_Init+0x1cc>)
 800335e:	f000 ff83 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8003362:	2330      	movs	r3, #48	; 0x30
 8003364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800336e:	f107 031c 	add.w	r3, r7, #28
 8003372:	4619      	mov	r1, r3
 8003374:	481a      	ldr	r0, [pc, #104]	; (80033e0 <MX_GPIO_Init+0x1c4>)
 8003376:	f000 ff77 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800337a:	2340      	movs	r3, #64	; 0x40
 800337c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337e:	2301      	movs	r3, #1
 8003380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	4619      	mov	r1, r3
 8003390:	4814      	ldr	r0, [pc, #80]	; (80033e4 <MX_GPIO_Init+0x1c8>)
 8003392:	f000 ff69 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8003396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339c:	2301      	movs	r3, #1
 800339e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80033a8:	f107 031c 	add.w	r3, r7, #28
 80033ac:	4619      	mov	r1, r3
 80033ae:	480e      	ldr	r0, [pc, #56]	; (80033e8 <MX_GPIO_Init+0x1cc>)
 80033b0:	f000 ff5a 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80033b4:	2308      	movs	r3, #8
 80033b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b8:	2301      	movs	r3, #1
 80033ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	4619      	mov	r1, r3
 80033ca:	4808      	ldr	r0, [pc, #32]	; (80033ec <MX_GPIO_Init+0x1d0>)
 80033cc:	f000 ff4c 	bl	8004268 <HAL_GPIO_Init>

}
 80033d0:	bf00      	nop
 80033d2:	3730      	adds	r7, #48	; 0x30
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40020800 	.word	0x40020800
 80033e4:	40021800 	.word	0x40021800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020c00 	.word	0x40020c00

080033f0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08e      	sub	sp, #56	; 0x38
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80033f6:	f107 031c 	add.w	r3, r7, #28
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	611a      	str	r2, [r3, #16]
 8003406:	615a      	str	r2, [r3, #20]
 8003408:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800340a:	463b      	mov	r3, r7
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
 8003418:	615a      	str	r2, [r3, #20]
 800341a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <MX_FSMC_Init+0xec>)
 800341e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003422:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <MX_FSMC_Init+0xec>)
 8003426:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <MX_FSMC_Init+0xf0>)
 8003428:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800342a:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <MX_FSMC_Init+0xec>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <MX_FSMC_Init+0xec>)
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003436:	4b29      	ldr	r3, [pc, #164]	; (80034dc <MX_FSMC_Init+0xec>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800343c:	4b27      	ldr	r3, [pc, #156]	; (80034dc <MX_FSMC_Init+0xec>)
 800343e:	2210      	movs	r2, #16
 8003440:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <MX_FSMC_Init+0xec>)
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003448:	4b24      	ldr	r3, [pc, #144]	; (80034dc <MX_FSMC_Init+0xec>)
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800344e:	4b23      	ldr	r3, [pc, #140]	; (80034dc <MX_FSMC_Init+0xec>)
 8003450:	2200      	movs	r2, #0
 8003452:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <MX_FSMC_Init+0xec>)
 8003456:	2200      	movs	r2, #0
 8003458:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <MX_FSMC_Init+0xec>)
 800345c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <MX_FSMC_Init+0xec>)
 8003464:	2200      	movs	r2, #0
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8003468:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <MX_FSMC_Init+0xec>)
 800346a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <MX_FSMC_Init+0xec>)
 8003472:	2200      	movs	r2, #0
 8003474:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003476:	4b19      	ldr	r3, [pc, #100]	; (80034dc <MX_FSMC_Init+0xec>)
 8003478:	2200      	movs	r2, #0
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800347c:	4b17      	ldr	r3, [pc, #92]	; (80034dc <MX_FSMC_Init+0xec>)
 800347e:	2200      	movs	r2, #0
 8003480:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8003482:	230f      	movs	r3, #15
 8003484:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8003486:	230f      	movs	r3, #15
 8003488:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800348a:	233c      	movs	r3, #60	; 0x3c
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8003492:	2310      	movs	r3, #16
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8003496:	2311      	movs	r3, #17
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800349a:	2300      	movs	r3, #0
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800349e:	2308      	movs	r3, #8
 80034a0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80034a2:	230f      	movs	r3, #15
 80034a4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80034a6:	2309      	movs	r3, #9
 80034a8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80034ae:	2310      	movs	r3, #16
 80034b0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80034b2:	2311      	movs	r3, #17
 80034b4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80034ba:	463a      	mov	r2, r7
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	4619      	mov	r1, r3
 80034c2:	4806      	ldr	r0, [pc, #24]	; (80034dc <MX_FSMC_Init+0xec>)
 80034c4:	f003 fb64 	bl	8006b90 <HAL_SRAM_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80034ce:	f000 f82d 	bl	800352c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80034d2:	bf00      	nop
 80034d4:	3738      	adds	r7, #56	; 0x38
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000268 	.word	0x20000268
 80034e0:	a0000104 	.word	0xa0000104

080034e4 <system_init>:
/**
 * @brief Innitialize all services of system
 * @param None
 * @retval None
 */
void system_init() {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  // Initialize GPIO
  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2120      	movs	r1, #32
 80034ec:	480e      	ldr	r0, [pc, #56]	; (8003528 <system_init+0x44>)
 80034ee:	f001 f857 	bl	80045a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	480c      	ldr	r0, [pc, #48]	; (8003528 <system_init+0x44>)
 80034f8:	f001 f852 	bl	80045a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2110      	movs	r1, #16
 8003500:	4809      	ldr	r0, [pc, #36]	; (8003528 <system_init+0x44>)
 8003502:	f001 f84d 	bl	80045a0 <HAL_GPIO_WritePin>

  uart_init_rs232();  // Initialize UART
 8003506:	f000 fb43 	bl	8003b90 <uart_init_rs232>
  timer_init();       // Initialize software timer
 800350a:	f000 f815 	bl	8003538 <timer_init>
  led7_init();        // Initialize leg 7 segment
 800350e:	f7ff fc5b 	bl	8002dc8 <led7_init>
  button_init();      // Initialize button
 8003512:	f7fd f9d3 	bl	80008bc <button_init>
  lcd_init();         // Initialize LCD monitor
 8003516:	f7ff f99b 	bl	8002850 <lcd_init>
  ds3231_init();      // Initialize IC RTC DS3231
 800351a:	f7fe fe79 	bl	8002210 <ds3231_init>
  clockInit();        // Initialize clock
 800351e:	f7fd fa45 	bl	80009ac <clockInit>
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000

0800352c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003530:	b672      	cpsid	i
}
 8003532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003534:	e7fe      	b.n	8003534 <Error_Handler+0x8>
	...

08003538 <timer_init>:
// Attribute for update clock state
uint8_t clock_flag;
uint16_t clock_total_tick;
uint16_t clock_counter;

void timer_init(){
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800353c:	4806      	ldr	r0, [pc, #24]	; (8003558 <timer_init+0x20>)
 800353e:	f003 fbbb 	bl	8006cb8 <HAL_TIM_Base_Start_IT>

	blinkLCD_flag = 0;
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <timer_init+0x24>)
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
	blinkLCD_total_tick = 0;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <timer_init+0x28>)
 800354a:	2200      	movs	r2, #0
 800354c:	801a      	strh	r2, [r3, #0]
	blinkLCD_counter = 0;
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <timer_init+0x2c>)
 8003550:	2200      	movs	r2, #0
 8003552:	801a      	strh	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000354 	.word	0x20000354
 800355c:	200003a6 	.word	0x200003a6
 8003560:	200003a4 	.word	0x200003a4
 8003564:	200003a2 	.word	0x200003a2

08003568 <setTimer2>:

// Function for set timer
void setTimer2(uint16_t duration){
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <setTimer2+0x2c>)
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <setTimer2+0x2c>)
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <setTimer2+0x30>)
 800357e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <setTimer2+0x34>)
 8003582:	2200      	movs	r2, #0
 8003584:	801a      	strh	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	200000a0 	.word	0x200000a0
 8003598:	2000009e 	.word	0x2000009e
 800359c:	2000009c 	.word	0x2000009c

080035a0 <setBlinkLCDTimer>:
 * @brief Set period for flag blink LCD
 * 
 * @param duration unit: ms
 */
void setBlinkLCDTimer(uint16_t duration)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
	blinkLCD_total_tick = duration / TIME_CYCLE;
 80035aa:	4a08      	ldr	r2, [pc, #32]	; (80035cc <setBlinkLCDTimer+0x2c>)
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	8013      	strh	r3, [r2, #0]
	blinkLCD_counter = blinkLCD_total_tick;
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <setBlinkLCDTimer+0x2c>)
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <setBlinkLCDTimer+0x30>)
 80035b6:	801a      	strh	r2, [r3, #0]
	blinkLCD_flag = 0;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <setBlinkLCDTimer+0x34>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	200003a4 	.word	0x200003a4
 80035d0:	200003a2 	.word	0x200003a2
 80035d4:	200003a6 	.word	0x200003a6

080035d8 <setClockTimer>:
 * @brief Set period for flag update clock state
 * 
 * @param duration unit: ms
 */
void setClockTimer(uint16_t duration)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
	clock_total_tick = duration / TIME_CYCLE;
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <setClockTimer+0x2c>)
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	8013      	strh	r3, [r2, #0]
	clock_counter = clock_total_tick;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <setClockTimer+0x2c>)
 80035ea:	881a      	ldrh	r2, [r3, #0]
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <setClockTimer+0x30>)
 80035ee:	801a      	strh	r2, [r3, #0]
	clock_flag = 0;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <setClockTimer+0x34>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	2000039e 	.word	0x2000039e
 8003608:	2000039c 	.word	0x2000039c
 800360c:	200003a0 	.word	0x200003a0

08003610 <isBlinkLCD>:
	}
	return 0;
}

uint8_t isBlinkLCD()
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
	if (blinkLCD_flag) {
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <isBlinkLCD+0x24>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <isBlinkLCD+0x16>
		blinkLCD_flag = 0;
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <isBlinkLCD+0x24>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
		return 1;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <isBlinkLCD+0x18>
	}
	return 0;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	200003a6 	.word	0x200003a6

08003638 <isClock>:

uint8_t isClock()
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	if (clock_flag) {
 800363c:	4b07      	ldr	r3, [pc, #28]	; (800365c <isClock+0x24>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <isClock+0x16>
		clock_flag = 0;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <isClock+0x24>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
		return 1;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <isClock+0x18>
	}
	return 0;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	200003a0 	.word	0x200003a0

08003660 <isFlagTimer2>:

uint8_t isFlagTimer2()
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
	if (flag_timer2) {
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <isFlagTimer2+0x24>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <isFlagTimer2+0x16>
		flag_timer2 = 0;
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <isFlagTimer2+0x24>)
 800366e:	2200      	movs	r2, #0
 8003670:	801a      	strh	r2, [r3, #0]
		return 1;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <isFlagTimer2+0x18>
	}
	return 0;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	2000009c 	.word	0x2000009c

08003688 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Callback for Timer Interrupt
 * 
 * @param htim 
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d155      	bne.n	8003746 <HAL_TIM_PeriodElapsedCallback+0xbe>
		if (timer2_counter > 0){
 800369a:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d010      	beq.n	80036c4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	4b29      	ldr	r3, [pc, #164]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80036ac:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 80036ae:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80036bc:	4b26      	ldr	r3, [pc, #152]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80036c2:	801a      	strh	r2, [r3, #0]
			}
		}

		if (timerModify_counter > 0){
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d010      	beq.n	80036ee <HAL_TIM_PeriodElapsedCallback+0x66>
			timerModify_counter--;
 80036cc:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80036d6:	801a      	strh	r2, [r3, #0]
			if (timerModify_counter == 0) {
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <HAL_TIM_PeriodElapsedCallback+0x66>
				flagModify = 1;
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	801a      	strh	r2, [r3, #0]
				timerModify_counter = 500;
 80036e6:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80036e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036ec:	801a      	strh	r2, [r3, #0]
			}
		}

		if (blinkLCD_counter > 0){
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_TIM_PeriodElapsedCallback+0x90>
			blinkLCD_counter--;
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003700:	801a      	strh	r2, [r3, #0]
			if (blinkLCD_counter == 0) {
 8003702:	4b18      	ldr	r3, [pc, #96]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_TIM_PeriodElapsedCallback+0x90>
				blinkLCD_flag = 1;
 800370a:	4b17      	ldr	r3, [pc, #92]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
				blinkLCD_counter = blinkLCD_total_tick;
 8003710:	4b16      	ldr	r3, [pc, #88]	; (800376c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003712:	881a      	ldrh	r2, [r3, #0]
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003716:	801a      	strh	r2, [r3, #0]
			}
		}

		if (clock_counter > 0){
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_TIM_PeriodElapsedCallback+0xba>
			clock_counter--;
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800372a:	801a      	strh	r2, [r3, #0]
			if(clock_counter == 0) {
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_TIM_PeriodElapsedCallback+0xba>
				clock_flag = 1;
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
				clock_counter = clock_total_tick;
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800373c:	881a      	ldrh	r2, [r3, #0]
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003740:	801a      	strh	r2, [r3, #0]
			}
		}

		led7_Scan();
 8003742:	f7ff fb4d 	bl	8002de0 <led7_Scan>
	}
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2000009e 	.word	0x2000009e
 8003754:	2000009c 	.word	0x2000009c
 8003758:	200000a0 	.word	0x200000a0
 800375c:	200000a4 	.word	0x200000a4
 8003760:	200000a2 	.word	0x200000a2
 8003764:	200003a2 	.word	0x200003a2
 8003768:	200003a6 	.word	0x200003a6
 800376c:	200003a4 	.word	0x200003a4
 8003770:	2000039c 	.word	0x2000039c
 8003774:	200003a0 	.word	0x200003a0
 8003778:	2000039e 	.word	0x2000039e

0800377c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_MspInit+0x4c>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	4a0f      	ldr	r2, [pc, #60]	; (80037c8 <HAL_MspInit+0x4c>)
 800378c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003790:	6453      	str	r3, [r2, #68]	; 0x44
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <HAL_MspInit+0x4c>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_MspInit+0x4c>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <HAL_MspInit+0x4c>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_MspInit+0x4c>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a19      	ldr	r2, [pc, #100]	; (8003850 <HAL_I2C_MspInit+0x84>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d12b      	bne.n	8003846 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <HAL_I2C_MspInit+0x88>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_I2C_MspInit+0x88>)
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_I2C_MspInit+0x88>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800380a:	23c0      	movs	r3, #192	; 0xc0
 800380c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800380e:	2312      	movs	r3, #18
 8003810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003816:	2303      	movs	r3, #3
 8003818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800381a:	2304      	movs	r3, #4
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381e:	f107 0314 	add.w	r3, r7, #20
 8003822:	4619      	mov	r1, r3
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <HAL_I2C_MspInit+0x8c>)
 8003826:	f000 fd1f 	bl	8004268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_I2C_MspInit+0x88>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <HAL_I2C_MspInit+0x88>)
 8003834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003838:	6413      	str	r3, [r2, #64]	; 0x40
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_I2C_MspInit+0x88>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003846:	bf00      	nop
 8003848:	3728      	adds	r7, #40	; 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40005400 	.word	0x40005400
 8003854:	40023800 	.word	0x40023800
 8003858:	40020400 	.word	0x40020400

0800385c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_SPI_MspInit+0x84>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d12b      	bne.n	80038d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 8003888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800388c:	6453      	str	r3, [r2, #68]	; 0x44
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_SPI_MspInit+0x88>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80038b6:	2338      	movs	r3, #56	; 0x38
 80038b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c2:	2303      	movs	r3, #3
 80038c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038c6:	2305      	movs	r3, #5
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4619      	mov	r1, r3
 80038d0:	4805      	ldr	r0, [pc, #20]	; (80038e8 <HAL_SPI_MspInit+0x8c>)
 80038d2:	f000 fcc9 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038d6:	bf00      	nop
 80038d8:	3728      	adds	r7, #40	; 0x28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40013000 	.word	0x40013000
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40020400 	.word	0x40020400

080038ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d115      	bne.n	800392a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_TIM_Base_MspInit+0x48>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <HAL_TIM_Base_MspInit+0x48>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_TIM_Base_MspInit+0x48>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800391a:	2200      	movs	r2, #0
 800391c:	2100      	movs	r1, #0
 800391e:	201c      	movs	r0, #28
 8003920:	f000 fbd9 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003924:	201c      	movs	r0, #28
 8003926:	f000 fbf2 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_UART_MspInit+0x94>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d134      	bne.n	80039c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_UART_MspInit+0x98>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_UART_MspInit+0x98>)
 8003964:	f043 0310 	orr.w	r3, r3, #16
 8003968:	6453      	str	r3, [r2, #68]	; 0x44
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_UART_MspInit+0x98>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_UART_MspInit+0x98>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_UART_MspInit+0x98>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_UART_MspInit+0x98>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003992:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039a4:	2307      	movs	r3, #7
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4619      	mov	r1, r3
 80039ae:	4809      	ldr	r0, [pc, #36]	; (80039d4 <HAL_UART_MspInit+0x9c>)
 80039b0:	f000 fc5a 	bl	8004268 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	2025      	movs	r0, #37	; 0x25
 80039ba:	f000 fb8c 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039be:	2025      	movs	r0, #37	; 0x25
 80039c0:	f000 fba5 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039c4:	bf00      	nop
 80039c6:	3728      	adds	r7, #40	; 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40011000 	.word	0x40011000
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40020000 	.word	0x40020000

080039d8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <HAL_FSMC_MspInit+0x88>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d131      	bne.n	8003a58 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <HAL_FSMC_MspInit+0x88>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_FSMC_MspInit+0x8c>)
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_FSMC_MspInit+0x8c>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6393      	str	r3, [r2, #56]	; 0x38
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_FSMC_MspInit+0x8c>)
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8003a16:	f64f 7388 	movw	r3, #65416	; 0xff88
 8003a1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a24:	2303      	movs	r3, #3
 8003a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003a28:	230c      	movs	r3, #12
 8003a2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	480d      	ldr	r0, [pc, #52]	; (8003a68 <HAL_FSMC_MspInit+0x90>)
 8003a32:	f000 fc19 	bl	8004268 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003a36:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003a3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a44:	2303      	movs	r3, #3
 8003a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003a48:	230c      	movs	r3, #12
 8003a4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4806      	ldr	r0, [pc, #24]	; (8003a6c <HAL_FSMC_MspInit+0x94>)
 8003a52:	f000 fc09 	bl	8004268 <HAL_GPIO_Init>
 8003a56:	e000      	b.n	8003a5a <HAL_FSMC_MspInit+0x82>
    return;
 8003a58:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	200000a8 	.word	0x200000a8
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40020c00 	.word	0x40020c00

08003a70 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003a78:	f7ff ffae 	bl	80039d8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <NMI_Handler+0x4>

08003a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a8e:	e7fe      	b.n	8003a8e <HardFault_Handler+0x4>

08003a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <MemManage_Handler+0x4>

08003a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a9a:	e7fe      	b.n	8003a9a <BusFault_Handler+0x4>

08003a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <UsageFault_Handler+0x4>

08003aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad0:	f000 f9e2 	bl	8003e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <TIM2_IRQHandler+0x10>)
 8003ade:	f003 f95b 	bl	8006d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000354 	.word	0x20000354

08003aec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <USART1_IRQHandler+0x10>)
 8003af2:	f003 fe23 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200002b8 	.word	0x200002b8

08003b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <_sbrk+0x5c>)
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <_sbrk+0x60>)
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <_sbrk+0x64>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <_sbrk+0x64>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <_sbrk+0x68>)
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d207      	bcs.n	8003b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b30:	f004 fd90 	bl	8008654 <__errno>
 8003b34:	4603      	mov	r3, r0
 8003b36:	220c      	movs	r2, #12
 8003b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e009      	b.n	8003b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <_sbrk+0x64>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <_sbrk+0x64>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <_sbrk+0x64>)
 8003b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20020000 	.word	0x20020000
 8003b60:	00000400 	.word	0x00000400
 8003b64:	200000ac 	.word	0x200000ac
 8003b68:	20000420 	.word	0x20000420

08003b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <SystemInit+0x20>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <SystemInit+0x20>)
 8003b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <uart_init_rs232>:
/**
 * @brief Initialize UART RS232
 * @return None
 * 
 */
void uart_init_rs232(){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rcv_chr, 1);
 8003b94:	2201      	movs	r2, #1
 8003b96:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <uart_init_rs232+0x18>)
 8003b98:	4804      	ldr	r0, [pc, #16]	; (8003bac <uart_init_rs232+0x1c>)
 8003b9a:	f003 fd9e 	bl	80076da <HAL_UART_Receive_IT>
	initBuffer();
 8003b9e:	f7fc fce3 	bl	8000568 <initBuffer>
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200000b0 	.word	0x200000b0
 8003bac:	200002b8 	.word	0x200002b8

08003bb0 <uart_Rs232SendString>:
 * @brief Send a string via UART
 * 
 * @param str Pointer to head of string need to be sent
 * @return None
 */
void uart_Rs232SendString(uint8_t* str){
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4907      	ldr	r1, [pc, #28]	; (8003bd8 <uart_Rs232SendString+0x28>)
 8003bbc:	4807      	ldr	r0, [pc, #28]	; (8003bdc <uart_Rs232SendString+0x2c>)
 8003bbe:	f004 fe45 	bl	800884c <siprintf>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	4904      	ldr	r1, [pc, #16]	; (8003bdc <uart_Rs232SendString+0x2c>)
 8003bca:	4805      	ldr	r0, [pc, #20]	; (8003be0 <uart_Rs232SendString+0x30>)
 8003bcc:	f003 fcf3 	bl	80075b6 <HAL_UART_Transmit>
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	080091e0 	.word	0x080091e0
 8003bdc:	200003a8 	.word	0x200003a8
 8003be0:	200002b8 	.word	0x200002b8

08003be4 <uart_Rs232SendBytes>:
 * @brief Send a byte array via UART
 * 
 * @param bytes Byte array which need to be sent
 * @param size Number of bytes
 */
void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, bytes, size, 10);
 8003bf0:	887a      	ldrh	r2, [r7, #2]
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4803      	ldr	r0, [pc, #12]	; (8003c04 <uart_Rs232SendBytes+0x20>)
 8003bf8:	f003 fcdd 	bl	80075b6 <HAL_UART_Transmit>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200002b8 	.word	0x200002b8

08003c08 <uart_Rs232SendNum>:
/**
 * @brief Send a number via UART
 * 
 * @param num Number (size: 32 bits)
 */
void uart_Rs232SendNum(uint32_t num){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <uart_Rs232SendNum+0x16>
		uart_Rs232SendString((uint8_t *)"0");
 8003c16:	4825      	ldr	r0, [pc, #148]	; (8003cac <uart_Rs232SendNum+0xa4>)
 8003c18:	f7ff ffca 	bl	8003bb0 <uart_Rs232SendString>
		return;
 8003c1c:	e043      	b.n	8003ca6 <uart_Rs232SendNum+0x9e>
	}
    uint8_t num_flag = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString((uint8_t *)"-");
    for(i = 10; i > 0; i--)
 8003c22:	230a      	movs	r3, #10
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	e03b      	b.n	8003ca0 <uart_Rs232SendNum+0x98>
    {
        if((num / mypow(10, i-1)) != 0)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	200a      	movs	r0, #10
 8003c34:	f7fe fd4e 	bl	80026d4 <mypow>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d316      	bcc.n	8003c6e <uart_Rs232SendNum+0x66>
        {
            num_flag = 1;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%ld",num/mypow(10, i-1));
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	200a      	movs	r0, #10
 8003c50:	f7fe fd40 	bl	80026d4 <mypow>
 8003c54:	4602      	mov	r2, r0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4914      	ldr	r1, [pc, #80]	; (8003cb0 <uart_Rs232SendNum+0xa8>)
 8003c60:	4814      	ldr	r0, [pc, #80]	; (8003cb4 <uart_Rs232SendNum+0xac>)
 8003c62:	f004 fdf3 	bl	800884c <siprintf>
            uart_Rs232SendString(msg);
 8003c66:	4813      	ldr	r0, [pc, #76]	; (8003cb4 <uart_Rs232SendNum+0xac>)
 8003c68:	f7ff ffa2 	bl	8003bb0 <uart_Rs232SendString>
 8003c6c:	e005      	b.n	8003c7a <uart_Rs232SendNum+0x72>
        }
        else
        {
            if(num_flag != 0)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <uart_Rs232SendNum+0x72>
            	uart_Rs232SendString((uint8_t *)"0");
 8003c74:	480d      	ldr	r0, [pc, #52]	; (8003cac <uart_Rs232SendNum+0xa4>)
 8003c76:	f7ff ff9b 	bl	8003bb0 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	200a      	movs	r0, #10
 8003c86:	f7fe fd25 	bl	80026d4 <mypow>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c92:	fb02 f201 	mul.w	r2, r2, r1
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dcc0      	bgt.n	8003c28 <uart_Rs232SendNum+0x20>
    }
}
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	080091e4 	.word	0x080091e4
 8003cb0:	080091e8 	.word	0x080091e8
 8003cb4:	200003a8 	.word	0x200003a8

08003cb8 <HAL_UART_RxCpltCallback>:
/**
 * @brief UART Callback. This function will be call when MCU receive new message via UART
 * 
 * @param huart 
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <HAL_UART_RxCpltCallback+0x58>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d11e      	bne.n	8003d08 <HAL_UART_RxCpltCallback+0x50>
		// rs232 isr
		// Push received char to buffer
		if (!pushBuffer(rcv_chr)) {
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_UART_RxCpltCallback+0x5c>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc fc6e 	bl	80005b0 <pushBuffer>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_UART_RxCpltCallback+0x40>
            uint8_t err_str[] = "Buffer is full";
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_UART_RxCpltCallback+0x60>)
 8003cdc:	f107 0408 	add.w	r4, r7, #8
 8003ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ce2:	c407      	stmia	r4!, {r0, r1, r2}
 8003ce4:	8023      	strh	r3, [r4, #0]
 8003ce6:	3402      	adds	r4, #2
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	7023      	strb	r3, [r4, #0]
            uart_Rs232SendString(err_str);
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff5d 	bl	8003bb0 <uart_Rs232SendString>
 8003cf6:	e002      	b.n	8003cfe <HAL_UART_RxCpltCallback+0x46>
        } else {
        	process_flag = 1;
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_UART_RxCpltCallback+0x64>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
        }

		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &rcv_chr, 1);
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_UART_RxCpltCallback+0x5c>)
 8003d02:	4807      	ldr	r0, [pc, #28]	; (8003d20 <HAL_UART_RxCpltCallback+0x68>)
 8003d04:	f003 fce9 	bl	80076da <HAL_UART_Receive_IT>
	}
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd90      	pop	{r4, r7, pc}
 8003d10:	40011000 	.word	0x40011000
 8003d14:	200000b0 	.word	0x200000b0
 8003d18:	080091f0 	.word	0x080091f0
 8003d1c:	200000b1 	.word	0x200000b1
 8003d20:	200002b8 	.word	0x200002b8

08003d24 <BCD2DEC>:
 *      Author: DELL
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	0092      	lsls	r2, r2, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	4a0d      	ldr	r2, [pc, #52]	; (8003d9c <DEC2BCD+0x44>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	08db      	lsrs	r3, r3, #3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	b258      	sxtb	r0, r3
 8003d72:	79fa      	ldrb	r2, [r7, #7]
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <DEC2BCD+0x44>)
 8003d76:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7a:	08d9      	lsrs	r1, r3, #3
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	4303      	orrs	r3, r0
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	cccccccd 	.word	0xcccccccd

08003da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003da4:	480d      	ldr	r0, [pc, #52]	; (8003ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003da6:	490e      	ldr	r1, [pc, #56]	; (8003de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dac:	e002      	b.n	8003db4 <LoopCopyDataInit>

08003dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003db2:	3304      	adds	r3, #4

08003db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003db8:	d3f9      	bcc.n	8003dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dba:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dbc:	4c0b      	ldr	r4, [pc, #44]	; (8003dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc0:	e001      	b.n	8003dc6 <LoopFillZerobss>

08003dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dc4:	3204      	adds	r2, #4

08003dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dc8:	d3fb      	bcc.n	8003dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dca:	f7ff fecf 	bl	8003b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dce:	f004 fc47 	bl	8008660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dd2:	f7ff f891 	bl	8002ef8 <main>
  bx  lr    
 8003dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003de0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003de4:	0800c2dc 	.word	0x0800c2dc
  ldr r2, =_sbss
 8003de8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003dec:	20000420 	.word	0x20000420

08003df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003df0:	e7fe      	b.n	8003df0 <ADC_IRQHandler>
	...

08003df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_Init+0x40>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <HAL_Init+0x40>)
 8003dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_Init+0x40>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <HAL_Init+0x40>)
 8003e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_Init+0x40>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <HAL_Init+0x40>)
 8003e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	f000 f94f 	bl	80040c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e22:	200f      	movs	r0, #15
 8003e24:	f000 f808 	bl	8003e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e28:	f7ff fca8 	bl	800377c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00

08003e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_InitTick+0x54>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_InitTick+0x58>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f967 	bl	800412a <HAL_SYSTICK_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00e      	b.n	8003e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0f      	cmp	r3, #15
 8003e6a:	d80a      	bhi.n	8003e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	f000 f92f 	bl	80040d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e78:	4a06      	ldr	r2, [pc, #24]	; (8003e94 <HAL_InitTick+0x5c>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000008 	.word	0x20000008
 8003e90:	20000010 	.word	0x20000010
 8003e94:	2000000c 	.word	0x2000000c

08003e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_IncTick+0x20>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_IncTick+0x24>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <HAL_IncTick+0x24>)
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000010 	.word	0x20000010
 8003ebc:	2000040c 	.word	0x2000040c

08003ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_GetTick+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	2000040c 	.word	0x2000040c

08003ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7ff ffee 	bl	8003ec0 <HAL_GetTick>
 8003ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d005      	beq.n	8003efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_Delay+0x44>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003efe:	bf00      	nop
 8003f00:	f7ff ffde 	bl	8003ec0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d8f7      	bhi.n	8003f00 <HAL_Delay+0x28>
  {
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000010 	.word	0x20000010

08003f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f52:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	60d3      	str	r3, [r2, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <__NVIC_GetPriorityGrouping+0x18>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	f003 0307 	and.w	r3, r3, #7
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db0b      	blt.n	8003fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	f003 021f 	and.w	r2, r3, #31
 8003f9c:	4907      	ldr	r1, [pc, #28]	; (8003fbc <__NVIC_EnableIRQ+0x38>)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	e000e100 	.word	0xe000e100

08003fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	db0a      	blt.n	8003fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	490c      	ldr	r1, [pc, #48]	; (800400c <__NVIC_SetPriority+0x4c>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	0112      	lsls	r2, r2, #4
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe8:	e00a      	b.n	8004000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4908      	ldr	r1, [pc, #32]	; (8004010 <__NVIC_SetPriority+0x50>)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	3b04      	subs	r3, #4
 8003ff8:	0112      	lsls	r2, r2, #4
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	761a      	strb	r2, [r3, #24]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000e100 	.word	0xe000e100
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f1c3 0307 	rsb	r3, r3, #7
 800402e:	2b04      	cmp	r3, #4
 8004030:	bf28      	it	cs
 8004032:	2304      	movcs	r3, #4
 8004034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3304      	adds	r3, #4
 800403a:	2b06      	cmp	r3, #6
 800403c:	d902      	bls.n	8004044 <NVIC_EncodePriority+0x30>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3b03      	subs	r3, #3
 8004042:	e000      	b.n	8004046 <NVIC_EncodePriority+0x32>
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	401a      	ands	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800405c:	f04f 31ff 	mov.w	r1, #4294967295
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43d9      	mvns	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	4313      	orrs	r3, r2
         );
}
 800406e:	4618      	mov	r0, r3
 8004070:	3724      	adds	r7, #36	; 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3b01      	subs	r3, #1
 8004088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800408c:	d301      	bcc.n	8004092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800408e:	2301      	movs	r3, #1
 8004090:	e00f      	b.n	80040b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004092:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <SysTick_Config+0x40>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3b01      	subs	r3, #1
 8004098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800409a:	210f      	movs	r1, #15
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	f7ff ff8e 	bl	8003fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <SysTick_Config+0x40>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <SysTick_Config+0x40>)
 80040ac:	2207      	movs	r2, #7
 80040ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	e000e010 	.word	0xe000e010

080040c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff29 	bl	8003f20 <__NVIC_SetPriorityGrouping>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e8:	f7ff ff3e 	bl	8003f68 <__NVIC_GetPriorityGrouping>
 80040ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7ff ff8e 	bl	8004014 <NVIC_EncodePriority>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff5d 	bl	8003fc0 <__NVIC_SetPriority>
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff31 	bl	8003f84 <__NVIC_EnableIRQ>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ffa2 	bl	800407c <SysTick_Config>
 8004138:	4603      	mov	r3, r0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff feb6 	bl	8003ec0 <HAL_GetTick>
 8004154:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d008      	beq.n	8004174 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2280      	movs	r2, #128	; 0x80
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e052      	b.n	800421a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0216 	bic.w	r2, r2, #22
 8004182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004192:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d103      	bne.n	80041a4 <HAL_DMA_Abort+0x62>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0208 	bic.w	r2, r2, #8
 80041b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c4:	e013      	b.n	80041ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041c6:	f7ff fe7b 	bl	8003ec0 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b05      	cmp	r3, #5
 80041d2:	d90c      	bls.n	80041ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2203      	movs	r2, #3
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e015      	b.n	800421a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e4      	bne.n	80041c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	223f      	movs	r2, #63	; 0x3f
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d004      	beq.n	8004240 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e00c      	b.n	800425a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2205      	movs	r2, #5
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e16b      	b.n	800455c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004284:	2201      	movs	r2, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 815a 	bne.w	8004556 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d005      	beq.n	80042ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d130      	bne.n	800431c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 0201 	and.w	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d017      	beq.n	8004358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d123      	bne.n	80043ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	08da      	lsrs	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3208      	adds	r2, #8
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	220f      	movs	r2, #15
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	08da      	lsrs	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3208      	adds	r2, #8
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80b4 	beq.w	8004556 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b60      	ldr	r3, [pc, #384]	; (8004574 <HAL_GPIO_Init+0x30c>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4a5f      	ldr	r2, [pc, #380]	; (8004574 <HAL_GPIO_Init+0x30c>)
 80043f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043fc:	6453      	str	r3, [r2, #68]	; 0x44
 80043fe:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <HAL_GPIO_Init+0x30c>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	4a5b      	ldr	r2, [pc, #364]	; (8004578 <HAL_GPIO_Init+0x310>)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	3302      	adds	r3, #2
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a52      	ldr	r2, [pc, #328]	; (800457c <HAL_GPIO_Init+0x314>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02b      	beq.n	800448e <HAL_GPIO_Init+0x226>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a51      	ldr	r2, [pc, #324]	; (8004580 <HAL_GPIO_Init+0x318>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d025      	beq.n	800448a <HAL_GPIO_Init+0x222>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a50      	ldr	r2, [pc, #320]	; (8004584 <HAL_GPIO_Init+0x31c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01f      	beq.n	8004486 <HAL_GPIO_Init+0x21e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a4f      	ldr	r2, [pc, #316]	; (8004588 <HAL_GPIO_Init+0x320>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d019      	beq.n	8004482 <HAL_GPIO_Init+0x21a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4e      	ldr	r2, [pc, #312]	; (800458c <HAL_GPIO_Init+0x324>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_GPIO_Init+0x216>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a4d      	ldr	r2, [pc, #308]	; (8004590 <HAL_GPIO_Init+0x328>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00d      	beq.n	800447a <HAL_GPIO_Init+0x212>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a4c      	ldr	r2, [pc, #304]	; (8004594 <HAL_GPIO_Init+0x32c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <HAL_GPIO_Init+0x20e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4b      	ldr	r2, [pc, #300]	; (8004598 <HAL_GPIO_Init+0x330>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_GPIO_Init+0x20a>
 800446e:	2307      	movs	r3, #7
 8004470:	e00e      	b.n	8004490 <HAL_GPIO_Init+0x228>
 8004472:	2308      	movs	r3, #8
 8004474:	e00c      	b.n	8004490 <HAL_GPIO_Init+0x228>
 8004476:	2306      	movs	r3, #6
 8004478:	e00a      	b.n	8004490 <HAL_GPIO_Init+0x228>
 800447a:	2305      	movs	r3, #5
 800447c:	e008      	b.n	8004490 <HAL_GPIO_Init+0x228>
 800447e:	2304      	movs	r3, #4
 8004480:	e006      	b.n	8004490 <HAL_GPIO_Init+0x228>
 8004482:	2303      	movs	r3, #3
 8004484:	e004      	b.n	8004490 <HAL_GPIO_Init+0x228>
 8004486:	2302      	movs	r3, #2
 8004488:	e002      	b.n	8004490 <HAL_GPIO_Init+0x228>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_GPIO_Init+0x228>
 800448e:	2300      	movs	r3, #0
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	f002 0203 	and.w	r2, r2, #3
 8004496:	0092      	lsls	r2, r2, #2
 8004498:	4093      	lsls	r3, r2
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044a0:	4935      	ldr	r1, [pc, #212]	; (8004578 <HAL_GPIO_Init+0x310>)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	3302      	adds	r3, #2
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044ae:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_GPIO_Init+0x334>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044d2:	4a32      	ldr	r2, [pc, #200]	; (800459c <HAL_GPIO_Init+0x334>)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044d8:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_GPIO_Init+0x334>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044fc:	4a27      	ldr	r2, [pc, #156]	; (800459c <HAL_GPIO_Init+0x334>)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <HAL_GPIO_Init+0x334>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_GPIO_Init+0x334>)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_GPIO_Init+0x334>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004550:	4a12      	ldr	r2, [pc, #72]	; (800459c <HAL_GPIO_Init+0x334>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	f67f ae90 	bls.w	8004284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	3724      	adds	r7, #36	; 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	40013800 	.word	0x40013800
 800457c:	40020000 	.word	0x40020000
 8004580:	40020400 	.word	0x40020400
 8004584:	40020800 	.word	0x40020800
 8004588:	40020c00 	.word	0x40020c00
 800458c:	40021000 	.word	0x40021000
 8004590:	40021400 	.word	0x40021400
 8004594:	40021800 	.word	0x40021800
 8004598:	40021c00 	.word	0x40021c00
 800459c:	40013c00 	.word	0x40013c00

080045a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b0:	787b      	ldrb	r3, [r7, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045bc:	e003      	b.n	80045c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045be:	887b      	ldrh	r3, [r7, #2]
 80045c0:	041a      	lsls	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	619a      	str	r2, [r3, #24]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e12b      	b.n	800483e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff f8e6 	bl	80037cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	; 0x24
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004638:	f001 fcda 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 800463c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4a81      	ldr	r2, [pc, #516]	; (8004848 <HAL_I2C_Init+0x274>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d807      	bhi.n	8004658 <HAL_I2C_Init+0x84>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a80      	ldr	r2, [pc, #512]	; (800484c <HAL_I2C_Init+0x278>)
 800464c:	4293      	cmp	r3, r2
 800464e:	bf94      	ite	ls
 8004650:	2301      	movls	r3, #1
 8004652:	2300      	movhi	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e006      	b.n	8004666 <HAL_I2C_Init+0x92>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a7d      	ldr	r2, [pc, #500]	; (8004850 <HAL_I2C_Init+0x27c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0e7      	b.n	800483e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a78      	ldr	r2, [pc, #480]	; (8004854 <HAL_I2C_Init+0x280>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	0c9b      	lsrs	r3, r3, #18
 8004678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4a6a      	ldr	r2, [pc, #424]	; (8004848 <HAL_I2C_Init+0x274>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d802      	bhi.n	80046a8 <HAL_I2C_Init+0xd4>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	3301      	adds	r3, #1
 80046a6:	e009      	b.n	80046bc <HAL_I2C_Init+0xe8>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	4a69      	ldr	r2, [pc, #420]	; (8004858 <HAL_I2C_Init+0x284>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	3301      	adds	r3, #1
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	495c      	ldr	r1, [pc, #368]	; (8004848 <HAL_I2C_Init+0x274>)
 80046d8:	428b      	cmp	r3, r1
 80046da:	d819      	bhi.n	8004710 <HAL_I2C_Init+0x13c>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1e59      	subs	r1, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046f0:	400b      	ands	r3, r1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_I2C_Init+0x138>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1e59      	subs	r1, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fbb1 f3f3 	udiv	r3, r1, r3
 8004704:	3301      	adds	r3, #1
 8004706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470a:	e051      	b.n	80047b0 <HAL_I2C_Init+0x1dc>
 800470c:	2304      	movs	r3, #4
 800470e:	e04f      	b.n	80047b0 <HAL_I2C_Init+0x1dc>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d111      	bne.n	800473c <HAL_I2C_Init+0x168>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e58      	subs	r0, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	440b      	add	r3, r1
 8004726:	fbb0 f3f3 	udiv	r3, r0, r3
 800472a:	3301      	adds	r3, #1
 800472c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e012      	b.n	8004762 <HAL_I2C_Init+0x18e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	1e58      	subs	r0, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	0099      	lsls	r1, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004752:	3301      	adds	r3, #1
 8004754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Init+0x196>
 8004766:	2301      	movs	r3, #1
 8004768:	e022      	b.n	80047b0 <HAL_I2C_Init+0x1dc>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10e      	bne.n	8004790 <HAL_I2C_Init+0x1bc>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1e58      	subs	r0, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	460b      	mov	r3, r1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	440b      	add	r3, r1
 8004780:	fbb0 f3f3 	udiv	r3, r0, r3
 8004784:	3301      	adds	r3, #1
 8004786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478e:	e00f      	b.n	80047b0 <HAL_I2C_Init+0x1dc>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	0099      	lsls	r1, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	6809      	ldr	r1, [r1, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6911      	ldr	r1, [r2, #16]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68d2      	ldr	r2, [r2, #12]
 80047ea:	4311      	orrs	r1, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	000186a0 	.word	0x000186a0
 800484c:	001e847f 	.word	0x001e847f
 8004850:	003d08ff 	.word	0x003d08ff
 8004854:	431bde83 	.word	0x431bde83
 8004858:	10624dd3 	.word	0x10624dd3

0800485c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	461a      	mov	r2, r3
 800486a:	4603      	mov	r3, r0
 800486c:	817b      	strh	r3, [r7, #10]
 800486e:	460b      	mov	r3, r1
 8004870:	813b      	strh	r3, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004876:	f7ff fb23 	bl	8003ec0 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b20      	cmp	r3, #32
 8004886:	f040 80d9 	bne.w	8004a3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2319      	movs	r3, #25
 8004890:	2201      	movs	r2, #1
 8004892:	496d      	ldr	r1, [pc, #436]	; (8004a48 <HAL_I2C_Mem_Write+0x1ec>)
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fdad 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0cc      	b.n	8004a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_I2C_Mem_Write+0x56>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e0c5      	b.n	8004a3e <HAL_I2C_Mem_Write+0x1e2>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d007      	beq.n	80048d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2221      	movs	r2, #33	; 0x21
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a4d      	ldr	r2, [pc, #308]	; (8004a4c <HAL_I2C_Mem_Write+0x1f0>)
 8004918:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800491a:	88f8      	ldrh	r0, [r7, #6]
 800491c:	893a      	ldrh	r2, [r7, #8]
 800491e:	8979      	ldrh	r1, [r7, #10]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	4603      	mov	r3, r0
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fbe4 	bl	80050f8 <I2C_RequestMemoryWrite>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d052      	beq.n	80049dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e081      	b.n	8004a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fe2e 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b04      	cmp	r3, #4
 8004950:	d107      	bne.n	8004962 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e06b      	b.n	8004a3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	781a      	ldrb	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d11b      	bne.n	80049dc <HAL_I2C_Mem_Write+0x180>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d017      	beq.n	80049dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1aa      	bne.n	800493a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fe1a 	bl	8005622 <I2C_WaitOnBTFFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d107      	bne.n	8004a0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e016      	b.n	8004a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e000      	b.n	8004a3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
  }
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	00100002 	.word	0x00100002
 8004a4c:	ffff0000 	.word	0xffff0000

08004a50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08c      	sub	sp, #48	; 0x30
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	4608      	mov	r0, r1
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4603      	mov	r3, r0
 8004a60:	817b      	strh	r3, [r7, #10]
 8004a62:	460b      	mov	r3, r1
 8004a64:	813b      	strh	r3, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a6a:	f7ff fa29 	bl	8003ec0 <HAL_GetTick>
 8004a6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	f040 8208 	bne.w	8004e8e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	2319      	movs	r3, #25
 8004a84:	2201      	movs	r2, #1
 8004a86:	497b      	ldr	r1, [pc, #492]	; (8004c74 <HAL_I2C_Mem_Read+0x224>)
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fcb3 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
 8004a96:	e1fb      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2C_Mem_Read+0x56>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e1f4      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d007      	beq.n	8004acc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ada:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2222      	movs	r2, #34	; 0x22
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a5b      	ldr	r2, [pc, #364]	; (8004c78 <HAL_I2C_Mem_Read+0x228>)
 8004b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b0e:	88f8      	ldrh	r0, [r7, #6]
 8004b10:	893a      	ldrh	r2, [r7, #8]
 8004b12:	8979      	ldrh	r1, [r7, #10]
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fb80 	bl	8005224 <I2C_RequestMemoryRead>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e1b0      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d113      	bne.n	8004b5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b36:	2300      	movs	r3, #0
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e184      	b.n	8004e68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d11b      	bne.n	8004b9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e164      	b.n	8004e68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d11b      	bne.n	8004bde <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	e144      	b.n	8004e68 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bf4:	e138      	b.n	8004e68 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	f200 80f1 	bhi.w	8004de2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d123      	bne.n	8004c50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fd49 	bl	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e139      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c4e:	e10b      	b.n	8004e68 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d14e      	bne.n	8004cf6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	2200      	movs	r2, #0
 8004c60:	4906      	ldr	r1, [pc, #24]	; (8004c7c <HAL_I2C_Mem_Read+0x22c>)
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fbc6 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d008      	beq.n	8004c80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e10e      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
 8004c72:	bf00      	nop
 8004c74:	00100002 	.word	0x00100002
 8004c78:	ffff0000 	.word	0xffff0000
 8004c7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cf4:	e0b8      	b.n	8004e68 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4966      	ldr	r1, [pc, #408]	; (8004e98 <HAL_I2C_Mem_Read+0x448>)
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fb77 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0bf      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	2200      	movs	r2, #0
 8004d5a:	494f      	ldr	r1, [pc, #316]	; (8004e98 <HAL_I2C_Mem_Read+0x448>)
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fb49 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e091      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004de0:	e042      	b.n	8004e68 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fc5c 	bl	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e04c      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d118      	bne.n	8004e68 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f47f aec2 	bne.w	8004bf6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e000      	b.n	8004e90 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
  }
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3728      	adds	r7, #40	; 0x28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	00010004 	.word	0x00010004

08004e9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004eac:	f7ff f808 	bl	8003ec0 <HAL_GetTick>
 8004eb0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	f040 8111 	bne.w	80050e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2319      	movs	r3, #25
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4988      	ldr	r1, [pc, #544]	; (80050f0 <HAL_I2C_IsDeviceReady+0x254>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fa90 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
 8004edc:	e104      	b.n	80050e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_I2C_IsDeviceReady+0x50>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0fd      	b.n	80050e8 <HAL_I2C_IsDeviceReady+0x24c>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d007      	beq.n	8004f12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2224      	movs	r2, #36	; 0x24
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a70      	ldr	r2, [pc, #448]	; (80050f4 <HAL_I2C_IsDeviceReady+0x258>)
 8004f34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 fa4e 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00d      	beq.n	8004f7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6c:	d103      	bne.n	8004f76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f74:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0b6      	b.n	80050e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f7a:	897b      	ldrh	r3, [r7, #10]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f8a:	f7fe ff99 	bl	8003ec0 <HAL_GetTick>
 8004f8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fbe:	e025      	b.n	800500c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fe ff7e 	bl	8003ec0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <HAL_I2C_IsDeviceReady+0x13a>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	22a0      	movs	r2, #160	; 0xa0
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2ba0      	cmp	r3, #160	; 0xa0
 8005016:	d005      	beq.n	8005024 <HAL_I2C_IsDeviceReady+0x188>
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <HAL_I2C_IsDeviceReady+0x188>
 800501e:	7dbb      	ldrb	r3, [r7, #22]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0cd      	beq.n	8004fc0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b02      	cmp	r3, #2
 8005038:	d129      	bne.n	800508e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005048:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2319      	movs	r3, #25
 8005066:	2201      	movs	r2, #1
 8005068:	4921      	ldr	r1, [pc, #132]	; (80050f0 <HAL_I2C_IsDeviceReady+0x254>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f9c2 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e036      	b.n	80050e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e02c      	b.n	80050e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	2319      	movs	r3, #25
 80050ae:	2201      	movs	r2, #1
 80050b0:	490f      	ldr	r1, [pc, #60]	; (80050f0 <HAL_I2C_IsDeviceReady+0x254>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f99e 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e012      	b.n	80050e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	f4ff af32 	bcc.w	8004f36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	00100002 	.word	0x00100002
 80050f4:	ffff0000 	.word	0xffff0000

080050f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4603      	mov	r3, r0
 8005108:	817b      	strh	r3, [r7, #10]
 800510a:	460b      	mov	r3, r1
 800510c:	813b      	strh	r3, [r7, #8]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	2200      	movs	r2, #0
 800512a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f960 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00d      	beq.n	8005156 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005148:	d103      	bne.n	8005152 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e05f      	b.n	8005216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005156:	897b      	ldrh	r3, [r7, #10]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	492d      	ldr	r1, [pc, #180]	; (8005220 <I2C_RequestMemoryWrite+0x128>)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f998 	bl	80054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e04c      	b.n	8005216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	6a39      	ldr	r1, [r7, #32]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fa02 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d107      	bne.n	80051ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e02b      	b.n	8005216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c4:	893b      	ldrh	r3, [r7, #8]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]
 80051ce:	e021      	b.n	8005214 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051d0:	893b      	ldrh	r3, [r7, #8]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	6a39      	ldr	r1, [r7, #32]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f9dc 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00d      	beq.n	800520a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d107      	bne.n	8005206 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e005      	b.n	8005216 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800520a:	893b      	ldrh	r3, [r7, #8]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	00010002 	.word	0x00010002

08005224 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	4608      	mov	r0, r1
 800522e:	4611      	mov	r1, r2
 8005230:	461a      	mov	r2, r3
 8005232:	4603      	mov	r3, r0
 8005234:	817b      	strh	r3, [r7, #10]
 8005236:	460b      	mov	r3, r1
 8005238:	813b      	strh	r3, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800524c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800525c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	2200      	movs	r2, #0
 8005266:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f8c2 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00d      	beq.n	8005292 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005284:	d103      	bne.n	800528e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e0aa      	b.n	80053e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005292:	897b      	ldrh	r3, [r7, #10]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	6a3a      	ldr	r2, [r7, #32]
 80052a6:	4952      	ldr	r1, [pc, #328]	; (80053f0 <I2C_RequestMemoryRead+0x1cc>)
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f8fa 	bl	80054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e097      	b.n	80053e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	6a39      	ldr	r1, [r7, #32]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f964 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00d      	beq.n	80052fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d107      	bne.n	80052f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e076      	b.n	80053e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d105      	bne.n	800530c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005300:	893b      	ldrh	r3, [r7, #8]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	611a      	str	r2, [r3, #16]
 800530a:	e021      	b.n	8005350 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800530c:	893b      	ldrh	r3, [r7, #8]
 800530e:	0a1b      	lsrs	r3, r3, #8
 8005310:	b29b      	uxth	r3, r3
 8005312:	b2da      	uxtb	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531c:	6a39      	ldr	r1, [r7, #32]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f93e 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00d      	beq.n	8005346 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	2b04      	cmp	r3, #4
 8005330:	d107      	bne.n	8005342 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005340:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e050      	b.n	80053e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005346:	893b      	ldrh	r3, [r7, #8]
 8005348:	b2da      	uxtb	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005352:	6a39      	ldr	r1, [r7, #32]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f923 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	2b04      	cmp	r3, #4
 8005366:	d107      	bne.n	8005378 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005376:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e035      	b.n	80053e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800538a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	2200      	movs	r2, #0
 8005394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f82b 	bl	80053f4 <I2C_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b2:	d103      	bne.n	80053bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e013      	b.n	80053e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053c0:	897b      	ldrh	r3, [r7, #10]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	6a3a      	ldr	r2, [r7, #32]
 80053d4:	4906      	ldr	r1, [pc, #24]	; (80053f0 <I2C_RequestMemoryRead+0x1cc>)
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f863 	bl	80054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	00010002 	.word	0x00010002

080053f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005404:	e025      	b.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d021      	beq.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fe fd57 	bl	8003ec0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d116      	bne.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e023      	b.n	800549a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d10d      	bne.n	8005478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	43da      	mvns	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	e00c      	b.n	8005492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	43da      	mvns	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	bf0c      	ite	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	2300      	movne	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	429a      	cmp	r2, r3
 8005496:	d0b6      	beq.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b0:	e051      	b.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c0:	d123      	bne.n	800550a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0204 	orr.w	r2, r3, #4
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e046      	b.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d021      	beq.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fe fcd5 	bl	8003ec0 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d116      	bne.n	8005556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e020      	b.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10c      	bne.n	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4013      	ands	r3, r2
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	bf14      	ite	ne
 8005572:	2301      	movne	r3, #1
 8005574:	2300      	moveq	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e00b      	b.n	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	43da      	mvns	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4013      	ands	r3, r2
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d18d      	bne.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ac:	e02d      	b.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f8ce 	bl	8005750 <I2C_IsAcknowledgeFailed>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e02d      	b.n	800561a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d021      	beq.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7fe fc7b 	bl	8003ec0 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d116      	bne.n	800560a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e007      	b.n	800561a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d1ca      	bne.n	80055ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800562e:	e02d      	b.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f88d 	bl	8005750 <I2C_IsAcknowledgeFailed>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e02d      	b.n	800569c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d021      	beq.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005648:	f7fe fc3a 	bl	8003ec0 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d302      	bcc.n	800565e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d116      	bne.n	800568c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	f043 0220 	orr.w	r2, r3, #32
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e007      	b.n	800569c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b04      	cmp	r3, #4
 8005698:	d1ca      	bne.n	8005630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056b0:	e042      	b.n	8005738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d119      	bne.n	80056f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0210 	mvn.w	r2, #16
 80056c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e029      	b.n	8005748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f4:	f7fe fbe4 	bl	8003ec0 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d116      	bne.n	8005738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e007      	b.n	8005748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d1b5      	bne.n	80056b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005766:	d11b      	bne.n	80057a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005770:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	f043 0204 	orr.w	r2, r3, #4
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e264      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d075      	beq.n	80058ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ce:	4ba3      	ldr	r3, [pc, #652]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d00c      	beq.n	80057f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057da:	4ba0      	ldr	r3, [pc, #640]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d112      	bne.n	800580c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e6:	4b9d      	ldr	r3, [pc, #628]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057f2:	d10b      	bne.n	800580c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f4:	4b99      	ldr	r3, [pc, #612]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05b      	beq.n	80058b8 <HAL_RCC_OscConfig+0x108>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d157      	bne.n	80058b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e23f      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005814:	d106      	bne.n	8005824 <HAL_RCC_OscConfig+0x74>
 8005816:	4b91      	ldr	r3, [pc, #580]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a90      	ldr	r2, [pc, #576]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800581c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e01d      	b.n	8005860 <HAL_RCC_OscConfig+0xb0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x98>
 800582e:	4b8b      	ldr	r3, [pc, #556]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a8a      	ldr	r2, [pc, #552]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	4b88      	ldr	r3, [pc, #544]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a87      	ldr	r2, [pc, #540]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	e00b      	b.n	8005860 <HAL_RCC_OscConfig+0xb0>
 8005848:	4b84      	ldr	r3, [pc, #528]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a83      	ldr	r2, [pc, #524]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a80      	ldr	r2, [pc, #512]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800585a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fe fb2a 	bl	8003ec0 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005870:	f7fe fb26 	bl	8003ec0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e204      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	4b76      	ldr	r3, [pc, #472]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0xc0>
 800588e:	e014      	b.n	80058ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fe fb16 	bl	8003ec0 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005898:	f7fe fb12 	bl	8003ec0 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	; 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e1f0      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	4b6c      	ldr	r3, [pc, #432]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0xe8>
 80058b6:	e000      	b.n	80058ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d063      	beq.n	800598e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058c6:	4b65      	ldr	r3, [pc, #404]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058d2:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d11c      	bne.n	8005918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058de:	4b5f      	ldr	r3, [pc, #380]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d116      	bne.n	8005918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ea:	4b5c      	ldr	r3, [pc, #368]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_RCC_OscConfig+0x152>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d001      	beq.n	8005902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e1c4      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005902:	4b56      	ldr	r3, [pc, #344]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4952      	ldr	r1, [pc, #328]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005912:	4313      	orrs	r3, r2
 8005914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005916:	e03a      	b.n	800598e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005920:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <HAL_RCC_OscConfig+0x2b0>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005926:	f7fe facb 	bl	8003ec0 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592e:	f7fe fac7 	bl	8003ec0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e1a5      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005940:	4b46      	ldr	r3, [pc, #280]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594c:	4b43      	ldr	r3, [pc, #268]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4940      	ldr	r1, [pc, #256]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 800595c:	4313      	orrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]
 8005960:	e015      	b.n	800598e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005962:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <HAL_RCC_OscConfig+0x2b0>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fe faaa 	bl	8003ec0 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005970:	f7fe faa6 	bl	8003ec0 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e184      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	4b36      	ldr	r3, [pc, #216]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d030      	beq.n	80059fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a2:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <HAL_RCC_OscConfig+0x2b4>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fe fa8a 	bl	8003ec0 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b0:	f7fe fa86 	bl	8003ec0 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e164      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c2:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80059c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x200>
 80059ce:	e015      	b.n	80059fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d0:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <HAL_RCC_OscConfig+0x2b4>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d6:	f7fe fa73 	bl	8003ec0 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059de:	f7fe fa6f 	bl	8003ec0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e14d      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 80059f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80a0 	beq.w	8005b4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	4a0e      	ldr	r2, [pc, #56]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6413      	str	r3, [r2, #64]	; 0x40
 8005a2a:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_OscConfig+0x2b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d121      	bne.n	8005a8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <HAL_RCC_OscConfig+0x2b8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a07      	ldr	r2, [pc, #28]	; (8005a68 <HAL_RCC_OscConfig+0x2b8>)
 8005a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a52:	f7fe fa35 	bl	8003ec0 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a58:	e011      	b.n	8005a7e <HAL_RCC_OscConfig+0x2ce>
 8005a5a:	bf00      	nop
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	42470000 	.word	0x42470000
 8005a64:	42470e80 	.word	0x42470e80
 8005a68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6c:	f7fe fa28 	bl	8003ec0 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e106      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7e:	4b85      	ldr	r3, [pc, #532]	; (8005c94 <HAL_RCC_OscConfig+0x4e4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d106      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2f0>
 8005a92:	4b81      	ldr	r3, [pc, #516]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	4a80      	ldr	r2, [pc, #512]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9e:	e01c      	b.n	8005ada <HAL_RCC_OscConfig+0x32a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x312>
 8005aa8:	4b7b      	ldr	r3, [pc, #492]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	4a7a      	ldr	r2, [pc, #488]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab4:	4b78      	ldr	r3, [pc, #480]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	4a77      	ldr	r2, [pc, #476]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac0:	e00b      	b.n	8005ada <HAL_RCC_OscConfig+0x32a>
 8005ac2:	4b75      	ldr	r3, [pc, #468]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	4a74      	ldr	r2, [pc, #464]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ace:	4b72      	ldr	r3, [pc, #456]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	4a71      	ldr	r2, [pc, #452]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005ad4:	f023 0304 	bic.w	r3, r3, #4
 8005ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d015      	beq.n	8005b0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fe f9ed 	bl	8003ec0 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fe f9e9 	bl	8003ec0 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0c5      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b00:	4b65      	ldr	r3, [pc, #404]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ee      	beq.n	8005aea <HAL_RCC_OscConfig+0x33a>
 8005b0c:	e014      	b.n	8005b38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0e:	f7fe f9d7 	bl	8003ec0 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fe f9d3 	bl	8003ec0 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e0af      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2c:	4b5a      	ldr	r3, [pc, #360]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ee      	bne.n	8005b16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3e:	4b56      	ldr	r3, [pc, #344]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	4a55      	ldr	r2, [pc, #340]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 809b 	beq.w	8005c8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b54:	4b50      	ldr	r3, [pc, #320]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 030c 	and.w	r3, r3, #12
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d05c      	beq.n	8005c1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d141      	bne.n	8005bec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b68:	4b4c      	ldr	r3, [pc, #304]	; (8005c9c <HAL_RCC_OscConfig+0x4ec>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6e:	f7fe f9a7 	bl	8003ec0 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b76:	f7fe f9a3 	bl	8003ec0 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e081      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b88:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	019b      	lsls	r3, r3, #6
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	3b01      	subs	r3, #1
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	061b      	lsls	r3, r3, #24
 8005bb8:	4937      	ldr	r1, [pc, #220]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bbe:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <HAL_RCC_OscConfig+0x4ec>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fe f97c 	bl	8003ec0 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bcc:	f7fe f978 	bl	8003ec0 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e056      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bde:	4b2e      	ldr	r3, [pc, #184]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0x41c>
 8005bea:	e04e      	b.n	8005c8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bec:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <HAL_RCC_OscConfig+0x4ec>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf2:	f7fe f965 	bl	8003ec0 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fe f961 	bl	8003ec0 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e03f      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0c:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCC_OscConfig+0x44a>
 8005c18:	e037      	b.n	8005c8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e032      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c26:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <HAL_RCC_OscConfig+0x4e8>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d028      	beq.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d121      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d11a      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c56:	4013      	ands	r3, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d111      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d107      	bne.n	8005c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d001      	beq.n	8005c8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40007000 	.word	0x40007000
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	42470060 	.word	0x42470060

08005ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0cc      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b68      	ldr	r3, [pc, #416]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90c      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b65      	ldr	r3, [pc, #404]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cca:	4b63      	ldr	r3, [pc, #396]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0b8      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf4:	4b59      	ldr	r3, [pc, #356]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a58      	ldr	r2, [pc, #352]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d0c:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4a52      	ldr	r2, [pc, #328]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d18:	4b50      	ldr	r3, [pc, #320]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	494d      	ldr	r1, [pc, #308]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d119      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e07f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d003      	beq.n	8005d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6e:	4b3b      	ldr	r3, [pc, #236]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e067      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4934      	ldr	r1, [pc, #208]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d90:	f7fe f896 	bl	8003ec0 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7fe f892 	bl	8003ec0 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e04f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b2b      	ldr	r3, [pc, #172]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20c      	bcs.n	8005de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e032      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4916      	ldr	r1, [pc, #88]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	490e      	ldr	r1, [pc, #56]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e26:	f000 f821 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	490a      	ldr	r1, [pc, #40]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	5ccb      	ldrb	r3, [r1, r3]
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e42:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd fff6 	bl	8003e38 <HAL_InitTick>

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40023c00 	.word	0x40023c00
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	0800c180 	.word	0x0800c180
 8005e64:	20000008 	.word	0x20000008
 8005e68:	2000000c 	.word	0x2000000c

08005e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e6c:	b5b0      	push	{r4, r5, r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e72:	2100      	movs	r1, #0
 8005e74:	6079      	str	r1, [r7, #4]
 8005e76:	2100      	movs	r1, #0
 8005e78:	60f9      	str	r1, [r7, #12]
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e7e:	2100      	movs	r1, #0
 8005e80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e82:	4952      	ldr	r1, [pc, #328]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x160>)
 8005e84:	6889      	ldr	r1, [r1, #8]
 8005e86:	f001 010c 	and.w	r1, r1, #12
 8005e8a:	2908      	cmp	r1, #8
 8005e8c:	d00d      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x3e>
 8005e8e:	2908      	cmp	r1, #8
 8005e90:	f200 8094 	bhi.w	8005fbc <HAL_RCC_GetSysClockFreq+0x150>
 8005e94:	2900      	cmp	r1, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_RCC_GetSysClockFreq+0x32>
 8005e98:	2904      	cmp	r1, #4
 8005e9a:	d003      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x38>
 8005e9c:	e08e      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e9e:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005ea0:	60bb      	str	r3, [r7, #8]
       break;
 8005ea2:	e08e      	b.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ea4:	4b4b      	ldr	r3, [pc, #300]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ea6:	60bb      	str	r3, [r7, #8]
      break;
 8005ea8:	e08b      	b.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eaa:	4948      	ldr	r1, [pc, #288]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x160>)
 8005eac:	6849      	ldr	r1, [r1, #4]
 8005eae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005eb2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eb4:	4945      	ldr	r1, [pc, #276]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x160>)
 8005eb6:	6849      	ldr	r1, [r1, #4]
 8005eb8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	d024      	beq.n	8005f0a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec0:	4942      	ldr	r1, [pc, #264]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ec2:	6849      	ldr	r1, [r1, #4]
 8005ec4:	0989      	lsrs	r1, r1, #6
 8005ec6:	4608      	mov	r0, r1
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ed0:	f04f 0500 	mov.w	r5, #0
 8005ed4:	ea00 0204 	and.w	r2, r0, r4
 8005ed8:	ea01 0305 	and.w	r3, r1, r5
 8005edc:	493d      	ldr	r1, [pc, #244]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ede:	fb01 f003 	mul.w	r0, r1, r3
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	fb01 f102 	mul.w	r1, r1, r2
 8005ee8:	1844      	adds	r4, r0, r1
 8005eea:	493a      	ldr	r1, [pc, #232]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005eec:	fba2 0101 	umull	r0, r1, r2, r1
 8005ef0:	1863      	adds	r3, r4, r1
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	f7fa f9b8 	bl	8000270 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4613      	mov	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e04a      	b.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f0a:	4b30      	ldr	r3, [pc, #192]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x160>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	099b      	lsrs	r3, r3, #6
 8005f10:	461a      	mov	r2, r3
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	ea02 0400 	and.w	r4, r2, r0
 8005f22:	ea03 0501 	and.w	r5, r3, r1
 8005f26:	4620      	mov	r0, r4
 8005f28:	4629      	mov	r1, r5
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	014b      	lsls	r3, r1, #5
 8005f34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f38:	0142      	lsls	r2, r0, #5
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	1b00      	subs	r0, r0, r4
 8005f40:	eb61 0105 	sbc.w	r1, r1, r5
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	018b      	lsls	r3, r1, #6
 8005f4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f52:	0182      	lsls	r2, r0, #6
 8005f54:	1a12      	subs	r2, r2, r0
 8005f56:	eb63 0301 	sbc.w	r3, r3, r1
 8005f5a:	f04f 0000 	mov.w	r0, #0
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	00d9      	lsls	r1, r3, #3
 8005f64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f68:	00d0      	lsls	r0, r2, #3
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	1912      	adds	r2, r2, r4
 8005f70:	eb45 0303 	adc.w	r3, r5, r3
 8005f74:	f04f 0000 	mov.w	r0, #0
 8005f78:	f04f 0100 	mov.w	r1, #0
 8005f7c:	0299      	lsls	r1, r3, #10
 8005f7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f82:	0290      	lsls	r0, r2, #10
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	f7fa f96c 	bl	8000270 <__aeabi_uldivmod>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	0c1b      	lsrs	r3, r3, #16
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	3301      	adds	r3, #1
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb8:	60bb      	str	r3, [r7, #8]
      break;
 8005fba:	e002      	b.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fbc:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005fbe:	60bb      	str	r3, [r7, #8]
      break;
 8005fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bdb0      	pop	{r4, r5, r7, pc}
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	00f42400 	.word	0x00f42400
 8005fd4:	017d7840 	.word	0x017d7840

08005fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <HAL_RCC_GetHCLKFreq+0x14>)
 8005fde:	681b      	ldr	r3, [r3, #0]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000008 	.word	0x20000008

08005ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ff4:	f7ff fff0 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	4b05      	ldr	r3, [pc, #20]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	0a9b      	lsrs	r3, r3, #10
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	4903      	ldr	r1, [pc, #12]	; (8006014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006006:	5ccb      	ldrb	r3, [r1, r3]
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800600c:	4618      	mov	r0, r3
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40023800 	.word	0x40023800
 8006014:	0800c190 	.word	0x0800c190

08006018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800601c:	f7ff ffdc 	bl	8005fd8 <HAL_RCC_GetHCLKFreq>
 8006020:	4602      	mov	r2, r0
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	0b5b      	lsrs	r3, r3, #13
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	4903      	ldr	r1, [pc, #12]	; (800603c <HAL_RCC_GetPCLK2Freq+0x24>)
 800602e:	5ccb      	ldrb	r3, [r1, r3]
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40023800 	.word	0x40023800
 800603c:	0800c190 	.word	0x0800c190

08006040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e07b      	b.n	800614a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006062:	d009      	beq.n	8006078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	61da      	str	r2, [r3, #28]
 800606a:	e005      	b.n	8006078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fd fbe2 	bl	800385c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fc:	ea42 0103 	orr.w	r1, r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	0c1b      	lsrs	r3, r3, #16
 8006116:	f003 0104 	and.w	r1, r3, #4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0210 	and.w	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b088      	sub	sp, #32
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	4613      	mov	r3, r2
 8006160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_SPI_Transmit+0x22>
 8006170:	2302      	movs	r3, #2
 8006172:	e126      	b.n	80063c2 <HAL_SPI_Transmit+0x270>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800617c:	f7fd fea0 	bl	8003ec0 <HAL_GetTick>
 8006180:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d002      	beq.n	8006198 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006192:	2302      	movs	r3, #2
 8006194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006196:	e10b      	b.n	80063b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_SPI_Transmit+0x52>
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061a8:	e102      	b.n	80063b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2203      	movs	r2, #3
 80061ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f0:	d10f      	bne.n	8006212 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006210:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d007      	beq.n	8006230 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006238:	d14b      	bne.n	80062d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_SPI_Transmit+0xf6>
 8006242:	8afb      	ldrh	r3, [r7, #22]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d13e      	bne.n	80062c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	881a      	ldrh	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	1c9a      	adds	r2, r3, #2
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800626c:	e02b      	b.n	80062c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	d112      	bne.n	80062a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	881a      	ldrh	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	1c9a      	adds	r2, r3, #2
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	86da      	strh	r2, [r3, #54]	; 0x36
 80062a0:	e011      	b.n	80062c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062a2:	f7fd fe0d 	bl	8003ec0 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d803      	bhi.n	80062ba <HAL_SPI_Transmit+0x168>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d102      	bne.n	80062c0 <HAL_SPI_Transmit+0x16e>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062c4:	e074      	b.n	80063b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ce      	bne.n	800626e <HAL_SPI_Transmit+0x11c>
 80062d0:	e04c      	b.n	800636c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_SPI_Transmit+0x18e>
 80062da:	8afb      	ldrh	r3, [r7, #22]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d140      	bne.n	8006362 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006306:	e02c      	b.n	8006362 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b02      	cmp	r3, #2
 8006314:	d113      	bne.n	800633e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	7812      	ldrb	r2, [r2, #0]
 8006322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	86da      	strh	r2, [r3, #54]	; 0x36
 800633c:	e011      	b.n	8006362 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800633e:	f7fd fdbf 	bl	8003ec0 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d803      	bhi.n	8006356 <HAL_SPI_Transmit+0x204>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d102      	bne.n	800635c <HAL_SPI_Transmit+0x20a>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006360:	e026      	b.n	80063b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1cd      	bne.n	8006308 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fbcb 	bl	8006b0c <SPI_EndRxTxTransaction>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e000      	b.n	80063b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80063ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b088      	sub	sp, #32
 80063ce:	af02      	add	r7, sp, #8
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	603b      	str	r3, [r7, #0]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e6:	d112      	bne.n	800640e <HAL_SPI_Receive+0x44>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10e      	bne.n	800640e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2204      	movs	r2, #4
 80063f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063f8:	88fa      	ldrh	r2, [r7, #6]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	4613      	mov	r3, r2
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f8f1 	bl	80065ec <HAL_SPI_TransmitReceive>
 800640a:	4603      	mov	r3, r0
 800640c:	e0ea      	b.n	80065e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_SPI_Receive+0x52>
 8006418:	2302      	movs	r3, #2
 800641a:	e0e3      	b.n	80065e4 <HAL_SPI_Receive+0x21a>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006424:	f7fd fd4c 	bl	8003ec0 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	d002      	beq.n	800643c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006436:	2302      	movs	r3, #2
 8006438:	75fb      	strb	r3, [r7, #23]
    goto error;
 800643a:	e0ca      	b.n	80065d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_SPI_Receive+0x7e>
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800644c:	e0c1      	b.n	80065d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2204      	movs	r2, #4
 8006452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	88fa      	ldrh	r2, [r7, #6]
 8006466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	88fa      	ldrh	r2, [r7, #6]
 800646c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006494:	d10f      	bne.n	80064b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d007      	beq.n	80064d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d162      	bne.n	80065a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064dc:	e02e      	b.n	800653c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d115      	bne.n	8006518 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f103 020c 	add.w	r2, r3, #12
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	7812      	ldrb	r2, [r2, #0]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006516:	e011      	b.n	800653c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006518:	f7fd fcd2 	bl	8003ec0 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d803      	bhi.n	8006530 <HAL_SPI_Receive+0x166>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d102      	bne.n	8006536 <HAL_SPI_Receive+0x16c>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d102      	bne.n	800653c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	75fb      	strb	r3, [r7, #23]
          goto error;
 800653a:	e04a      	b.n	80065d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1cb      	bne.n	80064de <HAL_SPI_Receive+0x114>
 8006546:	e031      	b.n	80065ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b01      	cmp	r3, #1
 8006554:	d113      	bne.n	800657e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	b292      	uxth	r2, r2
 8006562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	1c9a      	adds	r2, r3, #2
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800657c:	e011      	b.n	80065a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657e:	f7fd fc9f 	bl	8003ec0 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d803      	bhi.n	8006596 <HAL_SPI_Receive+0x1cc>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d102      	bne.n	800659c <HAL_SPI_Receive+0x1d2>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065a0:	e017      	b.n	80065d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1cd      	bne.n	8006548 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fa45 	bl	8006a40 <SPI_EndRxTransaction>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
 80065ce:	e000      	b.n	80065d2 <HAL_SPI_Receive+0x208>
  }

error :
 80065d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08c      	sub	sp, #48	; 0x30
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065fa:	2301      	movs	r3, #1
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x26>
 800660e:	2302      	movs	r3, #2
 8006610:	e18a      	b.n	8006928 <HAL_SPI_TransmitReceive+0x33c>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800661a:	f7fd fc51 	bl	8003ec0 <HAL_GetTick>
 800661e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006630:	887b      	ldrh	r3, [r7, #2]
 8006632:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006638:	2b01      	cmp	r3, #1
 800663a:	d00f      	beq.n	800665c <HAL_SPI_TransmitReceive+0x70>
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006642:	d107      	bne.n	8006654 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <HAL_SPI_TransmitReceive+0x68>
 800664c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006650:	2b04      	cmp	r3, #4
 8006652:	d003      	beq.n	800665c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006654:	2302      	movs	r3, #2
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800665a:	e15b      	b.n	8006914 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_SPI_TransmitReceive+0x82>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <HAL_SPI_TransmitReceive+0x82>
 8006668:	887b      	ldrh	r3, [r7, #2]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d103      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006674:	e14e      	b.n	8006914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b04      	cmp	r3, #4
 8006680:	d003      	beq.n	800668a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2205      	movs	r2, #5
 8006686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	887a      	ldrh	r2, [r7, #2]
 800669a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	887a      	ldrh	r2, [r7, #2]
 80066a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	887a      	ldrh	r2, [r7, #2]
 80066ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	887a      	ldrh	r2, [r7, #2]
 80066b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d007      	beq.n	80066de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e6:	d178      	bne.n	80067da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x10a>
 80066f0:	8b7b      	ldrh	r3, [r7, #26]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d166      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	881a      	ldrh	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	1c9a      	adds	r2, r3, #2
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800671a:	e053      	b.n	80067c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	d11b      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x176>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d016      	beq.n	8006762 <HAL_SPI_TransmitReceive+0x176>
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	2b01      	cmp	r3, #1
 8006738:	d113      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	881a      	ldrh	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	1c9a      	adds	r2, r3, #2
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d119      	bne.n	80067a4 <HAL_SPI_TransmitReceive+0x1b8>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d014      	beq.n	80067a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	b292      	uxth	r2, r2
 8006786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	1c9a      	adds	r2, r3, #2
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067a0:	2301      	movs	r3, #1
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067a4:	f7fd fb8c 	bl	8003ec0 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d807      	bhi.n	80067c4 <HAL_SPI_TransmitReceive+0x1d8>
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d003      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067c2:	e0a7      	b.n	8006914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1a6      	bne.n	800671c <HAL_SPI_TransmitReceive+0x130>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1a1      	bne.n	800671c <HAL_SPI_TransmitReceive+0x130>
 80067d8:	e07c      	b.n	80068d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_SPI_TransmitReceive+0x1fc>
 80067e2:	8b7b      	ldrh	r3, [r7, #26]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d16b      	bne.n	80068c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	7812      	ldrb	r2, [r2, #0]
 80067f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800680e:	e057      	b.n	80068c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b02      	cmp	r3, #2
 800681c:	d11c      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x26c>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d017      	beq.n	8006858 <HAL_SPI_TransmitReceive+0x26c>
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d114      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	7812      	ldrb	r2, [r2, #0]
 800683a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b01      	cmp	r3, #1
 8006864:	d119      	bne.n	800689a <HAL_SPI_TransmitReceive+0x2ae>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d014      	beq.n	800689a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006896:	2301      	movs	r3, #1
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800689a:	f7fd fb11 	bl	8003ec0 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d803      	bhi.n	80068b2 <HAL_SPI_TransmitReceive+0x2c6>
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d102      	bne.n	80068b8 <HAL_SPI_TransmitReceive+0x2cc>
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068be:	e029      	b.n	8006914 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1a2      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x224>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d19d      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f917 	bl	8006b0c <SPI_EndRxTxTransaction>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068f0:	e010      	b.n	8006914 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	e000      	b.n	8006914 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006928:	4618      	mov	r0, r3
 800692a:	3730      	adds	r7, #48	; 0x30
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006940:	f7fd fabe 	bl	8003ec0 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	4413      	add	r3, r2
 800694e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006950:	f7fd fab6 	bl	8003ec0 <HAL_GetTick>
 8006954:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006956:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	015b      	lsls	r3, r3, #5
 800695c:	0d1b      	lsrs	r3, r3, #20
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	fb02 f303 	mul.w	r3, r2, r3
 8006964:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006966:	e054      	b.n	8006a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d050      	beq.n	8006a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006970:	f7fd faa6 	bl	8003ec0 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	429a      	cmp	r2, r3
 800697e:	d902      	bls.n	8006986 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d13d      	bne.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006994:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800699e:	d111      	bne.n	80069c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a8:	d004      	beq.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b2:	d107      	bne.n	80069c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069cc:	d10f      	bne.n	80069ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e017      	b.n	8006a32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	bf0c      	ite	eq
 8006a22:	2301      	moveq	r3, #1
 8006a24:	2300      	movne	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d19b      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3720      	adds	r7, #32
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000008 	.word	0x20000008

08006a40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a54:	d111      	bne.n	8006a7a <SPI_EndRxTransaction+0x3a>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5e:	d004      	beq.n	8006a6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a68:	d107      	bne.n	8006a7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a82:	d12a      	bne.n	8006ada <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8c:	d012      	beq.n	8006ab4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	2180      	movs	r1, #128	; 0x80
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff ff49 	bl	8006930 <SPI_WaitFlagStateUntilTimeout>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d02d      	beq.n	8006b00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e026      	b.n	8006b02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2200      	movs	r2, #0
 8006abc:	2101      	movs	r1, #1
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7ff ff36 	bl	8006930 <SPI_WaitFlagStateUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01a      	beq.n	8006b00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f043 0220 	orr.w	r2, r3, #32
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e013      	b.n	8006b02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff ff23 	bl	8006930 <SPI_WaitFlagStateUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e000      	b.n	8006b02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b18:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <SPI_EndRxTxTransaction+0x7c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <SPI_EndRxTxTransaction+0x80>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	0d5b      	lsrs	r3, r3, #21
 8006b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b36:	d112      	bne.n	8006b5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2180      	movs	r1, #128	; 0x80
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff fef4 	bl	8006930 <SPI_WaitFlagStateUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d016      	beq.n	8006b7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b52:	f043 0220 	orr.w	r2, r3, #32
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e00f      	b.n	8006b7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d0f2      	beq.n	8006b5e <SPI_EndRxTxTransaction+0x52>
 8006b78:	e000      	b.n	8006b7c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b7a:	bf00      	nop
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000008 	.word	0x20000008
 8006b8c:	165e9f81 	.word	0x165e9f81

08006b90 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e034      	b.n	8006c10 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7fc ff58 	bl	8003a70 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f001 fc6e 	bl	80084ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6818      	ldr	r0, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	f001 fcb8 	bl	8008550 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6858      	ldr	r0, [r3, #4]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	f001 fced 	bl	80085cc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	6892      	ldr	r2, [r2, #8]
 8006bfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	6892      	ldr	r2, [r2, #8]
 8006c06:	f041 0101 	orr.w	r1, r1, #1
 8006c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e041      	b.n	8006cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fc fe54 	bl	80038ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f000 fa96 	bl	8007188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d001      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e04e      	b.n	8006d6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0201 	orr.w	r2, r2, #1
 8006ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a23      	ldr	r2, [pc, #140]	; (8006d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d022      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfa:	d01d      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d018      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	; (8006d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00e      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d111      	bne.n	8006d5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d010      	beq.n	8006d6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5a:	e007      	b.n	8006d6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40000400 	.word	0x40000400
 8006d84:	40000800 	.word	0x40000800
 8006d88:	40000c00 	.word	0x40000c00
 8006d8c:	40010400 	.word	0x40010400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40001800 	.word	0x40001800

08006d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d122      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d11b      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0202 	mvn.w	r2, #2
 8006dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f9b5 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006de0:	e005      	b.n	8006dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f9a7 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f9b8 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d122      	bne.n	8006e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d11b      	bne.n	8006e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0204 	mvn.w	r2, #4
 8006e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f98b 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006e34:	e005      	b.n	8006e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f97d 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f98e 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d122      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d11b      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0208 	mvn.w	r2, #8
 8006e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2204      	movs	r2, #4
 8006e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f961 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006e88:	e005      	b.n	8006e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f953 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f964 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d122      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b10      	cmp	r3, #16
 8006eb6:	d11b      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f06f 0210 	mvn.w	r2, #16
 8006ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f937 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006edc:	e005      	b.n	8006eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f929 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f93a 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10e      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0201 	mvn.w	r2, #1
 8006f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fc fbb6 	bl	8003688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b80      	cmp	r3, #128	; 0x80
 8006f28:	d10e      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f34:	2b80      	cmp	r3, #128	; 0x80
 8006f36:	d107      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fae0 	bl	8007508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d10e      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d107      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f8ff 	bl	8007172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d10e      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d107      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0220 	mvn.w	r2, #32
 8006f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 faaa 	bl	80074f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e0b4      	b.n	800712e <HAL_TIM_ConfigClockSource+0x186>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffc:	d03e      	beq.n	800707c <HAL_TIM_ConfigClockSource+0xd4>
 8006ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007002:	f200 8087 	bhi.w	8007114 <HAL_TIM_ConfigClockSource+0x16c>
 8007006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700a:	f000 8086 	beq.w	800711a <HAL_TIM_ConfigClockSource+0x172>
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007012:	d87f      	bhi.n	8007114 <HAL_TIM_ConfigClockSource+0x16c>
 8007014:	2b70      	cmp	r3, #112	; 0x70
 8007016:	d01a      	beq.n	800704e <HAL_TIM_ConfigClockSource+0xa6>
 8007018:	2b70      	cmp	r3, #112	; 0x70
 800701a:	d87b      	bhi.n	8007114 <HAL_TIM_ConfigClockSource+0x16c>
 800701c:	2b60      	cmp	r3, #96	; 0x60
 800701e:	d050      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0x11a>
 8007020:	2b60      	cmp	r3, #96	; 0x60
 8007022:	d877      	bhi.n	8007114 <HAL_TIM_ConfigClockSource+0x16c>
 8007024:	2b50      	cmp	r3, #80	; 0x50
 8007026:	d03c      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0xfa>
 8007028:	2b50      	cmp	r3, #80	; 0x50
 800702a:	d873      	bhi.n	8007114 <HAL_TIM_ConfigClockSource+0x16c>
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	d058      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x13a>
 8007030:	2b40      	cmp	r3, #64	; 0x40
 8007032:	d86f      	bhi.n	8007114 <HAL_TIM_ConfigClockSource+0x16c>
 8007034:	2b30      	cmp	r3, #48	; 0x30
 8007036:	d064      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x15a>
 8007038:	2b30      	cmp	r3, #48	; 0x30
 800703a:	d86b      	bhi.n	8007114 <HAL_TIM_ConfigClockSource+0x16c>
 800703c:	2b20      	cmp	r3, #32
 800703e:	d060      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x15a>
 8007040:	2b20      	cmp	r3, #32
 8007042:	d867      	bhi.n	8007114 <HAL_TIM_ConfigClockSource+0x16c>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d05c      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x15a>
 8007048:	2b10      	cmp	r3, #16
 800704a:	d05a      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x15a>
 800704c:	e062      	b.n	8007114 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6899      	ldr	r1, [r3, #8]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f000 f9ad 	bl	80073bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	609a      	str	r2, [r3, #8]
      break;
 800707a:	e04f      	b.n	800711c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	6899      	ldr	r1, [r3, #8]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f000 f996 	bl	80073bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800709e:	609a      	str	r2, [r3, #8]
      break;
 80070a0:	e03c      	b.n	800711c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	6859      	ldr	r1, [r3, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f000 f90a 	bl	80072c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2150      	movs	r1, #80	; 0x50
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 f963 	bl	8007386 <TIM_ITRx_SetConfig>
      break;
 80070c0:	e02c      	b.n	800711c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	6859      	ldr	r1, [r3, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f000 f929 	bl	8007326 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2160      	movs	r1, #96	; 0x60
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f953 	bl	8007386 <TIM_ITRx_SetConfig>
      break;
 80070e0:	e01c      	b.n	800711c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	6859      	ldr	r1, [r3, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f000 f8ea 	bl	80072c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2140      	movs	r1, #64	; 0x40
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 f943 	bl	8007386 <TIM_ITRx_SetConfig>
      break;
 8007100:	e00c      	b.n	800711c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4619      	mov	r1, r3
 800710c:	4610      	mov	r0, r2
 800710e:	f000 f93a 	bl	8007386 <TIM_ITRx_SetConfig>
      break;
 8007112:	e003      	b.n	800711c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	73fb      	strb	r3, [r7, #15]
      break;
 8007118:	e000      	b.n	800711c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800711a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a40      	ldr	r2, [pc, #256]	; (800729c <TIM_Base_SetConfig+0x114>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d013      	beq.n	80071c8 <TIM_Base_SetConfig+0x40>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a6:	d00f      	beq.n	80071c8 <TIM_Base_SetConfig+0x40>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a3d      	ldr	r2, [pc, #244]	; (80072a0 <TIM_Base_SetConfig+0x118>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <TIM_Base_SetConfig+0x40>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a3c      	ldr	r2, [pc, #240]	; (80072a4 <TIM_Base_SetConfig+0x11c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <TIM_Base_SetConfig+0x40>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a3b      	ldr	r2, [pc, #236]	; (80072a8 <TIM_Base_SetConfig+0x120>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_Base_SetConfig+0x40>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a3a      	ldr	r2, [pc, #232]	; (80072ac <TIM_Base_SetConfig+0x124>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d108      	bne.n	80071da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a2f      	ldr	r2, [pc, #188]	; (800729c <TIM_Base_SetConfig+0x114>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d02b      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e8:	d027      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2c      	ldr	r2, [pc, #176]	; (80072a0 <TIM_Base_SetConfig+0x118>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d023      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a2b      	ldr	r2, [pc, #172]	; (80072a4 <TIM_Base_SetConfig+0x11c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01f      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2a      	ldr	r2, [pc, #168]	; (80072a8 <TIM_Base_SetConfig+0x120>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01b      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a29      	ldr	r2, [pc, #164]	; (80072ac <TIM_Base_SetConfig+0x124>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d017      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a28      	ldr	r2, [pc, #160]	; (80072b0 <TIM_Base_SetConfig+0x128>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a27      	ldr	r2, [pc, #156]	; (80072b4 <TIM_Base_SetConfig+0x12c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00f      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a26      	ldr	r2, [pc, #152]	; (80072b8 <TIM_Base_SetConfig+0x130>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00b      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a25      	ldr	r2, [pc, #148]	; (80072bc <TIM_Base_SetConfig+0x134>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d007      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a24      	ldr	r2, [pc, #144]	; (80072c0 <TIM_Base_SetConfig+0x138>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a23      	ldr	r2, [pc, #140]	; (80072c4 <TIM_Base_SetConfig+0x13c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d108      	bne.n	800724c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4313      	orrs	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a0a      	ldr	r2, [pc, #40]	; (800729c <TIM_Base_SetConfig+0x114>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <TIM_Base_SetConfig+0xf8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a0c      	ldr	r2, [pc, #48]	; (80072ac <TIM_Base_SetConfig+0x124>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d103      	bne.n	8007288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	615a      	str	r2, [r3, #20]
}
 800728e:	bf00      	nop
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40010000 	.word	0x40010000
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40010400 	.word	0x40010400
 80072b0:	40014000 	.word	0x40014000
 80072b4:	40014400 	.word	0x40014400
 80072b8:	40014800 	.word	0x40014800
 80072bc:	40001800 	.word	0x40001800
 80072c0:	40001c00 	.word	0x40001c00
 80072c4:	40002000 	.word	0x40002000

080072c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0201 	bic.w	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 030a 	bic.w	r3, r3, #10
 8007304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007326:	b480      	push	{r7}
 8007328:	b087      	sub	sp, #28
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f023 0210 	bic.w	r2, r3, #16
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	031b      	lsls	r3, r3, #12
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	621a      	str	r2, [r3, #32]
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f043 0307 	orr.w	r3, r3, #7
 80073a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	609a      	str	r2, [r3, #8]
}
 80073b0:	bf00      	nop
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	021a      	lsls	r2, r3, #8
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	431a      	orrs	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	609a      	str	r2, [r3, #8]
}
 80073f0:	bf00      	nop
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007410:	2302      	movs	r3, #2
 8007412:	e05a      	b.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a21      	ldr	r2, [pc, #132]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d022      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007460:	d01d      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1d      	ldr	r2, [pc, #116]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d018      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a17      	ldr	r2, [pc, #92]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10c      	bne.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40010000 	.word	0x40010000
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800
 80074e4:	40000c00 	.word	0x40000c00
 80074e8:	40010400 	.word	0x40010400
 80074ec:	40014000 	.word	0x40014000
 80074f0:	40001800 	.word	0x40001800

080074f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e03f      	b.n	80075ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fc f9f8 	bl	8003938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2224      	movs	r2, #36	; 0x24
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800755e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fddb 	bl	800811c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b08a      	sub	sp, #40	; 0x28
 80075ba:	af02      	add	r7, sp, #8
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	4613      	mov	r3, r2
 80075c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d17c      	bne.n	80076d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_UART_Transmit+0x2c>
 80075dc:	88fb      	ldrh	r3, [r7, #6]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e075      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Transmit+0x3e>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e06e      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2221      	movs	r2, #33	; 0x21
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800760a:	f7fc fc59 	bl	8003ec0 <HAL_GetTick>
 800760e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007624:	d108      	bne.n	8007638 <HAL_UART_Transmit+0x82>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	e003      	b.n	8007640 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007648:	e02a      	b.n	80076a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2200      	movs	r2, #0
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fb1f 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e036      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10b      	bne.n	8007682 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	3302      	adds	r3, #2
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	e007      	b.n	8007692 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	3301      	adds	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1cf      	bne.n	800764a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2200      	movs	r2, #0
 80076b2:	2140      	movs	r1, #64	; 0x40
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 faef 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e006      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e000      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d11d      	bne.n	8007730 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_UART_Receive_IT+0x26>
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e016      	b.n	8007732 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <HAL_UART_Receive_IT+0x38>
 800770e:	2302      	movs	r3, #2
 8007710:	e00f      	b.n	8007732 <HAL_UART_Receive_IT+0x58>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007720:	88fb      	ldrh	r3, [r7, #6]
 8007722:	461a      	mov	r2, r3
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fb24 	bl	8007d74 <UART_Start_Receive_IT>
 800772c:	4603      	mov	r3, r0
 800772e:	e000      	b.n	8007732 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007730:	2302      	movs	r3, #2
  }
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b0ba      	sub	sp, #232	; 0xe8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007762:	2300      	movs	r3, #0
 8007764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007768:	2300      	movs	r3, #0
 800776a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800776e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800777a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10f      	bne.n	80077a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <HAL_UART_IRQHandler+0x66>
 800778e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc03 	bl	8007fa6 <UART_Receive_IT>
      return;
 80077a0:	e256      	b.n	8007c50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 80de 	beq.w	8007968 <HAL_UART_IRQHandler+0x22c>
 80077ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80d1 	beq.w	8007968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <HAL_UART_IRQHandler+0xae>
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	f043 0201 	orr.w	r2, r3, #1
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <HAL_UART_IRQHandler+0xd2>
 80077f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f043 0202 	orr.w	r2, r3, #2
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00b      	beq.n	8007832 <HAL_UART_IRQHandler+0xf6>
 800781a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	f043 0204 	orr.w	r2, r3, #4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d011      	beq.n	8007862 <HAL_UART_IRQHandler+0x126>
 800783e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800784a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	f043 0208 	orr.w	r2, r3, #8
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 81ed 	beq.w	8007c46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800786c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <HAL_UART_IRQHandler+0x14e>
 8007878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb8e 	bl	8007fa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007894:	2b40      	cmp	r3, #64	; 0x40
 8007896:	bf0c      	ite	eq
 8007898:	2301      	moveq	r3, #1
 800789a:	2300      	movne	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <HAL_UART_IRQHandler+0x17a>
 80078ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d04f      	beq.n	8007956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa96 	bl	8007de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c6:	2b40      	cmp	r3, #64	; 0x40
 80078c8:	d141      	bne.n	800794e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3314      	adds	r3, #20
 80078d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3314      	adds	r3, #20
 80078f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800790e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1d9      	bne.n	80078ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	2b00      	cmp	r3, #0
 800791c:	d013      	beq.n	8007946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	4a7d      	ldr	r2, [pc, #500]	; (8007b18 <HAL_UART_IRQHandler+0x3dc>)
 8007924:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	4618      	mov	r0, r3
 800792c:	f7fc fc79 	bl	8004222 <HAL_DMA_Abort_IT>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d016      	beq.n	8007964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	e00e      	b.n	8007964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f990 	bl	8007c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	e00a      	b.n	8007964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f98c 	bl	8007c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	e006      	b.n	8007964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f988 	bl	8007c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007962:	e170      	b.n	8007c46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007964:	bf00      	nop
    return;
 8007966:	e16e      	b.n	8007c46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	2b01      	cmp	r3, #1
 800796e:	f040 814a 	bne.w	8007c06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	f003 0310 	and.w	r3, r3, #16
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 8143 	beq.w	8007c06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 813c 	beq.w	8007c06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	f040 80b4 	bne.w	8007b1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8140 	beq.w	8007c4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f080 8139 	bcs.w	8007c4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ea:	f000 8088 	beq.w	8007afe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1d9      	bne.n	80079ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3314      	adds	r3, #20
 8007a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a4c:	f023 0301 	bic.w	r3, r3, #1
 8007a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e1      	bne.n	8007a3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3314      	adds	r3, #20
 8007a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e3      	bne.n	8007a76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ace:	f023 0310 	bic.w	r3, r3, #16
 8007ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ae0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ae2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e3      	bne.n	8007abc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fc fb22 	bl	8004142 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f8b6 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b14:	e099      	b.n	8007c4a <HAL_UART_IRQHandler+0x50e>
 8007b16:	bf00      	nop
 8007b18:	08007eaf 	.word	0x08007eaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 808b 	beq.w	8007c4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8086 	beq.w	8007c4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	330c      	adds	r3, #12
 8007b48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	330c      	adds	r3, #12
 8007b62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b66:	647a      	str	r2, [r7, #68]	; 0x44
 8007b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e3      	bne.n	8007b42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3314      	adds	r3, #20
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	623b      	str	r3, [r7, #32]
   return(result);
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3314      	adds	r3, #20
 8007b9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b9e:	633a      	str	r2, [r7, #48]	; 0x30
 8007ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e3      	bne.n	8007b7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007be4:	61fa      	str	r2, [r7, #28]
 8007be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	69b9      	ldr	r1, [r7, #24]
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e3      	bne.n	8007bc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f83e 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c04:	e023      	b.n	8007c4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <HAL_UART_IRQHandler+0x4ea>
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f959 	bl	8007ed6 <UART_Transmit_IT>
    return;
 8007c24:	e014      	b.n	8007c50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <HAL_UART_IRQHandler+0x514>
 8007c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f999 	bl	8007f76 <UART_EndTransmit_IT>
    return;
 8007c44:	e004      	b.n	8007c50 <HAL_UART_IRQHandler+0x514>
    return;
 8007c46:	bf00      	nop
 8007c48:	e002      	b.n	8007c50 <HAL_UART_IRQHandler+0x514>
      return;
 8007c4a:	bf00      	nop
 8007c4c:	e000      	b.n	8007c50 <HAL_UART_IRQHandler+0x514>
      return;
 8007c4e:	bf00      	nop
  }
}
 8007c50:	37e8      	adds	r7, #232	; 0xe8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop

08007c58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b090      	sub	sp, #64	; 0x40
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca8:	e050      	b.n	8007d4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb0:	d04c      	beq.n	8007d4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d007      	beq.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cb8:	f7fc f902 	bl	8003ec0 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d241      	bcs.n	8007d4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ce8:	637a      	str	r2, [r7, #52]	; 0x34
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3314      	adds	r3, #20
 8007d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f023 0301 	bic.w	r3, r3, #1
 8007d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d1c:	623a      	str	r2, [r7, #32]
 8007d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	69f9      	ldr	r1, [r7, #28]
 8007d22:	6a3a      	ldr	r2, [r7, #32]
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e5      	bne.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e00f      	b.n	8007d6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	4013      	ands	r3, r2
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	bf0c      	ite	eq
 8007d5c:	2301      	moveq	r3, #1
 8007d5e:	2300      	movne	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d09f      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3740      	adds	r7, #64	; 0x40
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	88fa      	ldrh	r2, [r7, #6]
 8007d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	88fa      	ldrh	r2, [r7, #6]
 8007d92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2222      	movs	r2, #34	; 0x22
 8007d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007db8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695a      	ldr	r2, [r3, #20]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f042 0201 	orr.w	r2, r2, #1
 8007dc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f042 0220 	orr.w	r2, r2, #32
 8007dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b095      	sub	sp, #84	; 0x54
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	330c      	adds	r3, #12
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e10:	643a      	str	r2, [r7, #64]	; 0x40
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e5      	bne.n	8007df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3314      	adds	r3, #20
 8007e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	e853 3f00 	ldrex	r3, [r3]
 8007e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f023 0301 	bic.w	r3, r3, #1
 8007e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3314      	adds	r3, #20
 8007e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e5      	bne.n	8007e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d119      	bne.n	8007e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f023 0310 	bic.w	r3, r3, #16
 8007e76:	647b      	str	r3, [r7, #68]	; 0x44
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e80:	61ba      	str	r2, [r7, #24]
 8007e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6979      	ldr	r1, [r7, #20]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e5      	bne.n	8007e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ea2:	bf00      	nop
 8007ea4:	3754      	adds	r7, #84	; 0x54
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff fecf 	bl	8007c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b21      	cmp	r3, #33	; 0x21
 8007ee8:	d13e      	bne.n	8007f68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef2:	d114      	bne.n	8007f1e <UART_Transmit_IT+0x48>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d110      	bne.n	8007f1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	1c9a      	adds	r2, r3, #2
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	621a      	str	r2, [r3, #32]
 8007f1c:	e008      	b.n	8007f30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	1c59      	adds	r1, r3, #1
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6211      	str	r1, [r2, #32]
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10f      	bne.n	8007f64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	e000      	b.n	8007f6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f68:	2302      	movs	r3, #2
  }
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fe5e 	bl	8007c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b08c      	sub	sp, #48	; 0x30
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b22      	cmp	r3, #34	; 0x22
 8007fb8:	f040 80ab 	bne.w	8008112 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc4:	d117      	bne.n	8007ff6 <UART_Receive_IT+0x50>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d113      	bne.n	8007ff6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fee:	1c9a      	adds	r2, r3, #2
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8007ff4:	e026      	b.n	8008044 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008008:	d007      	beq.n	800801a <UART_Receive_IT+0x74>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10a      	bne.n	8008028 <UART_Receive_IT+0x82>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d106      	bne.n	8008028 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	b2da      	uxtb	r2, r3
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	e008      	b.n	800803a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008034:	b2da      	uxtb	r2, r3
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29b      	uxth	r3, r3
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4619      	mov	r1, r3
 8008052:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008054:	2b00      	cmp	r3, #0
 8008056:	d15a      	bne.n	800810e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0220 	bic.w	r2, r2, #32
 8008066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	2b01      	cmp	r3, #1
 8008096:	d135      	bne.n	8008104 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	330c      	adds	r3, #12
 80080a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	613b      	str	r3, [r7, #16]
   return(result);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f023 0310 	bic.w	r3, r3, #16
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	330c      	adds	r3, #12
 80080bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080be:	623a      	str	r2, [r7, #32]
 80080c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	69f9      	ldr	r1, [r7, #28]
 80080c4:	6a3a      	ldr	r2, [r7, #32]
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e5      	bne.n	800809e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d10a      	bne.n	80080f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff fdbf 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
 8008102:	e002      	b.n	800810a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fb fdd7 	bl	8003cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	e002      	b.n	8008114 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	e000      	b.n	8008114 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008112:	2302      	movs	r3, #2
  }
}
 8008114:	4618      	mov	r0, r3
 8008116:	3730      	adds	r7, #48	; 0x30
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	b09f      	sub	sp, #124	; 0x7c
 8008122:	af00      	add	r7, sp, #0
 8008124:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	68d9      	ldr	r1, [r3, #12]
 8008134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	ea40 0301 	orr.w	r3, r0, r1
 800813c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800813e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	431a      	orrs	r2, r3
 8008148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	431a      	orrs	r2, r3
 800814e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	4313      	orrs	r3, r2
 8008154:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008160:	f021 010c 	bic.w	r1, r1, #12
 8008164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800816a:	430b      	orrs	r3, r1
 800816c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800816e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817a:	6999      	ldr	r1, [r3, #24]
 800817c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	ea40 0301 	orr.w	r3, r0, r1
 8008184:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4bc5      	ldr	r3, [pc, #788]	; (80084a0 <UART_SetConfig+0x384>)
 800818c:	429a      	cmp	r2, r3
 800818e:	d004      	beq.n	800819a <UART_SetConfig+0x7e>
 8008190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	4bc3      	ldr	r3, [pc, #780]	; (80084a4 <UART_SetConfig+0x388>)
 8008196:	429a      	cmp	r2, r3
 8008198:	d103      	bne.n	80081a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800819a:	f7fd ff3d 	bl	8006018 <HAL_RCC_GetPCLK2Freq>
 800819e:	6778      	str	r0, [r7, #116]	; 0x74
 80081a0:	e002      	b.n	80081a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081a2:	f7fd ff25 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 80081a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b0:	f040 80b6 	bne.w	8008320 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081b6:	461c      	mov	r4, r3
 80081b8:	f04f 0500 	mov.w	r5, #0
 80081bc:	4622      	mov	r2, r4
 80081be:	462b      	mov	r3, r5
 80081c0:	1891      	adds	r1, r2, r2
 80081c2:	6439      	str	r1, [r7, #64]	; 0x40
 80081c4:	415b      	adcs	r3, r3
 80081c6:	647b      	str	r3, [r7, #68]	; 0x44
 80081c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081cc:	1912      	adds	r2, r2, r4
 80081ce:	eb45 0303 	adc.w	r3, r5, r3
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f04f 0100 	mov.w	r1, #0
 80081da:	00d9      	lsls	r1, r3, #3
 80081dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081e0:	00d0      	lsls	r0, r2, #3
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	1911      	adds	r1, r2, r4
 80081e8:	6639      	str	r1, [r7, #96]	; 0x60
 80081ea:	416b      	adcs	r3, r5
 80081ec:	667b      	str	r3, [r7, #100]	; 0x64
 80081ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	1891      	adds	r1, r2, r2
 80081fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80081fc:	415b      	adcs	r3, r3
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008204:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008208:	f7f8 f832 	bl	8000270 <__aeabi_uldivmod>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4ba5      	ldr	r3, [pc, #660]	; (80084a8 <UART_SetConfig+0x38c>)
 8008212:	fba3 2302 	umull	r2, r3, r3, r2
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	011e      	lsls	r6, r3, #4
 800821a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800821c:	461c      	mov	r4, r3
 800821e:	f04f 0500 	mov.w	r5, #0
 8008222:	4622      	mov	r2, r4
 8008224:	462b      	mov	r3, r5
 8008226:	1891      	adds	r1, r2, r2
 8008228:	6339      	str	r1, [r7, #48]	; 0x30
 800822a:	415b      	adcs	r3, r3
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
 800822e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008232:	1912      	adds	r2, r2, r4
 8008234:	eb45 0303 	adc.w	r3, r5, r3
 8008238:	f04f 0000 	mov.w	r0, #0
 800823c:	f04f 0100 	mov.w	r1, #0
 8008240:	00d9      	lsls	r1, r3, #3
 8008242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008246:	00d0      	lsls	r0, r2, #3
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	1911      	adds	r1, r2, r4
 800824e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008250:	416b      	adcs	r3, r5
 8008252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	461a      	mov	r2, r3
 800825a:	f04f 0300 	mov.w	r3, #0
 800825e:	1891      	adds	r1, r2, r2
 8008260:	62b9      	str	r1, [r7, #40]	; 0x28
 8008262:	415b      	adcs	r3, r3
 8008264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800826a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800826e:	f7f7 ffff 	bl	8000270 <__aeabi_uldivmod>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4b8c      	ldr	r3, [pc, #560]	; (80084a8 <UART_SetConfig+0x38c>)
 8008278:	fba3 1302 	umull	r1, r3, r3, r2
 800827c:	095b      	lsrs	r3, r3, #5
 800827e:	2164      	movs	r1, #100	; 0x64
 8008280:	fb01 f303 	mul.w	r3, r1, r3
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	3332      	adds	r3, #50	; 0x32
 800828a:	4a87      	ldr	r2, [pc, #540]	; (80084a8 <UART_SetConfig+0x38c>)
 800828c:	fba2 2303 	umull	r2, r3, r2, r3
 8008290:	095b      	lsrs	r3, r3, #5
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008298:	441e      	add	r6, r3
 800829a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800829c:	4618      	mov	r0, r3
 800829e:	f04f 0100 	mov.w	r1, #0
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	1894      	adds	r4, r2, r2
 80082a8:	623c      	str	r4, [r7, #32]
 80082aa:	415b      	adcs	r3, r3
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
 80082ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082b2:	1812      	adds	r2, r2, r0
 80082b4:	eb41 0303 	adc.w	r3, r1, r3
 80082b8:	f04f 0400 	mov.w	r4, #0
 80082bc:	f04f 0500 	mov.w	r5, #0
 80082c0:	00dd      	lsls	r5, r3, #3
 80082c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082c6:	00d4      	lsls	r4, r2, #3
 80082c8:	4622      	mov	r2, r4
 80082ca:	462b      	mov	r3, r5
 80082cc:	1814      	adds	r4, r2, r0
 80082ce:	653c      	str	r4, [r7, #80]	; 0x50
 80082d0:	414b      	adcs	r3, r1
 80082d2:	657b      	str	r3, [r7, #84]	; 0x54
 80082d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	461a      	mov	r2, r3
 80082da:	f04f 0300 	mov.w	r3, #0
 80082de:	1891      	adds	r1, r2, r2
 80082e0:	61b9      	str	r1, [r7, #24]
 80082e2:	415b      	adcs	r3, r3
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082ee:	f7f7 ffbf 	bl	8000270 <__aeabi_uldivmod>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4b6c      	ldr	r3, [pc, #432]	; (80084a8 <UART_SetConfig+0x38c>)
 80082f8:	fba3 1302 	umull	r1, r3, r3, r2
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	2164      	movs	r1, #100	; 0x64
 8008300:	fb01 f303 	mul.w	r3, r1, r3
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	3332      	adds	r3, #50	; 0x32
 800830a:	4a67      	ldr	r2, [pc, #412]	; (80084a8 <UART_SetConfig+0x38c>)
 800830c:	fba2 2303 	umull	r2, r3, r2, r3
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	f003 0207 	and.w	r2, r3, #7
 8008316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4432      	add	r2, r6
 800831c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800831e:	e0b9      	b.n	8008494 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008322:	461c      	mov	r4, r3
 8008324:	f04f 0500 	mov.w	r5, #0
 8008328:	4622      	mov	r2, r4
 800832a:	462b      	mov	r3, r5
 800832c:	1891      	adds	r1, r2, r2
 800832e:	6139      	str	r1, [r7, #16]
 8008330:	415b      	adcs	r3, r3
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008338:	1912      	adds	r2, r2, r4
 800833a:	eb45 0303 	adc.w	r3, r5, r3
 800833e:	f04f 0000 	mov.w	r0, #0
 8008342:	f04f 0100 	mov.w	r1, #0
 8008346:	00d9      	lsls	r1, r3, #3
 8008348:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800834c:	00d0      	lsls	r0, r2, #3
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	eb12 0804 	adds.w	r8, r2, r4
 8008356:	eb43 0905 	adc.w	r9, r3, r5
 800835a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4618      	mov	r0, r3
 8008360:	f04f 0100 	mov.w	r1, #0
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	008b      	lsls	r3, r1, #2
 800836e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008372:	0082      	lsls	r2, r0, #2
 8008374:	4640      	mov	r0, r8
 8008376:	4649      	mov	r1, r9
 8008378:	f7f7 ff7a 	bl	8000270 <__aeabi_uldivmod>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4b49      	ldr	r3, [pc, #292]	; (80084a8 <UART_SetConfig+0x38c>)
 8008382:	fba3 2302 	umull	r2, r3, r3, r2
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	011e      	lsls	r6, r3, #4
 800838a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800838c:	4618      	mov	r0, r3
 800838e:	f04f 0100 	mov.w	r1, #0
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	1894      	adds	r4, r2, r2
 8008398:	60bc      	str	r4, [r7, #8]
 800839a:	415b      	adcs	r3, r3
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083a2:	1812      	adds	r2, r2, r0
 80083a4:	eb41 0303 	adc.w	r3, r1, r3
 80083a8:	f04f 0400 	mov.w	r4, #0
 80083ac:	f04f 0500 	mov.w	r5, #0
 80083b0:	00dd      	lsls	r5, r3, #3
 80083b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083b6:	00d4      	lsls	r4, r2, #3
 80083b8:	4622      	mov	r2, r4
 80083ba:	462b      	mov	r3, r5
 80083bc:	1814      	adds	r4, r2, r0
 80083be:	64bc      	str	r4, [r7, #72]	; 0x48
 80083c0:	414b      	adcs	r3, r1
 80083c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f04f 0100 	mov.w	r1, #0
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	008b      	lsls	r3, r1, #2
 80083d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083dc:	0082      	lsls	r2, r0, #2
 80083de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083e2:	f7f7 ff45 	bl	8000270 <__aeabi_uldivmod>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <UART_SetConfig+0x38c>)
 80083ec:	fba3 1302 	umull	r1, r3, r3, r2
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	2164      	movs	r1, #100	; 0x64
 80083f4:	fb01 f303 	mul.w	r3, r1, r3
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	3332      	adds	r3, #50	; 0x32
 80083fe:	4a2a      	ldr	r2, [pc, #168]	; (80084a8 <UART_SetConfig+0x38c>)
 8008400:	fba2 2303 	umull	r2, r3, r2, r3
 8008404:	095b      	lsrs	r3, r3, #5
 8008406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800840a:	441e      	add	r6, r3
 800840c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800840e:	4618      	mov	r0, r3
 8008410:	f04f 0100 	mov.w	r1, #0
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	1894      	adds	r4, r2, r2
 800841a:	603c      	str	r4, [r7, #0]
 800841c:	415b      	adcs	r3, r3
 800841e:	607b      	str	r3, [r7, #4]
 8008420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008424:	1812      	adds	r2, r2, r0
 8008426:	eb41 0303 	adc.w	r3, r1, r3
 800842a:	f04f 0400 	mov.w	r4, #0
 800842e:	f04f 0500 	mov.w	r5, #0
 8008432:	00dd      	lsls	r5, r3, #3
 8008434:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008438:	00d4      	lsls	r4, r2, #3
 800843a:	4622      	mov	r2, r4
 800843c:	462b      	mov	r3, r5
 800843e:	eb12 0a00 	adds.w	sl, r2, r0
 8008442:	eb43 0b01 	adc.w	fp, r3, r1
 8008446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	4618      	mov	r0, r3
 800844c:	f04f 0100 	mov.w	r1, #0
 8008450:	f04f 0200 	mov.w	r2, #0
 8008454:	f04f 0300 	mov.w	r3, #0
 8008458:	008b      	lsls	r3, r1, #2
 800845a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800845e:	0082      	lsls	r2, r0, #2
 8008460:	4650      	mov	r0, sl
 8008462:	4659      	mov	r1, fp
 8008464:	f7f7 ff04 	bl	8000270 <__aeabi_uldivmod>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4b0e      	ldr	r3, [pc, #56]	; (80084a8 <UART_SetConfig+0x38c>)
 800846e:	fba3 1302 	umull	r1, r3, r3, r2
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	2164      	movs	r1, #100	; 0x64
 8008476:	fb01 f303 	mul.w	r3, r1, r3
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	3332      	adds	r3, #50	; 0x32
 8008480:	4a09      	ldr	r2, [pc, #36]	; (80084a8 <UART_SetConfig+0x38c>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	095b      	lsrs	r3, r3, #5
 8008488:	f003 020f 	and.w	r2, r3, #15
 800848c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4432      	add	r2, r6
 8008492:	609a      	str	r2, [r3, #8]
}
 8008494:	bf00      	nop
 8008496:	377c      	adds	r7, #124	; 0x7c
 8008498:	46bd      	mov	sp, r7
 800849a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849e:	bf00      	nop
 80084a0:	40011000 	.word	0x40011000
 80084a4:	40011400 	.word	0x40011400
 80084a8:	51eb851f 	.word	0x51eb851f

080084ac <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4b20      	ldr	r3, [pc, #128]	; (800854c <FSMC_NORSRAM_Init+0xa0>)
 80084ca:	4013      	ands	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80084d6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80084dc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80084e2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80084e8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80084ee:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80084f4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80084fa:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008500:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008506:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800850c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008512:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008518:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	2b08      	cmp	r3, #8
 8008526:	d103      	bne.n	8008530 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800852e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68f9      	ldr	r1, [r7, #12]
 8008538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	fff00080 	.word	0xfff00080

08008550 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008572:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800857e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008586:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800858e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	3b01      	subs	r3, #1
 8008596:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008598:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	3b02      	subs	r3, #2
 80085a0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80085a2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80085a8:	4313      	orrs	r3, r2
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6979      	ldr	r1, [r7, #20]
 80085b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e4:	d122      	bne.n	800862c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	4b15      	ldr	r3, [pc, #84]	; (8008648 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008602:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800860a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008612:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008618:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6979      	ldr	r1, [r7, #20]
 8008626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800862a:	e005      	b.n	8008638 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	cff00000 	.word	0xcff00000

0800864c <atoi>:
 800864c:	220a      	movs	r2, #10
 800864e:	2100      	movs	r1, #0
 8008650:	f000 b9a0 	b.w	8008994 <strtol>

08008654 <__errno>:
 8008654:	4b01      	ldr	r3, [pc, #4]	; (800865c <__errno+0x8>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	20000014 	.word	0x20000014

08008660 <__libc_init_array>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	4d0d      	ldr	r5, [pc, #52]	; (8008698 <__libc_init_array+0x38>)
 8008664:	4c0d      	ldr	r4, [pc, #52]	; (800869c <__libc_init_array+0x3c>)
 8008666:	1b64      	subs	r4, r4, r5
 8008668:	10a4      	asrs	r4, r4, #2
 800866a:	2600      	movs	r6, #0
 800866c:	42a6      	cmp	r6, r4
 800866e:	d109      	bne.n	8008684 <__libc_init_array+0x24>
 8008670:	4d0b      	ldr	r5, [pc, #44]	; (80086a0 <__libc_init_array+0x40>)
 8008672:	4c0c      	ldr	r4, [pc, #48]	; (80086a4 <__libc_init_array+0x44>)
 8008674:	f000 fcec 	bl	8009050 <_init>
 8008678:	1b64      	subs	r4, r4, r5
 800867a:	10a4      	asrs	r4, r4, #2
 800867c:	2600      	movs	r6, #0
 800867e:	42a6      	cmp	r6, r4
 8008680:	d105      	bne.n	800868e <__libc_init_array+0x2e>
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	f855 3b04 	ldr.w	r3, [r5], #4
 8008688:	4798      	blx	r3
 800868a:	3601      	adds	r6, #1
 800868c:	e7ee      	b.n	800866c <__libc_init_array+0xc>
 800868e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008692:	4798      	blx	r3
 8008694:	3601      	adds	r6, #1
 8008696:	e7f2      	b.n	800867e <__libc_init_array+0x1e>
 8008698:	0800c2d4 	.word	0x0800c2d4
 800869c:	0800c2d4 	.word	0x0800c2d4
 80086a0:	0800c2d4 	.word	0x0800c2d4
 80086a4:	0800c2d8 	.word	0x0800c2d8

080086a8 <malloc>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <malloc+0xc>)
 80086aa:	4601      	mov	r1, r0
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	f000 b863 	b.w	8008778 <_malloc_r>
 80086b2:	bf00      	nop
 80086b4:	20000014 	.word	0x20000014

080086b8 <free>:
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <free+0xc>)
 80086ba:	4601      	mov	r1, r0
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	f000 b80b 	b.w	80086d8 <_free_r>
 80086c2:	bf00      	nop
 80086c4:	20000014 	.word	0x20000014

080086c8 <memset>:
 80086c8:	4402      	add	r2, r0
 80086ca:	4603      	mov	r3, r0
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d100      	bne.n	80086d2 <memset+0xa>
 80086d0:	4770      	bx	lr
 80086d2:	f803 1b01 	strb.w	r1, [r3], #1
 80086d6:	e7f9      	b.n	80086cc <memset+0x4>

080086d8 <_free_r>:
 80086d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086da:	2900      	cmp	r1, #0
 80086dc:	d048      	beq.n	8008770 <_free_r+0x98>
 80086de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e2:	9001      	str	r0, [sp, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f1a1 0404 	sub.w	r4, r1, #4
 80086ea:	bfb8      	it	lt
 80086ec:	18e4      	addlt	r4, r4, r3
 80086ee:	f000 f95b 	bl	80089a8 <__malloc_lock>
 80086f2:	4a20      	ldr	r2, [pc, #128]	; (8008774 <_free_r+0x9c>)
 80086f4:	9801      	ldr	r0, [sp, #4]
 80086f6:	6813      	ldr	r3, [r2, #0]
 80086f8:	4615      	mov	r5, r2
 80086fa:	b933      	cbnz	r3, 800870a <_free_r+0x32>
 80086fc:	6063      	str	r3, [r4, #4]
 80086fe:	6014      	str	r4, [r2, #0]
 8008700:	b003      	add	sp, #12
 8008702:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008706:	f000 b955 	b.w	80089b4 <__malloc_unlock>
 800870a:	42a3      	cmp	r3, r4
 800870c:	d90b      	bls.n	8008726 <_free_r+0x4e>
 800870e:	6821      	ldr	r1, [r4, #0]
 8008710:	1862      	adds	r2, r4, r1
 8008712:	4293      	cmp	r3, r2
 8008714:	bf04      	itt	eq
 8008716:	681a      	ldreq	r2, [r3, #0]
 8008718:	685b      	ldreq	r3, [r3, #4]
 800871a:	6063      	str	r3, [r4, #4]
 800871c:	bf04      	itt	eq
 800871e:	1852      	addeq	r2, r2, r1
 8008720:	6022      	streq	r2, [r4, #0]
 8008722:	602c      	str	r4, [r5, #0]
 8008724:	e7ec      	b.n	8008700 <_free_r+0x28>
 8008726:	461a      	mov	r2, r3
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	b10b      	cbz	r3, 8008730 <_free_r+0x58>
 800872c:	42a3      	cmp	r3, r4
 800872e:	d9fa      	bls.n	8008726 <_free_r+0x4e>
 8008730:	6811      	ldr	r1, [r2, #0]
 8008732:	1855      	adds	r5, r2, r1
 8008734:	42a5      	cmp	r5, r4
 8008736:	d10b      	bne.n	8008750 <_free_r+0x78>
 8008738:	6824      	ldr	r4, [r4, #0]
 800873a:	4421      	add	r1, r4
 800873c:	1854      	adds	r4, r2, r1
 800873e:	42a3      	cmp	r3, r4
 8008740:	6011      	str	r1, [r2, #0]
 8008742:	d1dd      	bne.n	8008700 <_free_r+0x28>
 8008744:	681c      	ldr	r4, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	6053      	str	r3, [r2, #4]
 800874a:	4421      	add	r1, r4
 800874c:	6011      	str	r1, [r2, #0]
 800874e:	e7d7      	b.n	8008700 <_free_r+0x28>
 8008750:	d902      	bls.n	8008758 <_free_r+0x80>
 8008752:	230c      	movs	r3, #12
 8008754:	6003      	str	r3, [r0, #0]
 8008756:	e7d3      	b.n	8008700 <_free_r+0x28>
 8008758:	6825      	ldr	r5, [r4, #0]
 800875a:	1961      	adds	r1, r4, r5
 800875c:	428b      	cmp	r3, r1
 800875e:	bf04      	itt	eq
 8008760:	6819      	ldreq	r1, [r3, #0]
 8008762:	685b      	ldreq	r3, [r3, #4]
 8008764:	6063      	str	r3, [r4, #4]
 8008766:	bf04      	itt	eq
 8008768:	1949      	addeq	r1, r1, r5
 800876a:	6021      	streq	r1, [r4, #0]
 800876c:	6054      	str	r4, [r2, #4]
 800876e:	e7c7      	b.n	8008700 <_free_r+0x28>
 8008770:	b003      	add	sp, #12
 8008772:	bd30      	pop	{r4, r5, pc}
 8008774:	200000b4 	.word	0x200000b4

08008778 <_malloc_r>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	1ccd      	adds	r5, r1, #3
 800877c:	f025 0503 	bic.w	r5, r5, #3
 8008780:	3508      	adds	r5, #8
 8008782:	2d0c      	cmp	r5, #12
 8008784:	bf38      	it	cc
 8008786:	250c      	movcc	r5, #12
 8008788:	2d00      	cmp	r5, #0
 800878a:	4606      	mov	r6, r0
 800878c:	db01      	blt.n	8008792 <_malloc_r+0x1a>
 800878e:	42a9      	cmp	r1, r5
 8008790:	d903      	bls.n	800879a <_malloc_r+0x22>
 8008792:	230c      	movs	r3, #12
 8008794:	6033      	str	r3, [r6, #0]
 8008796:	2000      	movs	r0, #0
 8008798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800879a:	f000 f905 	bl	80089a8 <__malloc_lock>
 800879e:	4921      	ldr	r1, [pc, #132]	; (8008824 <_malloc_r+0xac>)
 80087a0:	680a      	ldr	r2, [r1, #0]
 80087a2:	4614      	mov	r4, r2
 80087a4:	b99c      	cbnz	r4, 80087ce <_malloc_r+0x56>
 80087a6:	4f20      	ldr	r7, [pc, #128]	; (8008828 <_malloc_r+0xb0>)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	b923      	cbnz	r3, 80087b6 <_malloc_r+0x3e>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f83c 	bl	800882c <_sbrk_r>
 80087b4:	6038      	str	r0, [r7, #0]
 80087b6:	4629      	mov	r1, r5
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 f837 	bl	800882c <_sbrk_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d123      	bne.n	800880a <_malloc_r+0x92>
 80087c2:	230c      	movs	r3, #12
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f8f4 	bl	80089b4 <__malloc_unlock>
 80087cc:	e7e3      	b.n	8008796 <_malloc_r+0x1e>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	1b5b      	subs	r3, r3, r5
 80087d2:	d417      	bmi.n	8008804 <_malloc_r+0x8c>
 80087d4:	2b0b      	cmp	r3, #11
 80087d6:	d903      	bls.n	80087e0 <_malloc_r+0x68>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	441c      	add	r4, r3
 80087dc:	6025      	str	r5, [r4, #0]
 80087de:	e004      	b.n	80087ea <_malloc_r+0x72>
 80087e0:	6863      	ldr	r3, [r4, #4]
 80087e2:	42a2      	cmp	r2, r4
 80087e4:	bf0c      	ite	eq
 80087e6:	600b      	streq	r3, [r1, #0]
 80087e8:	6053      	strne	r3, [r2, #4]
 80087ea:	4630      	mov	r0, r6
 80087ec:	f000 f8e2 	bl	80089b4 <__malloc_unlock>
 80087f0:	f104 000b 	add.w	r0, r4, #11
 80087f4:	1d23      	adds	r3, r4, #4
 80087f6:	f020 0007 	bic.w	r0, r0, #7
 80087fa:	1ac2      	subs	r2, r0, r3
 80087fc:	d0cc      	beq.n	8008798 <_malloc_r+0x20>
 80087fe:	1a1b      	subs	r3, r3, r0
 8008800:	50a3      	str	r3, [r4, r2]
 8008802:	e7c9      	b.n	8008798 <_malloc_r+0x20>
 8008804:	4622      	mov	r2, r4
 8008806:	6864      	ldr	r4, [r4, #4]
 8008808:	e7cc      	b.n	80087a4 <_malloc_r+0x2c>
 800880a:	1cc4      	adds	r4, r0, #3
 800880c:	f024 0403 	bic.w	r4, r4, #3
 8008810:	42a0      	cmp	r0, r4
 8008812:	d0e3      	beq.n	80087dc <_malloc_r+0x64>
 8008814:	1a21      	subs	r1, r4, r0
 8008816:	4630      	mov	r0, r6
 8008818:	f000 f808 	bl	800882c <_sbrk_r>
 800881c:	3001      	adds	r0, #1
 800881e:	d1dd      	bne.n	80087dc <_malloc_r+0x64>
 8008820:	e7cf      	b.n	80087c2 <_malloc_r+0x4a>
 8008822:	bf00      	nop
 8008824:	200000b4 	.word	0x200000b4
 8008828:	200000b8 	.word	0x200000b8

0800882c <_sbrk_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d06      	ldr	r5, [pc, #24]	; (8008848 <_sbrk_r+0x1c>)
 8008830:	2300      	movs	r3, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	602b      	str	r3, [r5, #0]
 8008838:	f7fb f962 	bl	8003b00 <_sbrk>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_sbrk_r+0x1a>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_sbrk_r+0x1a>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	20000410 	.word	0x20000410

0800884c <siprintf>:
 800884c:	b40e      	push	{r1, r2, r3}
 800884e:	b500      	push	{lr}
 8008850:	b09c      	sub	sp, #112	; 0x70
 8008852:	ab1d      	add	r3, sp, #116	; 0x74
 8008854:	9002      	str	r0, [sp, #8]
 8008856:	9006      	str	r0, [sp, #24]
 8008858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800885c:	4809      	ldr	r0, [pc, #36]	; (8008884 <siprintf+0x38>)
 800885e:	9107      	str	r1, [sp, #28]
 8008860:	9104      	str	r1, [sp, #16]
 8008862:	4909      	ldr	r1, [pc, #36]	; (8008888 <siprintf+0x3c>)
 8008864:	f853 2b04 	ldr.w	r2, [r3], #4
 8008868:	9105      	str	r1, [sp, #20]
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	a902      	add	r1, sp, #8
 8008870:	f000 f902 	bl	8008a78 <_svfiprintf_r>
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	b01c      	add	sp, #112	; 0x70
 800887c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008880:	b003      	add	sp, #12
 8008882:	4770      	bx	lr
 8008884:	20000014 	.word	0x20000014
 8008888:	ffff0208 	.word	0xffff0208

0800888c <_strtol_l.isra.0>:
 800888c:	2b01      	cmp	r3, #1
 800888e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008892:	d001      	beq.n	8008898 <_strtol_l.isra.0+0xc>
 8008894:	2b24      	cmp	r3, #36	; 0x24
 8008896:	d906      	bls.n	80088a6 <_strtol_l.isra.0+0x1a>
 8008898:	f7ff fedc 	bl	8008654 <__errno>
 800889c:	2316      	movs	r3, #22
 800889e:	6003      	str	r3, [r0, #0]
 80088a0:	2000      	movs	r0, #0
 80088a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a6:	4f3a      	ldr	r7, [pc, #232]	; (8008990 <_strtol_l.isra.0+0x104>)
 80088a8:	468e      	mov	lr, r1
 80088aa:	4676      	mov	r6, lr
 80088ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80088b0:	5de5      	ldrb	r5, [r4, r7]
 80088b2:	f015 0508 	ands.w	r5, r5, #8
 80088b6:	d1f8      	bne.n	80088aa <_strtol_l.isra.0+0x1e>
 80088b8:	2c2d      	cmp	r4, #45	; 0x2d
 80088ba:	d134      	bne.n	8008926 <_strtol_l.isra.0+0x9a>
 80088bc:	f89e 4000 	ldrb.w	r4, [lr]
 80088c0:	f04f 0801 	mov.w	r8, #1
 80088c4:	f106 0e02 	add.w	lr, r6, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d05c      	beq.n	8008986 <_strtol_l.isra.0+0xfa>
 80088cc:	2b10      	cmp	r3, #16
 80088ce:	d10c      	bne.n	80088ea <_strtol_l.isra.0+0x5e>
 80088d0:	2c30      	cmp	r4, #48	; 0x30
 80088d2:	d10a      	bne.n	80088ea <_strtol_l.isra.0+0x5e>
 80088d4:	f89e 4000 	ldrb.w	r4, [lr]
 80088d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80088dc:	2c58      	cmp	r4, #88	; 0x58
 80088de:	d14d      	bne.n	800897c <_strtol_l.isra.0+0xf0>
 80088e0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80088e4:	2310      	movs	r3, #16
 80088e6:	f10e 0e02 	add.w	lr, lr, #2
 80088ea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80088ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088f2:	2600      	movs	r6, #0
 80088f4:	fbbc f9f3 	udiv	r9, ip, r3
 80088f8:	4635      	mov	r5, r6
 80088fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80088fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008902:	2f09      	cmp	r7, #9
 8008904:	d818      	bhi.n	8008938 <_strtol_l.isra.0+0xac>
 8008906:	463c      	mov	r4, r7
 8008908:	42a3      	cmp	r3, r4
 800890a:	dd24      	ble.n	8008956 <_strtol_l.isra.0+0xca>
 800890c:	2e00      	cmp	r6, #0
 800890e:	db1f      	blt.n	8008950 <_strtol_l.isra.0+0xc4>
 8008910:	45a9      	cmp	r9, r5
 8008912:	d31d      	bcc.n	8008950 <_strtol_l.isra.0+0xc4>
 8008914:	d101      	bne.n	800891a <_strtol_l.isra.0+0x8e>
 8008916:	45a2      	cmp	sl, r4
 8008918:	db1a      	blt.n	8008950 <_strtol_l.isra.0+0xc4>
 800891a:	fb05 4503 	mla	r5, r5, r3, r4
 800891e:	2601      	movs	r6, #1
 8008920:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008924:	e7eb      	b.n	80088fe <_strtol_l.isra.0+0x72>
 8008926:	2c2b      	cmp	r4, #43	; 0x2b
 8008928:	bf08      	it	eq
 800892a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800892e:	46a8      	mov	r8, r5
 8008930:	bf08      	it	eq
 8008932:	f106 0e02 	addeq.w	lr, r6, #2
 8008936:	e7c7      	b.n	80088c8 <_strtol_l.isra.0+0x3c>
 8008938:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800893c:	2f19      	cmp	r7, #25
 800893e:	d801      	bhi.n	8008944 <_strtol_l.isra.0+0xb8>
 8008940:	3c37      	subs	r4, #55	; 0x37
 8008942:	e7e1      	b.n	8008908 <_strtol_l.isra.0+0x7c>
 8008944:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008948:	2f19      	cmp	r7, #25
 800894a:	d804      	bhi.n	8008956 <_strtol_l.isra.0+0xca>
 800894c:	3c57      	subs	r4, #87	; 0x57
 800894e:	e7db      	b.n	8008908 <_strtol_l.isra.0+0x7c>
 8008950:	f04f 36ff 	mov.w	r6, #4294967295
 8008954:	e7e4      	b.n	8008920 <_strtol_l.isra.0+0x94>
 8008956:	2e00      	cmp	r6, #0
 8008958:	da05      	bge.n	8008966 <_strtol_l.isra.0+0xda>
 800895a:	2322      	movs	r3, #34	; 0x22
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	4665      	mov	r5, ip
 8008960:	b942      	cbnz	r2, 8008974 <_strtol_l.isra.0+0xe8>
 8008962:	4628      	mov	r0, r5
 8008964:	e79d      	b.n	80088a2 <_strtol_l.isra.0+0x16>
 8008966:	f1b8 0f00 	cmp.w	r8, #0
 800896a:	d000      	beq.n	800896e <_strtol_l.isra.0+0xe2>
 800896c:	426d      	negs	r5, r5
 800896e:	2a00      	cmp	r2, #0
 8008970:	d0f7      	beq.n	8008962 <_strtol_l.isra.0+0xd6>
 8008972:	b10e      	cbz	r6, 8008978 <_strtol_l.isra.0+0xec>
 8008974:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008978:	6011      	str	r1, [r2, #0]
 800897a:	e7f2      	b.n	8008962 <_strtol_l.isra.0+0xd6>
 800897c:	2430      	movs	r4, #48	; 0x30
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1b3      	bne.n	80088ea <_strtol_l.isra.0+0x5e>
 8008982:	2308      	movs	r3, #8
 8008984:	e7b1      	b.n	80088ea <_strtol_l.isra.0+0x5e>
 8008986:	2c30      	cmp	r4, #48	; 0x30
 8008988:	d0a4      	beq.n	80088d4 <_strtol_l.isra.0+0x48>
 800898a:	230a      	movs	r3, #10
 800898c:	e7ad      	b.n	80088ea <_strtol_l.isra.0+0x5e>
 800898e:	bf00      	nop
 8008990:	0800c199 	.word	0x0800c199

08008994 <strtol>:
 8008994:	4613      	mov	r3, r2
 8008996:	460a      	mov	r2, r1
 8008998:	4601      	mov	r1, r0
 800899a:	4802      	ldr	r0, [pc, #8]	; (80089a4 <strtol+0x10>)
 800899c:	6800      	ldr	r0, [r0, #0]
 800899e:	f7ff bf75 	b.w	800888c <_strtol_l.isra.0>
 80089a2:	bf00      	nop
 80089a4:	20000014 	.word	0x20000014

080089a8 <__malloc_lock>:
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <__malloc_lock+0x8>)
 80089aa:	f000 baf9 	b.w	8008fa0 <__retarget_lock_acquire_recursive>
 80089ae:	bf00      	nop
 80089b0:	20000418 	.word	0x20000418

080089b4 <__malloc_unlock>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__malloc_unlock+0x8>)
 80089b6:	f000 baf4 	b.w	8008fa2 <__retarget_lock_release_recursive>
 80089ba:	bf00      	nop
 80089bc:	20000418 	.word	0x20000418

080089c0 <__ssputs_r>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	688e      	ldr	r6, [r1, #8]
 80089c6:	429e      	cmp	r6, r3
 80089c8:	4682      	mov	sl, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	4690      	mov	r8, r2
 80089ce:	461f      	mov	r7, r3
 80089d0:	d838      	bhi.n	8008a44 <__ssputs_r+0x84>
 80089d2:	898a      	ldrh	r2, [r1, #12]
 80089d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089d8:	d032      	beq.n	8008a40 <__ssputs_r+0x80>
 80089da:	6825      	ldr	r5, [r4, #0]
 80089dc:	6909      	ldr	r1, [r1, #16]
 80089de:	eba5 0901 	sub.w	r9, r5, r1
 80089e2:	6965      	ldr	r5, [r4, #20]
 80089e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089ec:	3301      	adds	r3, #1
 80089ee:	444b      	add	r3, r9
 80089f0:	106d      	asrs	r5, r5, #1
 80089f2:	429d      	cmp	r5, r3
 80089f4:	bf38      	it	cc
 80089f6:	461d      	movcc	r5, r3
 80089f8:	0553      	lsls	r3, r2, #21
 80089fa:	d531      	bpl.n	8008a60 <__ssputs_r+0xa0>
 80089fc:	4629      	mov	r1, r5
 80089fe:	f7ff febb 	bl	8008778 <_malloc_r>
 8008a02:	4606      	mov	r6, r0
 8008a04:	b950      	cbnz	r0, 8008a1c <__ssputs_r+0x5c>
 8008a06:	230c      	movs	r3, #12
 8008a08:	f8ca 3000 	str.w	r3, [sl]
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1c:	6921      	ldr	r1, [r4, #16]
 8008a1e:	464a      	mov	r2, r9
 8008a20:	f000 fac0 	bl	8008fa4 <memcpy>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	6126      	str	r6, [r4, #16]
 8008a32:	6165      	str	r5, [r4, #20]
 8008a34:	444e      	add	r6, r9
 8008a36:	eba5 0509 	sub.w	r5, r5, r9
 8008a3a:	6026      	str	r6, [r4, #0]
 8008a3c:	60a5      	str	r5, [r4, #8]
 8008a3e:	463e      	mov	r6, r7
 8008a40:	42be      	cmp	r6, r7
 8008a42:	d900      	bls.n	8008a46 <__ssputs_r+0x86>
 8008a44:	463e      	mov	r6, r7
 8008a46:	4632      	mov	r2, r6
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	4641      	mov	r1, r8
 8008a4c:	f000 fab8 	bl	8008fc0 <memmove>
 8008a50:	68a3      	ldr	r3, [r4, #8]
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	1b9b      	subs	r3, r3, r6
 8008a56:	4432      	add	r2, r6
 8008a58:	60a3      	str	r3, [r4, #8]
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e7db      	b.n	8008a18 <__ssputs_r+0x58>
 8008a60:	462a      	mov	r2, r5
 8008a62:	f000 fac7 	bl	8008ff4 <_realloc_r>
 8008a66:	4606      	mov	r6, r0
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d1e1      	bne.n	8008a30 <__ssputs_r+0x70>
 8008a6c:	6921      	ldr	r1, [r4, #16]
 8008a6e:	4650      	mov	r0, sl
 8008a70:	f7ff fe32 	bl	80086d8 <_free_r>
 8008a74:	e7c7      	b.n	8008a06 <__ssputs_r+0x46>
	...

08008a78 <_svfiprintf_r>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	4698      	mov	r8, r3
 8008a7e:	898b      	ldrh	r3, [r1, #12]
 8008a80:	061b      	lsls	r3, r3, #24
 8008a82:	b09d      	sub	sp, #116	; 0x74
 8008a84:	4607      	mov	r7, r0
 8008a86:	460d      	mov	r5, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	d50e      	bpl.n	8008aaa <_svfiprintf_r+0x32>
 8008a8c:	690b      	ldr	r3, [r1, #16]
 8008a8e:	b963      	cbnz	r3, 8008aaa <_svfiprintf_r+0x32>
 8008a90:	2140      	movs	r1, #64	; 0x40
 8008a92:	f7ff fe71 	bl	8008778 <_malloc_r>
 8008a96:	6028      	str	r0, [r5, #0]
 8008a98:	6128      	str	r0, [r5, #16]
 8008a9a:	b920      	cbnz	r0, 8008aa6 <_svfiprintf_r+0x2e>
 8008a9c:	230c      	movs	r3, #12
 8008a9e:	603b      	str	r3, [r7, #0]
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	e0d1      	b.n	8008c4a <_svfiprintf_r+0x1d2>
 8008aa6:	2340      	movs	r3, #64	; 0x40
 8008aa8:	616b      	str	r3, [r5, #20]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9309      	str	r3, [sp, #36]	; 0x24
 8008aae:	2320      	movs	r3, #32
 8008ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ab8:	2330      	movs	r3, #48	; 0x30
 8008aba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c64 <_svfiprintf_r+0x1ec>
 8008abe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ac2:	f04f 0901 	mov.w	r9, #1
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	469a      	mov	sl, r3
 8008aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ace:	b10a      	cbz	r2, 8008ad4 <_svfiprintf_r+0x5c>
 8008ad0:	2a25      	cmp	r2, #37	; 0x25
 8008ad2:	d1f9      	bne.n	8008ac8 <_svfiprintf_r+0x50>
 8008ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ad8:	d00b      	beq.n	8008af2 <_svfiprintf_r+0x7a>
 8008ada:	465b      	mov	r3, fp
 8008adc:	4622      	mov	r2, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7ff ff6d 	bl	80089c0 <__ssputs_r>
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	f000 80aa 	beq.w	8008c40 <_svfiprintf_r+0x1c8>
 8008aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aee:	445a      	add	r2, fp
 8008af0:	9209      	str	r2, [sp, #36]	; 0x24
 8008af2:	f89a 3000 	ldrb.w	r3, [sl]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 80a2 	beq.w	8008c40 <_svfiprintf_r+0x1c8>
 8008afc:	2300      	movs	r3, #0
 8008afe:	f04f 32ff 	mov.w	r2, #4294967295
 8008b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b06:	f10a 0a01 	add.w	sl, sl, #1
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	9307      	str	r3, [sp, #28]
 8008b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b12:	931a      	str	r3, [sp, #104]	; 0x68
 8008b14:	4654      	mov	r4, sl
 8008b16:	2205      	movs	r2, #5
 8008b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b1c:	4851      	ldr	r0, [pc, #324]	; (8008c64 <_svfiprintf_r+0x1ec>)
 8008b1e:	f7f7 fb57 	bl	80001d0 <memchr>
 8008b22:	9a04      	ldr	r2, [sp, #16]
 8008b24:	b9d8      	cbnz	r0, 8008b5e <_svfiprintf_r+0xe6>
 8008b26:	06d0      	lsls	r0, r2, #27
 8008b28:	bf44      	itt	mi
 8008b2a:	2320      	movmi	r3, #32
 8008b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b30:	0711      	lsls	r1, r2, #28
 8008b32:	bf44      	itt	mi
 8008b34:	232b      	movmi	r3, #43	; 0x2b
 8008b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b40:	d015      	beq.n	8008b6e <_svfiprintf_r+0xf6>
 8008b42:	9a07      	ldr	r2, [sp, #28]
 8008b44:	4654      	mov	r4, sl
 8008b46:	2000      	movs	r0, #0
 8008b48:	f04f 0c0a 	mov.w	ip, #10
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b52:	3b30      	subs	r3, #48	; 0x30
 8008b54:	2b09      	cmp	r3, #9
 8008b56:	d94e      	bls.n	8008bf6 <_svfiprintf_r+0x17e>
 8008b58:	b1b0      	cbz	r0, 8008b88 <_svfiprintf_r+0x110>
 8008b5a:	9207      	str	r2, [sp, #28]
 8008b5c:	e014      	b.n	8008b88 <_svfiprintf_r+0x110>
 8008b5e:	eba0 0308 	sub.w	r3, r0, r8
 8008b62:	fa09 f303 	lsl.w	r3, r9, r3
 8008b66:	4313      	orrs	r3, r2
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	46a2      	mov	sl, r4
 8008b6c:	e7d2      	b.n	8008b14 <_svfiprintf_r+0x9c>
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	1d19      	adds	r1, r3, #4
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	9103      	str	r1, [sp, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfbb      	ittet	lt
 8008b7a:	425b      	neglt	r3, r3
 8008b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b80:	9307      	strge	r3, [sp, #28]
 8008b82:	9307      	strlt	r3, [sp, #28]
 8008b84:	bfb8      	it	lt
 8008b86:	9204      	strlt	r2, [sp, #16]
 8008b88:	7823      	ldrb	r3, [r4, #0]
 8008b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b8c:	d10c      	bne.n	8008ba8 <_svfiprintf_r+0x130>
 8008b8e:	7863      	ldrb	r3, [r4, #1]
 8008b90:	2b2a      	cmp	r3, #42	; 0x2a
 8008b92:	d135      	bne.n	8008c00 <_svfiprintf_r+0x188>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	1d1a      	adds	r2, r3, #4
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	9203      	str	r2, [sp, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bfb8      	it	lt
 8008ba0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ba4:	3402      	adds	r4, #2
 8008ba6:	9305      	str	r3, [sp, #20]
 8008ba8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c74 <_svfiprintf_r+0x1fc>
 8008bac:	7821      	ldrb	r1, [r4, #0]
 8008bae:	2203      	movs	r2, #3
 8008bb0:	4650      	mov	r0, sl
 8008bb2:	f7f7 fb0d 	bl	80001d0 <memchr>
 8008bb6:	b140      	cbz	r0, 8008bca <_svfiprintf_r+0x152>
 8008bb8:	2340      	movs	r3, #64	; 0x40
 8008bba:	eba0 000a 	sub.w	r0, r0, sl
 8008bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	4303      	orrs	r3, r0
 8008bc6:	3401      	adds	r4, #1
 8008bc8:	9304      	str	r3, [sp, #16]
 8008bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bce:	4826      	ldr	r0, [pc, #152]	; (8008c68 <_svfiprintf_r+0x1f0>)
 8008bd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bd4:	2206      	movs	r2, #6
 8008bd6:	f7f7 fafb 	bl	80001d0 <memchr>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d038      	beq.n	8008c50 <_svfiprintf_r+0x1d8>
 8008bde:	4b23      	ldr	r3, [pc, #140]	; (8008c6c <_svfiprintf_r+0x1f4>)
 8008be0:	bb1b      	cbnz	r3, 8008c2a <_svfiprintf_r+0x1b2>
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	3307      	adds	r3, #7
 8008be6:	f023 0307 	bic.w	r3, r3, #7
 8008bea:	3308      	adds	r3, #8
 8008bec:	9303      	str	r3, [sp, #12]
 8008bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf0:	4433      	add	r3, r6
 8008bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf4:	e767      	b.n	8008ac6 <_svfiprintf_r+0x4e>
 8008bf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	e7a5      	b.n	8008b4c <_svfiprintf_r+0xd4>
 8008c00:	2300      	movs	r3, #0
 8008c02:	3401      	adds	r4, #1
 8008c04:	9305      	str	r3, [sp, #20]
 8008c06:	4619      	mov	r1, r3
 8008c08:	f04f 0c0a 	mov.w	ip, #10
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c12:	3a30      	subs	r2, #48	; 0x30
 8008c14:	2a09      	cmp	r2, #9
 8008c16:	d903      	bls.n	8008c20 <_svfiprintf_r+0x1a8>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0c5      	beq.n	8008ba8 <_svfiprintf_r+0x130>
 8008c1c:	9105      	str	r1, [sp, #20]
 8008c1e:	e7c3      	b.n	8008ba8 <_svfiprintf_r+0x130>
 8008c20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c24:	4604      	mov	r4, r0
 8008c26:	2301      	movs	r3, #1
 8008c28:	e7f0      	b.n	8008c0c <_svfiprintf_r+0x194>
 8008c2a:	ab03      	add	r3, sp, #12
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4b0f      	ldr	r3, [pc, #60]	; (8008c70 <_svfiprintf_r+0x1f8>)
 8008c32:	a904      	add	r1, sp, #16
 8008c34:	4638      	mov	r0, r7
 8008c36:	f3af 8000 	nop.w
 8008c3a:	1c42      	adds	r2, r0, #1
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	d1d6      	bne.n	8008bee <_svfiprintf_r+0x176>
 8008c40:	89ab      	ldrh	r3, [r5, #12]
 8008c42:	065b      	lsls	r3, r3, #25
 8008c44:	f53f af2c 	bmi.w	8008aa0 <_svfiprintf_r+0x28>
 8008c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c4a:	b01d      	add	sp, #116	; 0x74
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	ab03      	add	r3, sp, #12
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	462a      	mov	r2, r5
 8008c56:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <_svfiprintf_r+0x1f8>)
 8008c58:	a904      	add	r1, sp, #16
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f000 f87a 	bl	8008d54 <_printf_i>
 8008c60:	e7eb      	b.n	8008c3a <_svfiprintf_r+0x1c2>
 8008c62:	bf00      	nop
 8008c64:	0800c299 	.word	0x0800c299
 8008c68:	0800c2a3 	.word	0x0800c2a3
 8008c6c:	00000000 	.word	0x00000000
 8008c70:	080089c1 	.word	0x080089c1
 8008c74:	0800c29f 	.word	0x0800c29f

08008c78 <_printf_common>:
 8008c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	4699      	mov	r9, r3
 8008c80:	688a      	ldr	r2, [r1, #8]
 8008c82:	690b      	ldr	r3, [r1, #16]
 8008c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	bfb8      	it	lt
 8008c8c:	4613      	movlt	r3, r2
 8008c8e:	6033      	str	r3, [r6, #0]
 8008c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c94:	4607      	mov	r7, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	b10a      	cbz	r2, 8008c9e <_printf_common+0x26>
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	6033      	str	r3, [r6, #0]
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	0699      	lsls	r1, r3, #26
 8008ca2:	bf42      	ittt	mi
 8008ca4:	6833      	ldrmi	r3, [r6, #0]
 8008ca6:	3302      	addmi	r3, #2
 8008ca8:	6033      	strmi	r3, [r6, #0]
 8008caa:	6825      	ldr	r5, [r4, #0]
 8008cac:	f015 0506 	ands.w	r5, r5, #6
 8008cb0:	d106      	bne.n	8008cc0 <_printf_common+0x48>
 8008cb2:	f104 0a19 	add.w	sl, r4, #25
 8008cb6:	68e3      	ldr	r3, [r4, #12]
 8008cb8:	6832      	ldr	r2, [r6, #0]
 8008cba:	1a9b      	subs	r3, r3, r2
 8008cbc:	42ab      	cmp	r3, r5
 8008cbe:	dc26      	bgt.n	8008d0e <_printf_common+0x96>
 8008cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cc4:	1e13      	subs	r3, r2, #0
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	bf18      	it	ne
 8008cca:	2301      	movne	r3, #1
 8008ccc:	0692      	lsls	r2, r2, #26
 8008cce:	d42b      	bmi.n	8008d28 <_printf_common+0xb0>
 8008cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	47c0      	blx	r8
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d01e      	beq.n	8008d1c <_printf_common+0xa4>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	68e5      	ldr	r5, [r4, #12]
 8008ce2:	6832      	ldr	r2, [r6, #0]
 8008ce4:	f003 0306 	and.w	r3, r3, #6
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	bf08      	it	eq
 8008cec:	1aad      	subeq	r5, r5, r2
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	6922      	ldr	r2, [r4, #16]
 8008cf2:	bf0c      	ite	eq
 8008cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf8:	2500      	movne	r5, #0
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	bfc4      	itt	gt
 8008cfe:	1a9b      	subgt	r3, r3, r2
 8008d00:	18ed      	addgt	r5, r5, r3
 8008d02:	2600      	movs	r6, #0
 8008d04:	341a      	adds	r4, #26
 8008d06:	42b5      	cmp	r5, r6
 8008d08:	d11a      	bne.n	8008d40 <_printf_common+0xc8>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e008      	b.n	8008d20 <_printf_common+0xa8>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4652      	mov	r2, sl
 8008d12:	4649      	mov	r1, r9
 8008d14:	4638      	mov	r0, r7
 8008d16:	47c0      	blx	r8
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d103      	bne.n	8008d24 <_printf_common+0xac>
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d24:	3501      	adds	r5, #1
 8008d26:	e7c6      	b.n	8008cb6 <_printf_common+0x3e>
 8008d28:	18e1      	adds	r1, r4, r3
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	2030      	movs	r0, #48	; 0x30
 8008d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d32:	4422      	add	r2, r4
 8008d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d3c:	3302      	adds	r3, #2
 8008d3e:	e7c7      	b.n	8008cd0 <_printf_common+0x58>
 8008d40:	2301      	movs	r3, #1
 8008d42:	4622      	mov	r2, r4
 8008d44:	4649      	mov	r1, r9
 8008d46:	4638      	mov	r0, r7
 8008d48:	47c0      	blx	r8
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	d0e6      	beq.n	8008d1c <_printf_common+0xa4>
 8008d4e:	3601      	adds	r6, #1
 8008d50:	e7d9      	b.n	8008d06 <_printf_common+0x8e>
	...

08008d54 <_printf_i>:
 8008d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d58:	460c      	mov	r4, r1
 8008d5a:	4691      	mov	r9, r2
 8008d5c:	7e27      	ldrb	r7, [r4, #24]
 8008d5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d60:	2f78      	cmp	r7, #120	; 0x78
 8008d62:	4680      	mov	r8, r0
 8008d64:	469a      	mov	sl, r3
 8008d66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d6a:	d807      	bhi.n	8008d7c <_printf_i+0x28>
 8008d6c:	2f62      	cmp	r7, #98	; 0x62
 8008d6e:	d80a      	bhi.n	8008d86 <_printf_i+0x32>
 8008d70:	2f00      	cmp	r7, #0
 8008d72:	f000 80d8 	beq.w	8008f26 <_printf_i+0x1d2>
 8008d76:	2f58      	cmp	r7, #88	; 0x58
 8008d78:	f000 80a3 	beq.w	8008ec2 <_printf_i+0x16e>
 8008d7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d84:	e03a      	b.n	8008dfc <_printf_i+0xa8>
 8008d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d8a:	2b15      	cmp	r3, #21
 8008d8c:	d8f6      	bhi.n	8008d7c <_printf_i+0x28>
 8008d8e:	a001      	add	r0, pc, #4	; (adr r0, 8008d94 <_printf_i+0x40>)
 8008d90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d94:	08008ded 	.word	0x08008ded
 8008d98:	08008e01 	.word	0x08008e01
 8008d9c:	08008d7d 	.word	0x08008d7d
 8008da0:	08008d7d 	.word	0x08008d7d
 8008da4:	08008d7d 	.word	0x08008d7d
 8008da8:	08008d7d 	.word	0x08008d7d
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008d7d 	.word	0x08008d7d
 8008db4:	08008d7d 	.word	0x08008d7d
 8008db8:	08008d7d 	.word	0x08008d7d
 8008dbc:	08008d7d 	.word	0x08008d7d
 8008dc0:	08008f0d 	.word	0x08008f0d
 8008dc4:	08008e31 	.word	0x08008e31
 8008dc8:	08008eef 	.word	0x08008eef
 8008dcc:	08008d7d 	.word	0x08008d7d
 8008dd0:	08008d7d 	.word	0x08008d7d
 8008dd4:	08008f2f 	.word	0x08008f2f
 8008dd8:	08008d7d 	.word	0x08008d7d
 8008ddc:	08008e31 	.word	0x08008e31
 8008de0:	08008d7d 	.word	0x08008d7d
 8008de4:	08008d7d 	.word	0x08008d7d
 8008de8:	08008ef7 	.word	0x08008ef7
 8008dec:	680b      	ldr	r3, [r1, #0]
 8008dee:	1d1a      	adds	r2, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	600a      	str	r2, [r1, #0]
 8008df4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0a3      	b.n	8008f48 <_printf_i+0x1f4>
 8008e00:	6825      	ldr	r5, [r4, #0]
 8008e02:	6808      	ldr	r0, [r1, #0]
 8008e04:	062e      	lsls	r6, r5, #24
 8008e06:	f100 0304 	add.w	r3, r0, #4
 8008e0a:	d50a      	bpl.n	8008e22 <_printf_i+0xce>
 8008e0c:	6805      	ldr	r5, [r0, #0]
 8008e0e:	600b      	str	r3, [r1, #0]
 8008e10:	2d00      	cmp	r5, #0
 8008e12:	da03      	bge.n	8008e1c <_printf_i+0xc8>
 8008e14:	232d      	movs	r3, #45	; 0x2d
 8008e16:	426d      	negs	r5, r5
 8008e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e1c:	485e      	ldr	r0, [pc, #376]	; (8008f98 <_printf_i+0x244>)
 8008e1e:	230a      	movs	r3, #10
 8008e20:	e019      	b.n	8008e56 <_printf_i+0x102>
 8008e22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008e26:	6805      	ldr	r5, [r0, #0]
 8008e28:	600b      	str	r3, [r1, #0]
 8008e2a:	bf18      	it	ne
 8008e2c:	b22d      	sxthne	r5, r5
 8008e2e:	e7ef      	b.n	8008e10 <_printf_i+0xbc>
 8008e30:	680b      	ldr	r3, [r1, #0]
 8008e32:	6825      	ldr	r5, [r4, #0]
 8008e34:	1d18      	adds	r0, r3, #4
 8008e36:	6008      	str	r0, [r1, #0]
 8008e38:	0628      	lsls	r0, r5, #24
 8008e3a:	d501      	bpl.n	8008e40 <_printf_i+0xec>
 8008e3c:	681d      	ldr	r5, [r3, #0]
 8008e3e:	e002      	b.n	8008e46 <_printf_i+0xf2>
 8008e40:	0669      	lsls	r1, r5, #25
 8008e42:	d5fb      	bpl.n	8008e3c <_printf_i+0xe8>
 8008e44:	881d      	ldrh	r5, [r3, #0]
 8008e46:	4854      	ldr	r0, [pc, #336]	; (8008f98 <_printf_i+0x244>)
 8008e48:	2f6f      	cmp	r7, #111	; 0x6f
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2308      	moveq	r3, #8
 8008e4e:	230a      	movne	r3, #10
 8008e50:	2100      	movs	r1, #0
 8008e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e56:	6866      	ldr	r6, [r4, #4]
 8008e58:	60a6      	str	r6, [r4, #8]
 8008e5a:	2e00      	cmp	r6, #0
 8008e5c:	bfa2      	ittt	ge
 8008e5e:	6821      	ldrge	r1, [r4, #0]
 8008e60:	f021 0104 	bicge.w	r1, r1, #4
 8008e64:	6021      	strge	r1, [r4, #0]
 8008e66:	b90d      	cbnz	r5, 8008e6c <_printf_i+0x118>
 8008e68:	2e00      	cmp	r6, #0
 8008e6a:	d04d      	beq.n	8008f08 <_printf_i+0x1b4>
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e72:	fb03 5711 	mls	r7, r3, r1, r5
 8008e76:	5dc7      	ldrb	r7, [r0, r7]
 8008e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e7c:	462f      	mov	r7, r5
 8008e7e:	42bb      	cmp	r3, r7
 8008e80:	460d      	mov	r5, r1
 8008e82:	d9f4      	bls.n	8008e6e <_printf_i+0x11a>
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d10b      	bne.n	8008ea0 <_printf_i+0x14c>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	07df      	lsls	r7, r3, #31
 8008e8c:	d508      	bpl.n	8008ea0 <_printf_i+0x14c>
 8008e8e:	6923      	ldr	r3, [r4, #16]
 8008e90:	6861      	ldr	r1, [r4, #4]
 8008e92:	4299      	cmp	r1, r3
 8008e94:	bfde      	ittt	le
 8008e96:	2330      	movle	r3, #48	; 0x30
 8008e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ea0:	1b92      	subs	r2, r2, r6
 8008ea2:	6122      	str	r2, [r4, #16]
 8008ea4:	f8cd a000 	str.w	sl, [sp]
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	aa03      	add	r2, sp, #12
 8008eac:	4621      	mov	r1, r4
 8008eae:	4640      	mov	r0, r8
 8008eb0:	f7ff fee2 	bl	8008c78 <_printf_common>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d14c      	bne.n	8008f52 <_printf_i+0x1fe>
 8008eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebc:	b004      	add	sp, #16
 8008ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec2:	4835      	ldr	r0, [pc, #212]	; (8008f98 <_printf_i+0x244>)
 8008ec4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	680e      	ldr	r6, [r1, #0]
 8008ecc:	061f      	lsls	r7, r3, #24
 8008ece:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ed2:	600e      	str	r6, [r1, #0]
 8008ed4:	d514      	bpl.n	8008f00 <_printf_i+0x1ac>
 8008ed6:	07d9      	lsls	r1, r3, #31
 8008ed8:	bf44      	itt	mi
 8008eda:	f043 0320 	orrmi.w	r3, r3, #32
 8008ede:	6023      	strmi	r3, [r4, #0]
 8008ee0:	b91d      	cbnz	r5, 8008eea <_printf_i+0x196>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	f023 0320 	bic.w	r3, r3, #32
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	2310      	movs	r3, #16
 8008eec:	e7b0      	b.n	8008e50 <_printf_i+0xfc>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	f043 0320 	orr.w	r3, r3, #32
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	2378      	movs	r3, #120	; 0x78
 8008ef8:	4828      	ldr	r0, [pc, #160]	; (8008f9c <_printf_i+0x248>)
 8008efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008efe:	e7e3      	b.n	8008ec8 <_printf_i+0x174>
 8008f00:	065e      	lsls	r6, r3, #25
 8008f02:	bf48      	it	mi
 8008f04:	b2ad      	uxthmi	r5, r5
 8008f06:	e7e6      	b.n	8008ed6 <_printf_i+0x182>
 8008f08:	4616      	mov	r6, r2
 8008f0a:	e7bb      	b.n	8008e84 <_printf_i+0x130>
 8008f0c:	680b      	ldr	r3, [r1, #0]
 8008f0e:	6826      	ldr	r6, [r4, #0]
 8008f10:	6960      	ldr	r0, [r4, #20]
 8008f12:	1d1d      	adds	r5, r3, #4
 8008f14:	600d      	str	r5, [r1, #0]
 8008f16:	0635      	lsls	r5, r6, #24
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	d501      	bpl.n	8008f20 <_printf_i+0x1cc>
 8008f1c:	6018      	str	r0, [r3, #0]
 8008f1e:	e002      	b.n	8008f26 <_printf_i+0x1d2>
 8008f20:	0671      	lsls	r1, r6, #25
 8008f22:	d5fb      	bpl.n	8008f1c <_printf_i+0x1c8>
 8008f24:	8018      	strh	r0, [r3, #0]
 8008f26:	2300      	movs	r3, #0
 8008f28:	6123      	str	r3, [r4, #16]
 8008f2a:	4616      	mov	r6, r2
 8008f2c:	e7ba      	b.n	8008ea4 <_printf_i+0x150>
 8008f2e:	680b      	ldr	r3, [r1, #0]
 8008f30:	1d1a      	adds	r2, r3, #4
 8008f32:	600a      	str	r2, [r1, #0]
 8008f34:	681e      	ldr	r6, [r3, #0]
 8008f36:	6862      	ldr	r2, [r4, #4]
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7f7 f948 	bl	80001d0 <memchr>
 8008f40:	b108      	cbz	r0, 8008f46 <_printf_i+0x1f2>
 8008f42:	1b80      	subs	r0, r0, r6
 8008f44:	6060      	str	r0, [r4, #4]
 8008f46:	6863      	ldr	r3, [r4, #4]
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f50:	e7a8      	b.n	8008ea4 <_printf_i+0x150>
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	4632      	mov	r2, r6
 8008f56:	4649      	mov	r1, r9
 8008f58:	4640      	mov	r0, r8
 8008f5a:	47d0      	blx	sl
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d0ab      	beq.n	8008eb8 <_printf_i+0x164>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	079b      	lsls	r3, r3, #30
 8008f64:	d413      	bmi.n	8008f8e <_printf_i+0x23a>
 8008f66:	68e0      	ldr	r0, [r4, #12]
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	4298      	cmp	r0, r3
 8008f6c:	bfb8      	it	lt
 8008f6e:	4618      	movlt	r0, r3
 8008f70:	e7a4      	b.n	8008ebc <_printf_i+0x168>
 8008f72:	2301      	movs	r3, #1
 8008f74:	4632      	mov	r2, r6
 8008f76:	4649      	mov	r1, r9
 8008f78:	4640      	mov	r0, r8
 8008f7a:	47d0      	blx	sl
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d09b      	beq.n	8008eb8 <_printf_i+0x164>
 8008f80:	3501      	adds	r5, #1
 8008f82:	68e3      	ldr	r3, [r4, #12]
 8008f84:	9903      	ldr	r1, [sp, #12]
 8008f86:	1a5b      	subs	r3, r3, r1
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	dcf2      	bgt.n	8008f72 <_printf_i+0x21e>
 8008f8c:	e7eb      	b.n	8008f66 <_printf_i+0x212>
 8008f8e:	2500      	movs	r5, #0
 8008f90:	f104 0619 	add.w	r6, r4, #25
 8008f94:	e7f5      	b.n	8008f82 <_printf_i+0x22e>
 8008f96:	bf00      	nop
 8008f98:	0800c2aa 	.word	0x0800c2aa
 8008f9c:	0800c2bb 	.word	0x0800c2bb

08008fa0 <__retarget_lock_acquire_recursive>:
 8008fa0:	4770      	bx	lr

08008fa2 <__retarget_lock_release_recursive>:
 8008fa2:	4770      	bx	lr

08008fa4 <memcpy>:
 8008fa4:	440a      	add	r2, r1
 8008fa6:	4291      	cmp	r1, r2
 8008fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fac:	d100      	bne.n	8008fb0 <memcpy+0xc>
 8008fae:	4770      	bx	lr
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fba:	4291      	cmp	r1, r2
 8008fbc:	d1f9      	bne.n	8008fb2 <memcpy+0xe>
 8008fbe:	bd10      	pop	{r4, pc}

08008fc0 <memmove>:
 8008fc0:	4288      	cmp	r0, r1
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	eb01 0402 	add.w	r4, r1, r2
 8008fc8:	d902      	bls.n	8008fd0 <memmove+0x10>
 8008fca:	4284      	cmp	r4, r0
 8008fcc:	4623      	mov	r3, r4
 8008fce:	d807      	bhi.n	8008fe0 <memmove+0x20>
 8008fd0:	1e43      	subs	r3, r0, #1
 8008fd2:	42a1      	cmp	r1, r4
 8008fd4:	d008      	beq.n	8008fe8 <memmove+0x28>
 8008fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fde:	e7f8      	b.n	8008fd2 <memmove+0x12>
 8008fe0:	4402      	add	r2, r0
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	428a      	cmp	r2, r1
 8008fe6:	d100      	bne.n	8008fea <memmove+0x2a>
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ff2:	e7f7      	b.n	8008fe4 <memmove+0x24>

08008ff4 <_realloc_r>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	4614      	mov	r4, r2
 8008ffa:	460e      	mov	r6, r1
 8008ffc:	b921      	cbnz	r1, 8009008 <_realloc_r+0x14>
 8008ffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009002:	4611      	mov	r1, r2
 8009004:	f7ff bbb8 	b.w	8008778 <_malloc_r>
 8009008:	b922      	cbnz	r2, 8009014 <_realloc_r+0x20>
 800900a:	f7ff fb65 	bl	80086d8 <_free_r>
 800900e:	4625      	mov	r5, r4
 8009010:	4628      	mov	r0, r5
 8009012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009014:	f000 f814 	bl	8009040 <_malloc_usable_size_r>
 8009018:	42a0      	cmp	r0, r4
 800901a:	d20f      	bcs.n	800903c <_realloc_r+0x48>
 800901c:	4621      	mov	r1, r4
 800901e:	4638      	mov	r0, r7
 8009020:	f7ff fbaa 	bl	8008778 <_malloc_r>
 8009024:	4605      	mov	r5, r0
 8009026:	2800      	cmp	r0, #0
 8009028:	d0f2      	beq.n	8009010 <_realloc_r+0x1c>
 800902a:	4631      	mov	r1, r6
 800902c:	4622      	mov	r2, r4
 800902e:	f7ff ffb9 	bl	8008fa4 <memcpy>
 8009032:	4631      	mov	r1, r6
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff fb4f 	bl	80086d8 <_free_r>
 800903a:	e7e9      	b.n	8009010 <_realloc_r+0x1c>
 800903c:	4635      	mov	r5, r6
 800903e:	e7e7      	b.n	8009010 <_realloc_r+0x1c>

08009040 <_malloc_usable_size_r>:
 8009040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009044:	1f18      	subs	r0, r3, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfbc      	itt	lt
 800904a:	580b      	ldrlt	r3, [r1, r0]
 800904c:	18c0      	addlt	r0, r0, r3
 800904e:	4770      	bx	lr

08009050 <_init>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	bf00      	nop
 8009054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009056:	bc08      	pop	{r3}
 8009058:	469e      	mov	lr, r3
 800905a:	4770      	bx	lr

0800905c <_fini>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	bf00      	nop
 8009060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009062:	bc08      	pop	{r3}
 8009064:	469e      	mov	lr, r3
 8009066:	4770      	bx	lr
